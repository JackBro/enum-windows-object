// #################################################################################
// Generated by Symbol Type Viewer 32Bit/64Bit - Version 1.0.0.6 beta
// http://www.syseclabs.com
// Coding by Lionel d'Hauenens
// #################################################################################
// Image         : 32bit
// ImageName     : C:\Windows\SysWOW64\ntdll.dll
// LoadedPdbName : D:\Symbols\wntdll.pdb\94FD57A20B2B4917A44938FAF1F214811\wntdll.pdb

#ifdef __cplusplus
extern "C" {
#endif

//////////////////
//   C Define   //
//////////////////

#define VOID void
#define STDCALL __stdcall
#define FASTCALL __fastcall
#define CDECL __cdecl
#define THISCALL __thiscall
#define NEAR 
#define FAR 
//---------------------------------------------------------------------

//////////////////
// C Basic Type //
//////////////////

typedef signed char INT8;
typedef signed char CHAR;
typedef signed short INT16;
typedef signed int INT32;
typedef signed int BOOL;
typedef signed __int64 INT64;
typedef signed __int64 LONG64;
typedef signed long LONG32;
typedef unsigned char UINT8;
typedef unsigned char BYTE;
typedef unsigned short UINT16;
typedef unsigned short WCHAR;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned __int64 ULONG64;
typedef unsigned long ULONG32;
typedef float FLOAT32;
typedef double FLOAT64;
typedef struct {unsigned short W[5];} FLOAT80;
typedef struct { __int64 LowPart;__int64 HighPart;} FLOAT128;
typedef double DATE;
typedef signed long HRESULT;
typedef union { struct {unsigned long Lo; long Hi;}; __int64 int64;} CURRENCY;
typedef wchar_t OLECHAR;
//---------------------------------------------------------------------

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Enum types

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE  // 3 elements, 0x4 bytes
{
    StandardDesign  = 0 /*0x0*/,
    NEC98x86        = 1 /*0x1*/,
    EndAlternatives = 2 /*0x2*/
}ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef enum _BUS_QUERY_ID_TYPE  // 6 elements, 0x4 bytes
{
    BusQueryDeviceID           = 0 /*0x0*/,
    BusQueryHardwareIDs        = 1 /*0x1*/,
    BusQueryCompatibleIDs      = 2 /*0x2*/,
    BusQueryInstanceID         = 3 /*0x3*/,
    BusQueryDeviceSerialNumber = 4 /*0x4*/,
    BusQueryContainerID        = 5 /*0x5*/
}BUS_QUERY_ID_TYPE, *PBUS_QUERY_ID_TYPE;

typedef enum _CPU_VENDORS  // 9 elements, 0x4 bytes
{
    CPU_NONE      = 0 /*0x0*/,
    CPU_INTEL     = 1 /*0x1*/,
    CPU_AMD       = 2 /*0x2*/,
    CPU_CYRIX     = 3 /*0x3*/,
    CPU_TRANSMETA = 4 /*0x4*/,
    CPU_VIA       = 5 /*0x5*/,
    CPU_CENTAUR   = 5 /*0x5*/,
    CPU_RISE      = 6 /*0x6*/,
    CPU_UNKNOWN   = 7 /*0x7*/
}CPU_VENDORS, *PCPU_VENDORS;

typedef enum _DEVICE_POWER_STATE  // 6 elements, 0x4 bytes
{
    PowerDeviceUnspecified = 0 /*0x0*/,
    PowerDeviceD0          = 1 /*0x1*/,
    PowerDeviceD1          = 2 /*0x2*/,
    PowerDeviceD2          = 3 /*0x3*/,
    PowerDeviceD3          = 4 /*0x4*/,
    PowerDeviceMaximum     = 5 /*0x5*/
}DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _DEVICE_RELATION_TYPE  // 7 elements, 0x4 bytes
{
    BusRelations         = 0 /*0x0*/,
    EjectionRelations    = 1 /*0x1*/,
    PowerRelations       = 2 /*0x2*/,
    RemovalRelations     = 3 /*0x3*/,
    TargetDeviceRelation = 4 /*0x4*/,
    SingleBusRelations   = 5 /*0x5*/,
    TransportRelations   = 6 /*0x6*/
}DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _DEVICE_TEXT_TYPE  // 2 elements, 0x4 bytes
{
    DeviceTextDescription         = 0 /*0x0*/,
    DeviceTextLocationInformation = 1 /*0x1*/
}DEVICE_TEXT_TYPE, *PDEVICE_TEXT_TYPE;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE  // 6 elements, 0x4 bytes
{
    DeviceUsageTypeUndefined   = 0 /*0x0*/,
    DeviceUsageTypePaging      = 1 /*0x1*/,
    DeviceUsageTypeHibernation = 2 /*0x2*/,
    DeviceUsageTypeDumpFile    = 3 /*0x3*/,
    DeviceUsageTypeBoot        = 4 /*0x4*/,
    DeviceUsageTypePostDisplay = 5 /*0x5*/
}DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _DEVICE_WAKE_DEPTH  // 7 elements, 0x4 bytes
{
    DeviceWakeDepthNotWakeable = 0 /*0x0*/,
    DeviceWakeDepthD0          = 1 /*0x1*/,
    DeviceWakeDepthD1          = 2 /*0x2*/,
    DeviceWakeDepthD2          = 3 /*0x3*/,
    DeviceWakeDepthD3hot       = 4 /*0x4*/,
    DeviceWakeDepthD3cold      = 5 /*0x5*/,
    DeviceWakeDepthMaximum     = 6 /*0x6*/
}DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _DISPLAYCONFIG_SCANLINE_ORDERING  // 6 elements, 0x4 bytes
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                = 0 /*0x0*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                = 1 /*0x1*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                 = 2 /*0x2*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2 /*0x2*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3 /*0x3*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32               = -1 /*0xFF*/
}DISPLAYCONFIG_SCANLINE_ORDERING, *PDISPLAYCONFIG_SCANLINE_ORDERING;

typedef enum _EVENT_TYPE  // 2 elements, 0x4 bytes
{
    NotificationEvent    = 0 /*0x0*/,
    SynchronizationEvent = 1 /*0x1*/
}EVENT_TYPE, *PEVENT_TYPE;

typedef enum _EX_BALANCE_OBJECT  // 4 elements, 0x4 bytes
{
    ExTimerExpiration       = 0 /*0x0*/,
    ExThreadSetManagerEvent = 1 /*0x1*/,
    ExThreadReaperEvent     = 2 /*0x2*/,
    ExMaximumBalanceObject  = 3 /*0x3*/
}EX_BALANCE_OBJECT, *PEX_BALANCE_OBJECT;

typedef enum _EX_GEN_RANDOM_DOMAIN  // 4 elements, 0x4 bytes
{
    ExGenRandomDomainKernel      = 0 /*0x0*/,
    ExGenRandomDomainFirst       = 0 /*0x0*/,
    ExGenRandomDomainUserVisible = 1 /*0x1*/,
    ExGenRandomDomainMax         = 2 /*0x2*/
}EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _EXCEPTION_DISPOSITION  // 4 elements, 0x4 bytes
{
    ExceptionContinueExecution = 0 /*0x0*/,
    ExceptionContinueSearch    = 1 /*0x1*/,
    ExceptionNestedException   = 2 /*0x2*/,
    ExceptionCollidedUnwind    = 3 /*0x3*/
}EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _EXQUEUEINDEX  // 3 elements, 0x4 bytes
{
    ExPoolUntrusted = 0 /*0x0*/,
    ExPoolTrusted   = 1 /*0x1*/,
    ExPoolMax       = 8 /*0x8*/
}EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef enum _FILE_INFORMATION_CLASS  // 64 elements, 0x4 bytes
{
    FileDirectoryInformation                = 1 /*0x1*/,
    FileFullDirectoryInformation            = 2 /*0x2*/,
    FileBothDirectoryInformation            = 3 /*0x3*/,
    FileBasicInformation                    = 4 /*0x4*/,
    FileStandardInformation                 = 5 /*0x5*/,
    FileInternalInformation                 = 6 /*0x6*/,
    FileEaInformation                       = 7 /*0x7*/,
    FileAccessInformation                   = 8 /*0x8*/,
    FileNameInformation                     = 9 /*0x9*/,
    FileRenameInformation                   = 10 /*0xA*/,
    FileLinkInformation                     = 11 /*0xB*/,
    FileNamesInformation                    = 12 /*0xC*/,
    FileDispositionInformation              = 13 /*0xD*/,
    FilePositionInformation                 = 14 /*0xE*/,
    FileFullEaInformation                   = 15 /*0xF*/,
    FileModeInformation                     = 16 /*0x10*/,
    FileAlignmentInformation                = 17 /*0x11*/,
    FileAllInformation                      = 18 /*0x12*/,
    FileAllocationInformation               = 19 /*0x13*/,
    FileEndOfFileInformation                = 20 /*0x14*/,
    FileAlternateNameInformation            = 21 /*0x15*/,
    FileStreamInformation                   = 22 /*0x16*/,
    FilePipeInformation                     = 23 /*0x17*/,
    FilePipeLocalInformation                = 24 /*0x18*/,
    FilePipeRemoteInformation               = 25 /*0x19*/,
    FileMailslotQueryInformation            = 26 /*0x1A*/,
    FileMailslotSetInformation              = 27 /*0x1B*/,
    FileCompressionInformation              = 28 /*0x1C*/,
    FileObjectIdInformation                 = 29 /*0x1D*/,
    FileCompletionInformation               = 30 /*0x1E*/,
    FileMoveClusterInformation              = 31 /*0x1F*/,
    FileQuotaInformation                    = 32 /*0x20*/,
    FileReparsePointInformation             = 33 /*0x21*/,
    FileNetworkOpenInformation              = 34 /*0x22*/,
    FileAttributeTagInformation             = 35 /*0x23*/,
    FileTrackingInformation                 = 36 /*0x24*/,
    FileIdBothDirectoryInformation          = 37 /*0x25*/,
    FileIdFullDirectoryInformation          = 38 /*0x26*/,
    FileValidDataLengthInformation          = 39 /*0x27*/,
    FileShortNameInformation                = 40 /*0x28*/,
    FileIoCompletionNotificationInformation = 41 /*0x29*/,
    FileIoStatusBlockRangeInformation       = 42 /*0x2A*/,
    FileIoPriorityHintInformation           = 43 /*0x2B*/,
    FileSfioReserveInformation              = 44 /*0x2C*/,
    FileSfioVolumeInformation               = 45 /*0x2D*/,
    FileHardLinkInformation                 = 46 /*0x2E*/,
    FileProcessIdsUsingFileInformation      = 47 /*0x2F*/,
    FileNormalizedNameInformation           = 48 /*0x30*/,
    FileNetworkPhysicalNameInformation      = 49 /*0x31*/,
    FileIdGlobalTxDirectoryInformation      = 50 /*0x32*/,
    FileIsRemoteDeviceInformation           = 51 /*0x33*/,
    FileUnusedInformation                   = 52 /*0x34*/,
    FileNumaNodeInformation                 = 53 /*0x35*/,
    FileStandardLinkInformation             = 54 /*0x36*/,
    FileRemoteProtocolInformation           = 55 /*0x37*/,
    FileRenameInformationBypassAccessCheck  = 56 /*0x38*/,
    FileLinkInformationBypassAccessCheck    = 57 /*0x39*/,
    FileVolumeNameInformation               = 58 /*0x3A*/,
    FileIdInformation                       = 59 /*0x3B*/,
    FileIdExtdDirectoryInformation          = 60 /*0x3C*/,
    FileReplaceCompletionInformation        = 61 /*0x3D*/,
    FileHardLinkFullIdInformation           = 62 /*0x3E*/,
    FileIdExtdBothDirectoryInformation      = 63 /*0x3F*/,
    FileMaximumInformation                  = 64 /*0x40*/
}FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _FS_FILTER_SECTION_SYNC_TYPE  // 2 elements, 0x4 bytes
{
    SyncTypeOther         = 0 /*0x0*/,
    SyncTypeCreateSection = 1 /*0x1*/
}FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE  // 2 elements, 0x4 bytes
{
    NotifyTypeCreate  = 0 /*0x0*/,
    NotifyTypeRetired = 1 /*0x1*/
}FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;

typedef enum _FSINFOCLASS  // 14 elements, 0x4 bytes
{
    FileFsVolumeInformation       = 1 /*0x1*/,
    FileFsLabelInformation        = 2 /*0x2*/,
    FileFsSizeInformation         = 3 /*0x3*/,
    FileFsDeviceInformation       = 4 /*0x4*/,
    FileFsAttributeInformation    = 5 /*0x5*/,
    FileFsControlInformation      = 6 /*0x6*/,
    FileFsFullSizeInformation     = 7 /*0x7*/,
    FileFsObjectIdInformation     = 8 /*0x8*/,
    FileFsDriverPathInformation   = 9 /*0x9*/,
    FileFsVolumeFlagsInformation  = 10 /*0xA*/,
    FileFsSectorSizeInformation   = 11 /*0xB*/,
    FileFsDataCopyInformation     = 12 /*0xC*/,
    FileFsMetadataSizeInformation = 13 /*0xD*/,
    FileFsMaximumInformation      = 14 /*0xE*/
}FSINFOCLASS, *PFSINFOCLASS;

typedef enum _HAL_APIC_DESTINATION_MODE  // 4 elements, 0x4 bytes
{
    ApicDestinationModePhysical         = 1 /*0x1*/,
    ApicDestinationModeLogicalFlat      = 2 /*0x2*/,
    ApicDestinationModeLogicalClustered = 3 /*0x3*/,
    ApicDestinationModeUnknown          = 4 /*0x4*/
}HAL_APIC_DESTINATION_MODE, *PHAL_APIC_DESTINATION_MODE;

typedef enum _HARDWARE_COUNTER_TYPE  // 2 elements, 0x4 bytes
{
    PMCCounter             = 0 /*0x0*/,
    MaxHardwareCounterType = 1 /*0x1*/
}HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef enum _HEAP_FAILURE_TYPE  // 18 elements, 0x4 bytes
{
    heap_failure_internal                      = 0 /*0x0*/,
    heap_failure_unknown                       = 1 /*0x1*/,
    heap_failure_generic                       = 2 /*0x2*/,
    heap_failure_entry_corruption              = 3 /*0x3*/,
    heap_failure_multiple_entries_corruption   = 4 /*0x4*/,
    heap_failure_virtual_block_corruption      = 5 /*0x5*/,
    heap_failure_buffer_overrun                = 6 /*0x6*/,
    heap_failure_buffer_underrun               = 7 /*0x7*/,
    heap_failure_block_not_busy                = 8 /*0x8*/,
    heap_failure_invalid_argument              = 9 /*0x9*/,
    heap_failure_usage_after_free              = 10 /*0xA*/,
    heap_failure_cross_heap_operation          = 11 /*0xB*/,
    heap_failure_freelists_corruption          = 12 /*0xC*/,
    heap_failure_listentry_corruption          = 13 /*0xD*/,
    heap_failure_lfh_bitmap_mismatch           = 14 /*0xE*/,
    heap_failure_segment_lfh_bitmap_corruption = 15 /*0xF*/,
    heap_failure_segment_lfh_double_free       = 16 /*0x10*/,
    heap_failure_vs_subsegment_corruption      = 17 /*0x11*/
}HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef enum _HEAP_LFH_LOCKMODE  // 3 elements, 0x4 bytes
{
    HeapLockNotHeld   = 0 /*0x0*/,
    HeapLockShared    = 1 /*0x1*/,
    HeapLockExclusive = 2 /*0x2*/
}HEAP_LFH_LOCKMODE, *PHEAP_LFH_LOCKMODE;

typedef enum _INTERFACE_TYPE  // 20 elements, 0x4 bytes
{
    InterfaceTypeUndefined = -1 /*0xFF*/,
    Internal               = 0 /*0x0*/,
    Isa                    = 1 /*0x1*/,
    Eisa                   = 2 /*0x2*/,
    MicroChannel           = 3 /*0x3*/,
    TurboChannel           = 4 /*0x4*/,
    PCIBus                 = 5 /*0x5*/,
    VMEBus                 = 6 /*0x6*/,
    NuBus                  = 7 /*0x7*/,
    PCMCIABus              = 8 /*0x8*/,
    CBus                   = 9 /*0x9*/,
    MPIBus                 = 10 /*0xA*/,
    MPSABus                = 11 /*0xB*/,
    ProcessorInternal      = 12 /*0xC*/,
    InternalPowerBus       = 13 /*0xD*/,
    PNPISABus              = 14 /*0xE*/,
    PNPBus                 = 15 /*0xF*/,
    Vmcs                   = 16 /*0x10*/,
    ACPIBus                = 17 /*0x11*/,
    MaximumInterfaceType   = 18 /*0x12*/
}INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _INTERRUPT_CONNECTION_TYPE  // 4 elements, 0x4 bytes
{
    InterruptTypeControllerInput = 0 /*0x0*/,
    InterruptTypeXapicMessage    = 1 /*0x1*/,
    InterruptTypeHypertransport  = 2 /*0x2*/,
    InterruptTypeMessageRequest  = 3 /*0x3*/
}INTERRUPT_CONNECTION_TYPE, *PINTERRUPT_CONNECTION_TYPE;

typedef enum _IO_ALLOCATION_ACTION  // 3 elements, 0x4 bytes
{
    KeepObject                    = 1 /*0x1*/,
    DeallocateObject              = 2 /*0x2*/,
    DeallocateObjectKeepRegisters = 3 /*0x3*/
}IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef enum _IO_PRIORITY_HINT  // 6 elements, 0x4 bytes
{
    IoPriorityVeryLow  = 0 /*0x0*/,
    IoPriorityLow      = 1 /*0x1*/,
    IoPriorityNormal   = 2 /*0x2*/,
    IoPriorityHigh     = 3 /*0x3*/,
    IoPriorityCritical = 4 /*0x4*/,
    MaxIoPriorityTypes = 5 /*0x5*/
}IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef enum _IRQ_PRIORITY  // 4 elements, 0x4 bytes
{
    IrqPriorityUndefined = 0 /*0x0*/,
    IrqPriorityLow       = 1 /*0x1*/,
    IrqPriorityNormal    = 2 /*0x2*/,
    IrqPriorityHigh      = 3 /*0x3*/
}IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _JOB_OBJECT_IO_RATE_CONTROL_FLAGS  // 2 elements, 0x4 bytes
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE      = 1 /*0x1*/,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 1 /*0x1*/
}JOB_OBJECT_IO_RATE_CONTROL_FLAGS, *PJOB_OBJECT_IO_RATE_CONTROL_FLAGS;

typedef enum _JOB_OBJECT_NET_RATE_CONTROL_FLAGS  // 4 elements, 0x4 bytes
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE        = 1 /*0x1*/,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2 /*0x2*/,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG      = 4 /*0x4*/,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS   = 7 /*0x7*/
}JOB_OBJECT_NET_RATE_CONTROL_FLAGS, *PJOB_OBJECT_NET_RATE_CONTROL_FLAGS;

typedef enum _JOBOBJECTINFOCLASS  // 56 elements, 0x4 bytes
{
    JobObjectBasicAccountingInformation         = 1 /*0x1*/,
    JobObjectBasicLimitInformation              = 2 /*0x2*/,
    JobObjectBasicProcessIdList                 = 3 /*0x3*/,
    JobObjectBasicUIRestrictions                = 4 /*0x4*/,
    JobObjectSecurityLimitInformation           = 5 /*0x5*/,
    JobObjectEndOfJobTimeInformation            = 6 /*0x6*/,
    JobObjectAssociateCompletionPortInformation = 7 /*0x7*/,
    JobObjectBasicAndIoAccountingInformation    = 8 /*0x8*/,
    JobObjectExtendedLimitInformation           = 9 /*0x9*/,
    JobObjectJobSetInformation                  = 10 /*0xA*/,
    JobObjectGroupInformation                   = 11 /*0xB*/,
    JobObjectNotificationLimitInformation       = 12 /*0xC*/,
    JobObjectLimitViolationInformation          = 13 /*0xD*/,
    JobObjectGroupInformationEx                 = 14 /*0xE*/,
    JobObjectCpuRateControlInformation          = 15 /*0xF*/,
    JobObjectCompletionFilter                   = 16 /*0x10*/,
    JobObjectCompletionCounter                  = 17 /*0x11*/,
    JobObjectFreezeInformation                  = 18 /*0x12*/,
    JobObjectExtendedAccountingInformation      = 19 /*0x13*/,
    JobObjectWakeInformation                    = 20 /*0x14*/,
    JobObjectBackgroundInformation              = 21 /*0x15*/,
    JobObjectSchedulingRankBiasInformation      = 22 /*0x16*/,
    JobObjectTimerVirtualizationInformation     = 23 /*0x17*/,
    JobObjectCycleTimeNotification              = 24 /*0x18*/,
    JobObjectClearEvent                         = 25 /*0x19*/,
    JobObjectInterferenceInformation            = 26 /*0x1A*/,
    JobObjectClearPeakJobMemoryUsed             = 27 /*0x1B*/,
    JobObjectMemoryUsageInformation             = 28 /*0x1C*/,
    JobObjectSharedCommit                       = 29 /*0x1D*/,
    JobObjectContainerId                        = 30 /*0x1E*/,
    JobObjectIoRateControlInformation           = 31 /*0x1F*/,
    JobObjectReserved1Information               = 18 /*0x12*/,
    JobObjectReserved2Information               = 19 /*0x13*/,
    JobObjectReserved3Information               = 20 /*0x14*/,
    JobObjectReserved4Information               = 21 /*0x15*/,
    JobObjectReserved5Information               = 22 /*0x16*/,
    JobObjectReserved6Information               = 23 /*0x17*/,
    JobObjectReserved7Information               = 24 /*0x18*/,
    JobObjectReserved8Information               = 25 /*0x19*/,
    JobObjectReserved9Information               = 26 /*0x1A*/,
    JobObjectReserved10Information              = 27 /*0x1B*/,
    JobObjectReserved11Information              = 28 /*0x1C*/,
    JobObjectReserved12Information              = 29 /*0x1D*/,
    JobObjectReserved13Information              = 30 /*0x1E*/,
    JobObjectReserved14Information              = 31 /*0x1F*/,
    JobObjectNetRateControlInformation          = 32 /*0x20*/,
    JobObjectNotificationLimitInformation2      = 33 /*0x21*/,
    JobObjectLimitViolationInformation2         = 34 /*0x22*/,
    JobObjectCreateSilo                         = 35 /*0x23*/,
    JobObjectSiloBasicInformation               = 36 /*0x24*/,
    JobObjectSiloRootDirectory                  = 37 /*0x25*/,
    JobObjectServerSiloBasicInformation         = 38 /*0x26*/,
    JobObjectServerSiloServiceSessionId         = 39 /*0x27*/,
    JobObjectServerSiloInitialize               = 40 /*0x28*/,
    JobObjectServerSiloRunningState             = 41 /*0x29*/,
    MaxJobObjectInfoClass                       = 42 /*0x2A*/
}JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _KHETERO_CPU_POLICY  // 11 elements, 0x4 bytes
{
    KHeteroCpuPolicyAll         = 0 /*0x0*/,
    KHeteroCpuPolicyLarge       = 1 /*0x1*/,
    KHeteroCpuPolicyLargeOrIdle = 2 /*0x2*/,
    KHeteroCpuPolicySmall       = 3 /*0x3*/,
    KHeteroCpuPolicySmallOrIdle = 4 /*0x4*/,
    KHeteroCpuPolicyDynamic     = 5 /*0x5*/,
    KHeteroCpuPolicyStaticMax   = 5 /*0x5*/,
    KHeteroCpuPolicyBiasedSmall = 6 /*0x6*/,
    KHeteroCpuPolicyBiasedLarge = 7 /*0x7*/,
    KHeteroCpuPolicyDefault     = 8 /*0x8*/,
    KHeteroCpuPolicyMax         = 9 /*0x9*/
}KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef enum _KINTERRUPT_MODE  // 2 elements, 0x4 bytes
{
    LevelSensitive = 0 /*0x0*/,
    Latched        = 1 /*0x1*/
}KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _KINTERRUPT_POLARITY  // 8 elements, 0x4 bytes
{
    InterruptPolarityUnknown       = 0 /*0x0*/,
    InterruptActiveHigh            = 1 /*0x1*/,
    InterruptRisingEdge            = 1 /*0x1*/,
    InterruptActiveLow             = 2 /*0x2*/,
    InterruptFallingEdge           = 2 /*0x2*/,
    InterruptActiveBoth            = 3 /*0x3*/,
    InterruptActiveBothTriggerLow  = 3 /*0x3*/,
    InterruptActiveBothTriggerHigh = 4 /*0x4*/
}KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef enum _KOBJECTS  // 28 elements, 0x4 bytes
{
    EventNotificationObject     = 0 /*0x0*/,
    EventSynchronizationObject  = 1 /*0x1*/,
    MutantObject                = 2 /*0x2*/,
    ProcessObject               = 3 /*0x3*/,
    QueueObject                 = 4 /*0x4*/,
    SemaphoreObject             = 5 /*0x5*/,
    ThreadObject                = 6 /*0x6*/,
    GateObject                  = 7 /*0x7*/,
    TimerNotificationObject     = 8 /*0x8*/,
    TimerSynchronizationObject  = 9 /*0x9*/,
    Spare2Object                = 10 /*0xA*/,
    Spare3Object                = 11 /*0xB*/,
    Spare4Object                = 12 /*0xC*/,
    Spare5Object                = 13 /*0xD*/,
    Spare6Object                = 14 /*0xE*/,
    Spare7Object                = 15 /*0xF*/,
    Spare8Object                = 16 /*0x10*/,
    ProfileCallbackObject       = 17 /*0x11*/,
    ApcObject                   = 18 /*0x12*/,
    DpcObject                   = 19 /*0x13*/,
    DeviceQueueObject           = 20 /*0x14*/,
    PriQueueObject              = 21 /*0x15*/,
    InterruptObject             = 22 /*0x16*/,
    ProfileObject               = 23 /*0x17*/,
    Timer2NotificationObject    = 24 /*0x18*/,
    Timer2SynchronizationObject = 25 /*0x19*/,
    ThreadedDpcObject           = 26 /*0x1A*/,
    MaximumKernelObject         = 27 /*0x1B*/
}KOBJECTS, *PKOBJECTS;

typedef enum _KPROCESS_STATE  // 8 elements, 0x4 bytes
{
    ProcessInMemory      = 0 /*0x0*/,
    ProcessOutOfMemory   = 1 /*0x1*/,
    ProcessInTransition  = 2 /*0x2*/,
    ProcessOutTransition = 3 /*0x3*/,
    ProcessInSwap        = 4 /*0x4*/,
    ProcessOutSwap       = 5 /*0x5*/,
    ProcessRetryOutSwap  = 6 /*0x6*/,
    ProcessAllSwapStates = 7 /*0x7*/
}KPROCESS_STATE, *PKPROCESS_STATE;

typedef enum _KSPIN_LOCK_QUEUE_NUMBER  // 18 elements, 0x4 bytes
{
    LockQueueUnusedSpare0     = 0 /*0x0*/,
    LockQueueUnusedSpare1     = 1 /*0x1*/,
    LockQueueUnusedSpare2     = 2 /*0x2*/,
    LockQueueUnusedSpare3     = 3 /*0x3*/,
    LockQueueVacbLock         = 4 /*0x4*/,
    LockQueueMasterLock       = 5 /*0x5*/,
    LockQueueNonPagedPoolLock = 6 /*0x6*/,
    LockQueueIoCancelLock     = 7 /*0x7*/,
    LockQueueWorkQueueLock    = 8 /*0x8*/,
    LockQueueIoVpbLock        = 9 /*0x9*/,
    LockQueueIoDatabaseLock   = 10 /*0xA*/,
    LockQueueIoCompletionLock = 11 /*0xB*/,
    LockQueueNtfsStructLock   = 12 /*0xC*/,
    LockQueueAfdWorkQueueLock = 13 /*0xD*/,
    LockQueueBcbLock          = 14 /*0xE*/,
    LockQueueUnusedSpare15    = 15 /*0xF*/,
    LockQueueUnusedSpare16    = 16 /*0x10*/,
    LockQueueMaximumLock      = 17 /*0x11*/
}KSPIN_LOCK_QUEUE_NUMBER, *PKSPIN_LOCK_QUEUE_NUMBER;

typedef enum _KTHREAD_TAG  // 3 elements, 0x4 bytes
{
    KThreadTagNone           = 0 /*0x0*/,
    KThreadTagMediaBuffering = 1 /*0x1*/,
    KThreadTagMax            = 2 /*0x2*/
}KTHREAD_TAG, *PKTHREAD_TAG;

typedef enum _KWAIT_BLOCK_STATE  // 8 elements, 0x4 bytes
{
    WaitBlockBypassStart           = 0 /*0x0*/,
    WaitBlockBypassComplete        = 1 /*0x1*/,
    WaitBlockSuspendBypassStart    = 2 /*0x2*/,
    WaitBlockSuspendBypassComplete = 3 /*0x3*/,
    WaitBlockActive                = 4 /*0x4*/,
    WaitBlockInactive              = 5 /*0x5*/,
    WaitBlockSuspended             = 6 /*0x6*/,
    WaitBlockAllStates             = 7 /*0x7*/
}KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _KWAIT_STATE  // 10 elements, 0x4 bytes
{
    WaitInProgress        = 0 /*0x0*/,
    WaitCommitted         = 1 /*0x1*/,
    WaitAborted           = 2 /*0x2*/,
    WaitSuspendInProgress = 3 /*0x3*/,
    WaitSuspended         = 4 /*0x4*/,
    WaitResumeInProgress  = 5 /*0x5*/,
    WaitResumeAborted     = 6 /*0x6*/,
    WaitFirstSuspendState = 3 /*0x3*/,
    WaitLastSuspendState  = 6 /*0x6*/,
    MaximumWaitState      = 7 /*0x7*/
}KWAIT_STATE, *PKWAIT_STATE;

typedef enum _LDR_DDAG_STATE  // 15 elements, 0x4 bytes
{
    LdrModulesMerged                 = -5 /*0xFB*/,
    LdrModulesInitError              = -4 /*0xFC*/,
    LdrModulesSnapError              = -3 /*0xFD*/,
    LdrModulesUnloaded               = -2 /*0xFE*/,
    LdrModulesUnloading              = -1 /*0xFF*/,
    LdrModulesPlaceHolder            = 0 /*0x0*/,
    LdrModulesMapping                = 1 /*0x1*/,
    LdrModulesMapped                 = 2 /*0x2*/,
    LdrModulesWaitingForDependencies = 3 /*0x3*/,
    LdrModulesSnapping               = 4 /*0x4*/,
    LdrModulesSnapped                = 5 /*0x5*/,
    LdrModulesCondensed              = 6 /*0x6*/,
    LdrModulesReadyToInit            = 7 /*0x7*/,
    LdrModulesInitializing           = 8 /*0x8*/,
    LdrModulesReadyToRun             = 9 /*0x9*/
}LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef enum _LDR_DLL_LOAD_REASON  // 8 elements, 0x4 bytes
{
    LoadReasonStaticDependency           = 0 /*0x0*/,
    LoadReasonStaticForwarderDependency  = 1 /*0x1*/,
    LoadReasonDynamicForwarderDependency = 2 /*0x2*/,
    LoadReasonDelayloadDependency        = 3 /*0x3*/,
    LoadReasonDynamicLoad                = 4 /*0x4*/,
    LoadReasonAsImageLoad                = 5 /*0x5*/,
    LoadReasonAsDataLoad                 = 6 /*0x6*/,
    LoadReasonUnknown                    = -1 /*0xFF*/
}LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef enum _LSA_FOREST_TRUST_RECORD_TYPE  // 4 elements, 0x4 bytes
{
    ForestTrustTopLevelName   = 0 /*0x0*/,
    ForestTrustTopLevelNameEx = 1 /*0x1*/,
    ForestTrustDomainInfo     = 2 /*0x2*/,
    ForestTrustRecordTypeLast = 2 /*0x2*/
}LSA_FOREST_TRUST_RECORD_TYPE, *PLSA_FOREST_TRUST_RECORD_TYPE;

typedef enum _MCA_EXCEPTION_TYPE  // 2 elements, 0x4 bytes
{
    HAL_MCE_RECORD = 0 /*0x0*/,
    HAL_MCA_RECORD = 1 /*0x1*/
}MCA_EXCEPTION_TYPE, *PMCA_EXCEPTION_TYPE;

typedef enum _MEMORY_CACHING_TYPE  // 8 elements, 0x4 bytes
{
    MmNonCached              = 0 /*0x0*/,
    MmCached                 = 1 /*0x1*/,
    MmWriteCombined          = 2 /*0x2*/,
    MmHardwareCoherentCached = 3 /*0x3*/,
    MmNonCachedUnordered     = 4 /*0x4*/,
    MmUSWCCached             = 5 /*0x5*/,
    MmMaximumCacheType       = 6 /*0x6*/,
    MmNotMapped              = -1 /*0xFF*/
}MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG  // 1 elements, 0x4 bytes
{
    MmFrameBufferCached = 2 /*0x2*/
}MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _MM_PAGE_ACCESS_TYPE  // 4 elements, 0x4 bytes
{
    MmPteAccessType         = 0 /*0x0*/,
    MmCcReadAheadType       = 1 /*0x1*/,
    MmPfnRepurposeType      = 2 /*0x2*/,
    MmMaximumPageAccessType = 3 /*0x3*/
}MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _MODE  // 3 elements, 0x4 bytes
{
    KernelMode  = 0 /*0x0*/,
    UserMode    = 1 /*0x1*/,
    MaximumMode = 2 /*0x2*/
}MODE, *PMODE;

typedef enum _NT_PRODUCT_TYPE  // 3 elements, 0x4 bytes
{
    NtProductWinNt    = 1 /*0x1*/,
    NtProductLanManNt = 2 /*0x2*/,
    NtProductServer   = 3 /*0x3*/
}NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _OB_OPEN_REASON  // 5 elements, 0x4 bytes
{
    ObCreateHandle    = 0 /*0x0*/,
    ObOpenHandle      = 1 /*0x1*/,
    ObDuplicateHandle = 2 /*0x2*/,
    ObInheritHandle   = 3 /*0x3*/,
    ObMaxOpenReason   = 4 /*0x4*/
}OB_OPEN_REASON, *POB_OPEN_REASON;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE  // 2 elements, 0x4 bytes
{
    PerfInfoMemUsagePfnMetadata = 0 /*0x0*/,
    PerfInfoMemUsageMax         = 1 /*0x1*/
}PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _PERFINFO_MM_STAT  // 4 elements, 0x4 bytes
{
    PerfInfoMMStatNotUsed              = 0 /*0x0*/,
    PerfInfoMMStatAggregatePageCombine = 1 /*0x1*/,
    PerfInfoMMStatIterationPageCombine = 2 /*0x2*/,
    PerfInfoMMStatMax                  = 3 /*0x3*/
}PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _PF_FILE_ACCESS_TYPE  // 3 elements, 0x4 bytes
{
    PfFileAccessTypeRead  = 0 /*0x0*/,
    PfFileAccessTypeWrite = 1 /*0x1*/,
    PfFileAccessTypeMax   = 2 /*0x2*/
}PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef enum _POOL_TYPE  // 23 elements, 0x4 bytes
{
    NonPagedPool                         = 0 /*0x0*/,
    NonPagedPoolExecute                  = 0 /*0x0*/,
    PagedPool                            = 1 /*0x1*/,
    NonPagedPoolMustSucceed              = 2 /*0x2*/,
    DontUseThisType                      = 3 /*0x3*/,
    NonPagedPoolCacheAligned             = 4 /*0x4*/,
    PagedPoolCacheAligned                = 5 /*0x5*/,
    NonPagedPoolCacheAlignedMustS        = 6 /*0x6*/,
    MaxPoolType                          = 7 /*0x7*/,
    NonPagedPoolBase                     = 0 /*0x0*/,
    NonPagedPoolBaseMustSucceed          = 2 /*0x2*/,
    NonPagedPoolBaseCacheAligned         = 4 /*0x4*/,
    NonPagedPoolBaseCacheAlignedMustS    = 6 /*0x6*/,
    NonPagedPoolSession                  = 32 /*0x20*/,
    PagedPoolSession                     = 33 /*0x21*/,
    NonPagedPoolMustSucceedSession       = 34 /*0x22*/,
    DontUseThisTypeSession               = 35 /*0x23*/,
    NonPagedPoolCacheAlignedSession      = 36 /*0x24*/,
    PagedPoolCacheAlignedSession         = 37 /*0x25*/,
    NonPagedPoolCacheAlignedMustSSession = 38 /*0x26*/,
    NonPagedPoolNx                       = 512 /*0x200*/,
    NonPagedPoolNxCacheAligned           = 516 /*0x204*/,
    NonPagedPoolSessionNx                = 544 /*0x220*/
}POOL_TYPE, *PPOOL_TYPE;

typedef enum _POWER_ACTION  // 9 elements, 0x4 bytes
{
    PowerActionNone          = 0 /*0x0*/,
    PowerActionReserved      = 1 /*0x1*/,
    PowerActionSleep         = 2 /*0x2*/,
    PowerActionHibernate     = 3 /*0x3*/,
    PowerActionShutdown      = 4 /*0x4*/,
    PowerActionShutdownReset = 5 /*0x5*/,
    PowerActionShutdownOff   = 6 /*0x6*/,
    PowerActionWarmEject     = 7 /*0x7*/,
    PowerActionDisplayOff    = 8 /*0x8*/
}POWER_ACTION, *PPOWER_ACTION;

typedef enum _POWER_STATE_TYPE  // 2 elements, 0x4 bytes
{
    SystemPowerState = 0 /*0x0*/,
    DevicePowerState = 1 /*0x1*/
}POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER  // 10 elements, 0x4 bytes
{
    LookasideSmallIrpList      = 0 /*0x0*/,
    LookasideMediumIrpList     = 1 /*0x1*/,
    LookasideLargeIrpList      = 2 /*0x2*/,
    LookasideMdlList           = 3 /*0x3*/,
    LookasideCreateInfoList    = 4 /*0x4*/,
    LookasideNameBufferList    = 5 /*0x5*/,
    LookasideTwilightList      = 6 /*0x6*/,
    LookasideCompletionList    = 7 /*0x7*/,
    LookasideScratchBufferList = 8 /*0x8*/,
    LookasideMaximumList       = 9 /*0x9*/
}PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _PPM_IDLE_BUCKET_TIME_TYPE  // 3 elements, 0x4 bytes
{
    PpmIdleBucketTimeInQpc   = 0 /*0x0*/,
    PpmIdleBucketTimeIn100ns = 1 /*0x1*/,
    PpmIdleBucketTimeMaximum = 2 /*0x2*/
}PPM_IDLE_BUCKET_TIME_TYPE, *PPPM_IDLE_BUCKET_TIME_TYPE;

typedef enum _PROC_HYPERVISOR_STATE  // 4 elements, 0x4 bytes
{
    ProcHypervisorNone       = 0 /*0x0*/,
    ProcHypervisorPresent    = 1 /*0x1*/,
    ProcHypervisorPower      = 2 /*0x2*/,
    ProcHypervisorHvCounters = 3 /*0x3*/
}PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef enum _PROCESS_SECTION_TYPE  // 5 elements, 0x4 bytes
{
    ProcessSectionData           = 0 /*0x0*/,
    ProcessSectionImage          = 1 /*0x1*/,
    ProcessSectionImageNx        = 2 /*0x2*/,
    ProcessSectionPagefileBacked = 3 /*0x3*/,
    ProcessSectionMax            = 4 /*0x4*/
}PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _PROCESS_VA_TYPE  // 4 elements, 0x4 bytes
{
    ProcessVAImage   = 0 /*0x0*/,
    ProcessVASection = 1 /*0x1*/,
    ProcessVAPrivate = 2 /*0x2*/,
    ProcessVAMax     = 3 /*0x3*/
}PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _PROCESSOR_CACHE_TYPE  // 4 elements, 0x4 bytes
{
    CacheUnified     = 0 /*0x0*/,
    CacheInstruction = 1 /*0x1*/,
    CacheData        = 2 /*0x2*/,
    CacheTrace       = 3 /*0x3*/
}PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef enum _PS_PROTECTED_SIGNER  // 8 elements, 0x4 bytes
{
    PsProtectedSignerNone         = 0 /*0x0*/,
    PsProtectedSignerAuthenticode = 1 /*0x1*/,
    PsProtectedSignerCodeGen      = 2 /*0x2*/,
    PsProtectedSignerAntimalware  = 3 /*0x3*/,
    PsProtectedSignerLsa          = 4 /*0x4*/,
    PsProtectedSignerWindows      = 5 /*0x5*/,
    PsProtectedSignerWinTcb       = 6 /*0x6*/,
    PsProtectedSignerMax          = 7 /*0x7*/
}PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef enum _PS_RESOURCE_TYPE  // 5 elements, 0x4 bytes
{
    PsResourceNonPagedPool = 0 /*0x0*/,
    PsResourcePagedPool    = 1 /*0x1*/,
    PsResourcePageFile     = 2 /*0x2*/,
    PsResourceWorkingSet   = 3 /*0x3*/,
    PsResourceMax          = 4 /*0x4*/
}PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef enum _PS_WAKE_REASON  // 6 elements, 0x4 bytes
{
    PsWakeReasonUser              = 0 /*0x0*/,
    PsWakeReasonExecutionRequired = 1 /*0x1*/,
    PsWakeReasonKernel            = 2 /*0x2*/,
    PsWakeReasonInstrumentation   = 3 /*0x3*/,
    PsWakeReasonPreserveProcess   = 4 /*0x4*/,
    PsMaxWakeReasons              = 5 /*0x5*/
}PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef enum _REG_NOTIFY_CLASS  // 61 elements, 0x4 bytes
{
    RegNtDeleteKey                    = 0 /*0x0*/,
    RegNtPreDeleteKey                 = 0 /*0x0*/,
    RegNtSetValueKey                  = 1 /*0x1*/,
    RegNtPreSetValueKey               = 1 /*0x1*/,
    RegNtDeleteValueKey               = 2 /*0x2*/,
    RegNtPreDeleteValueKey            = 2 /*0x2*/,
    RegNtSetInformationKey            = 3 /*0x3*/,
    RegNtPreSetInformationKey         = 3 /*0x3*/,
    RegNtRenameKey                    = 4 /*0x4*/,
    RegNtPreRenameKey                 = 4 /*0x4*/,
    RegNtEnumerateKey                 = 5 /*0x5*/,
    RegNtPreEnumerateKey              = 5 /*0x5*/,
    RegNtEnumerateValueKey            = 6 /*0x6*/,
    RegNtPreEnumerateValueKey         = 6 /*0x6*/,
    RegNtQueryKey                     = 7 /*0x7*/,
    RegNtPreQueryKey                  = 7 /*0x7*/,
    RegNtQueryValueKey                = 8 /*0x8*/,
    RegNtPreQueryValueKey             = 8 /*0x8*/,
    RegNtQueryMultipleValueKey        = 9 /*0x9*/,
    RegNtPreQueryMultipleValueKey     = 9 /*0x9*/,
    RegNtPreCreateKey                 = 10 /*0xA*/,
    RegNtPostCreateKey                = 11 /*0xB*/,
    RegNtPreOpenKey                   = 12 /*0xC*/,
    RegNtPostOpenKey                  = 13 /*0xD*/,
    RegNtKeyHandleClose               = 14 /*0xE*/,
    RegNtPreKeyHandleClose            = 14 /*0xE*/,
    RegNtPostDeleteKey                = 15 /*0xF*/,
    RegNtPostSetValueKey              = 16 /*0x10*/,
    RegNtPostDeleteValueKey           = 17 /*0x11*/,
    RegNtPostSetInformationKey        = 18 /*0x12*/,
    RegNtPostRenameKey                = 19 /*0x13*/,
    RegNtPostEnumerateKey             = 20 /*0x14*/,
    RegNtPostEnumerateValueKey        = 21 /*0x15*/,
    RegNtPostQueryKey                 = 22 /*0x16*/,
    RegNtPostQueryValueKey            = 23 /*0x17*/,
    RegNtPostQueryMultipleValueKey    = 24 /*0x18*/,
    RegNtPostKeyHandleClose           = 25 /*0x19*/,
    RegNtPreCreateKeyEx               = 26 /*0x1A*/,
    RegNtPostCreateKeyEx              = 27 /*0x1B*/,
    RegNtPreOpenKeyEx                 = 28 /*0x1C*/,
    RegNtPostOpenKeyEx                = 29 /*0x1D*/,
    RegNtPreFlushKey                  = 30 /*0x1E*/,
    RegNtPostFlushKey                 = 31 /*0x1F*/,
    RegNtPreLoadKey                   = 32 /*0x20*/,
    RegNtPostLoadKey                  = 33 /*0x21*/,
    RegNtPreUnLoadKey                 = 34 /*0x22*/,
    RegNtPostUnLoadKey                = 35 /*0x23*/,
    RegNtPreQueryKeySecurity          = 36 /*0x24*/,
    RegNtPostQueryKeySecurity         = 37 /*0x25*/,
    RegNtPreSetKeySecurity            = 38 /*0x26*/,
    RegNtPostSetKeySecurity           = 39 /*0x27*/,
    RegNtCallbackObjectContextCleanup = 40 /*0x28*/,
    RegNtPreRestoreKey                = 41 /*0x29*/,
    RegNtPostRestoreKey               = 42 /*0x2A*/,
    RegNtPreSaveKey                   = 43 /*0x2B*/,
    RegNtPostSaveKey                  = 44 /*0x2C*/,
    RegNtPreReplaceKey                = 45 /*0x2D*/,
    RegNtPostReplaceKey               = 46 /*0x2E*/,
    RegNtPreQueryKeyName              = 47 /*0x2F*/,
    RegNtPostQueryKeyName             = 48 /*0x30*/,
    MaxRegNtNotifyClass               = 49 /*0x31*/
}REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _ReplacesCorHdrNumericDefines  // 25 elements, 0x4 bytes
{
    COMIMAGE_FLAGS_ILONLY                      = 1 /*0x1*/,
    COMIMAGE_FLAGS_32BITREQUIRED               = 2 /*0x2*/,
    COMIMAGE_FLAGS_IL_LIBRARY                  = 4 /*0x4*/,
    COMIMAGE_FLAGS_STRONGNAMESIGNED            = 8 /*0x8*/,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT           = 16 /*0x10*/,
    COMIMAGE_FLAGS_TRACKDEBUGDATA              = 65536 /*0x10000*/,
    COMIMAGE_FLAGS_32BITPREFERRED              = 131072 /*0x20000*/,
    COR_VERSION_MAJOR_V2                       = 2 /*0x2*/,
    COR_VERSION_MAJOR                          = 2 /*0x2*/,
    COR_VERSION_MINOR                          = 5 /*0x5*/,
    COR_DELETED_NAME_LENGTH                    = 8 /*0x8*/,
    COR_VTABLEGAP_NAME_LENGTH                  = 8 /*0x8*/,
    NATIVE_TYPE_MAX_CB                         = 1 /*0x1*/,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE       = 255 /*0xFF*/,
    IMAGE_COR_MIH_METHODRVA                    = 1 /*0x1*/,
    IMAGE_COR_MIH_EHRVA                        = 2 /*0x2*/,
    IMAGE_COR_MIH_BASICBLOCK                   = 8 /*0x8*/,
    COR_VTABLE_32BIT                           = 1 /*0x1*/,
    COR_VTABLE_64BIT                           = 2 /*0x2*/,
    COR_VTABLE_FROM_UNMANAGED                  = 4 /*0x4*/,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8 /*0x8*/,
    COR_VTABLE_CALL_MOST_DERIVED               = 16 /*0x10*/,
    IMAGE_COR_EATJ_THUNK_SIZE                  = 32 /*0x20*/,
    MAX_CLASS_NAME                             = 1024 /*0x400*/,
    MAX_PACKAGE_NAME                           = 1024 /*0x400*/
}ReplacesCorHdrNumericDefines, *PReplacesCorHdrNumericDefines;

typedef enum _RTL_GENERIC_COMPARE_RESULTS  // 3 elements, 0x4 bytes
{
    GenericLessThan    = 0 /*0x0*/,
    GenericGreaterThan = 1 /*0x1*/,
    GenericEqual       = 2 /*0x2*/
}RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef enum _SE_WS_APPX_SIGNATURE_ORIGIN  // 5 elements, 0x4 bytes
{
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0 /*0x0*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN       = 1 /*0x1*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE      = 2 /*0x2*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS       = 3 /*0x3*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE    = 4 /*0x4*/
}SE_WS_APPX_SIGNATURE_ORIGIN, *PSE_WS_APPX_SIGNATURE_ORIGIN;

typedef enum _SECURITY_IMPERSONATION_LEVEL  // 4 elements, 0x4 bytes
{
    SecurityAnonymous      = 0 /*0x0*/,
    SecurityIdentification = 1 /*0x1*/,
    SecurityImpersonation  = 2 /*0x2*/,
    SecurityDelegation     = 3 /*0x3*/
}SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_OPERATION_CODE  // 4 elements, 0x4 bytes
{
    SetSecurityDescriptor    = 0 /*0x0*/,
    QuerySecurityDescriptor  = 1 /*0x1*/,
    DeleteSecurityDescriptor = 2 /*0x2*/,
    AssignSecurityDescriptor = 3 /*0x3*/
}SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef enum _SYSTEM_POWER_STATE  // 8 elements, 0x4 bytes
{
    PowerSystemUnspecified = 0 /*0x0*/,
    PowerSystemWorking     = 1 /*0x1*/,
    PowerSystemSleeping1   = 2 /*0x2*/,
    PowerSystemSleeping2   = 3 /*0x3*/,
    PowerSystemSleeping3   = 4 /*0x4*/,
    PowerSystemHibernate   = 5 /*0x5*/,
    PowerSystemShutdown    = 6 /*0x6*/,
    PowerSystemMaximum     = 7 /*0x7*/
}SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _TP_CALLBACK_PRIORITY  // 5 elements, 0x4 bytes
{
    TP_CALLBACK_PRIORITY_HIGH    = 0 /*0x0*/,
    TP_CALLBACK_PRIORITY_NORMAL  = 1 /*0x1*/,
    TP_CALLBACK_PRIORITY_LOW     = 2 /*0x2*/,
    TP_CALLBACK_PRIORITY_INVALID = 3 /*0x3*/,
    TP_CALLBACK_PRIORITY_COUNT   = 3 /*0x3*/
}TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _TRACE_INFORMATION_CLASS  // 18 elements, 0x4 bytes
{
    TraceIdClass                   = 0 /*0x0*/,
    TraceHandleClass               = 1 /*0x1*/,
    TraceEnableFlagsClass          = 2 /*0x2*/,
    TraceEnableLevelClass          = 3 /*0x3*/,
    GlobalLoggerHandleClass        = 4 /*0x4*/,
    EventLoggerHandleClass         = 5 /*0x5*/,
    AllLoggerHandlesClass          = 6 /*0x6*/,
    TraceHandleByNameClass         = 7 /*0x7*/,
    LoggerEventsLostClass          = 8 /*0x8*/,
    TraceSessionSettingsClass      = 9 /*0x9*/,
    LoggerEventsLoggedClass        = 10 /*0xA*/,
    DiskIoNotifyRoutinesClass      = 11 /*0xB*/,
    TraceInformationClassReserved1 = 12 /*0xC*/,
    AllPossibleNotifyRoutinesClass = 12 /*0xC*/,
    FltIoNotifyRoutinesClass       = 13 /*0xD*/,
    TraceInformationClassReserved2 = 14 /*0xE*/,
    WdfNotifyRoutinesClass         = 15 /*0xF*/,
    MaxTraceInformationClass       = 16 /*0x10*/
}TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef enum _USER_ACTIVITY_PRESENCE  // 5 elements, 0x4 bytes
{
    PowerUserPresent    = 0 /*0x0*/,
    PowerUserNotPresent = 1 /*0x1*/,
    PowerUserInactive   = 2 /*0x2*/,
    PowerUserMaximum    = 3 /*0x3*/,
    PowerUserInvalid    = 3 /*0x3*/
}USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT  // 9 elements, 0x4 bytes
{
    WheaDataFormatIPFSalRecord = 0 /*0x0*/,
    WheaDataFormatXPFMCA       = 1 /*0x1*/,
    WheaDataFormatMemory       = 2 /*0x2*/,
    WheaDataFormatPCIExpress   = 3 /*0x3*/,
    WheaDataFormatNMIPort      = 4 /*0x4*/,
    WheaDataFormatPCIXBus      = 5 /*0x5*/,
    WheaDataFormatPCIXDevice   = 6 /*0x6*/,
    WheaDataFormatGeneric      = 7 /*0x7*/,
    WheaDataFormatMax          = 8 /*0x8*/
}WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _WHEA_ERROR_SEVERITY  // 4 elements, 0x4 bytes
{
    WheaErrSevRecoverable   = 0 /*0x0*/,
    WheaErrSevFatal         = 1 /*0x1*/,
    WheaErrSevCorrected     = 2 /*0x2*/,
    WheaErrSevInformational = 3 /*0x3*/
}WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef enum _WHEA_ERROR_SOURCE_TYPE  // 13 elements, 0x4 bytes
{
    WheaErrSrcTypeMCE        = 0 /*0x0*/,
    WheaErrSrcTypeCMC        = 1 /*0x1*/,
    WheaErrSrcTypeCPE        = 2 /*0x2*/,
    WheaErrSrcTypeNMI        = 3 /*0x3*/,
    WheaErrSrcTypePCIe       = 4 /*0x4*/,
    WheaErrSrcTypeGeneric    = 5 /*0x5*/,
    WheaErrSrcTypeINIT       = 6 /*0x6*/,
    WheaErrSrcTypeBOOT       = 7 /*0x7*/,
    WheaErrSrcTypeSCIGeneric = 8 /*0x8*/,
    WheaErrSrcTypeIPFMCA     = 9 /*0x9*/,
    WheaErrSrcTypeIPFCMC     = 10 /*0xA*/,
    WheaErrSrcTypeIPFCPE     = 11 /*0xB*/,
    WheaErrSrcTypeMax        = 12 /*0xC*/
}WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_TYPE  // 7 elements, 0x4 bytes
{
    WheaErrTypeProcessor  = 0 /*0x0*/,
    WheaErrTypeMemory     = 1 /*0x1*/,
    WheaErrTypePCIExpress = 2 /*0x2*/,
    WheaErrTypeNMI        = 3 /*0x3*/,
    WheaErrTypePCIXBus    = 4 /*0x4*/,
    WheaErrTypePCIXDevice = 5 /*0x5*/,
    WheaErrTypeGeneric    = 6 /*0x6*/
}WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef enum _WORKING_SET_TYPE  // 7 elements, 0x4 bytes
{
    WorkingSetTypeUser        = 0 /*0x0*/,
    WorkingSetTypeSession     = 1 /*0x1*/,
    WorkingSetTypeSystemTypes = 2 /*0x2*/,
    WorkingSetTypeSystemCache = 2 /*0x2*/,
    WorkingSetTypePagedPool   = 3 /*0x3*/,
    WorkingSetTypeSystemPtes  = 4 /*0x4*/,
    WorkingSetTypeMaximum     = 5 /*0x5*/
}WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef enum _WOW64_SHARED_INFORMATION  // 9 elements, 0x4 bytes
{
    SharedNtdll32LdrInitializeThunk                  = 0 /*0x0*/,
    SharedNtdll32KiUserExceptionDispatcher           = 1 /*0x1*/,
    SharedNtdll32KiUserApcDispatcher                 = 2 /*0x2*/,
    SharedNtdll32KiUserCallbackDispatcher            = 3 /*0x3*/,
    SharedNtdll32RtlUserThreadStart                  = 4 /*0x4*/,
    SharedNtdll32pQueryProcessDebugInformationRemote = 5 /*0x5*/,
    SharedNtdll32BaseAddress                         = 6 /*0x6*/,
    SharedNtdll32LdrSystemDllInitBlock               = 7 /*0x7*/,
    Wow64SharedPageEntriesCount                      = 8 /*0x8*/
}WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Information about structure types

typedef struct _ACCESS_REASONS;
typedef struct _ACCESS_STATE;
typedef struct _ACL;
typedef struct _ACTIVATION_CONTEXT;
typedef struct _ACTIVATION_CONTEXT_DATA;
typedef struct _ACTIVATION_CONTEXT_STACK;
typedef struct _ALPC_PROCESS_CONTEXT;
typedef struct _ASSEMBLY_STORAGE_MAP;
typedef struct _AUX_ACCESS_DATA;
typedef struct _BATTERY_REPORTING_SCALE;
typedef struct _CACHE_DESCRIPTOR;
typedef struct _CLIENT_ID;
typedef struct _CLIENT_ID32;
typedef struct _CLIENT_ID64;
typedef struct _CM_FULL_RESOURCE_DESCRIPTOR;
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
typedef struct _CM_PARTIAL_RESOURCE_LIST;
typedef struct _CM_RESOURCE_LIST;
typedef struct _COMPRESSED_DATA_INFO;
typedef struct _CONTEXT;
typedef struct _COUNTER_READING;
typedef union _CPU_INFO;
typedef struct _CURDIR;
typedef struct _DESCRIPTOR;
typedef struct _DEVICE_CAPABILITIES;
typedef struct _DEVICE_OBJECT;
typedef struct _DEVICE_OBJECT_POWER_EXTENSION;
typedef struct _DEVOBJ_EXTENSION;
typedef struct _DISPATCHER_HEADER;
typedef struct _DPH_BLOCK_INFORMATION;
typedef struct _DPH_HEAP_BLOCK;
typedef struct _DPH_HEAP_ROOT;
typedef struct _DRIVER_EXTENSION;
typedef struct _DRIVER_OBJECT;
typedef struct _ECP_LIST;
typedef struct _EJOB;
typedef struct _ENODE;
typedef struct _EPROCESS;
typedef struct _EPROCESS_QUOTA_BLOCK;
typedef struct _EPROCESS_VALUES;
typedef struct _ERESOURCE;
typedef struct _ETHREAD;
typedef struct _ETW_BUFFER_CONTEXT;
typedef struct _EVENT_DATA_DESCRIPTOR;
typedef struct _EVENT_DESCRIPTOR;
typedef struct _EVENT_HEADER;
typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
typedef struct _EVENT_RECORD;
typedef struct _EX_FAST_REF;
typedef struct _EX_PUSH_LOCK;
typedef struct _EX_RUNDOWN_REF;
typedef struct _EX_WORK_QUEUE;
typedef struct _EXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD;
typedef struct _EXCEPTION_REGISTRATION_RECORD;
typedef struct _EXHANDLE;
typedef struct _EXT_DELETE_PARAMETERS;
typedef struct _EXT_SET_PARAMETERS_V0;
typedef struct _FAST_IO_DISPATCH;
typedef struct _FAST_MUTEX;
typedef struct _FILE_BASIC_INFORMATION;
typedef struct _FILE_GET_QUOTA_INFORMATION;
typedef struct _FILE_NETWORK_OPEN_INFORMATION;
typedef struct _FILE_OBJECT;
typedef struct _FILE_STANDARD_INFORMATION;
typedef struct _FILESYSTEM_DISK_COUNTERS;
typedef struct _flags;
typedef struct _FLOATING_SAVE_AREA;
typedef struct _FLS_CALLBACK_INFO;
typedef struct _FS_FILTER_CALLBACK_DATA;
typedef struct _FS_FILTER_CALLBACKS;
typedef union _FS_FILTER_PARAMETERS;
typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT;
typedef struct _GDI_TEB_BATCH;
typedef struct _GDI_TEB_BATCH32;
typedef struct _GDI_TEB_BATCH64;
typedef struct _GENERAL_LOOKASIDE;
typedef struct _GENERAL_LOOKASIDE_POOL;
typedef struct _GENERIC_MAPPING;
typedef struct _GROUP_AFFINITY;
typedef struct _GUID;
typedef struct _HANDLE_TABLE;
typedef union _HANDLE_TABLE_ENTRY;
typedef struct _HANDLE_TABLE_ENTRY_INFO;
typedef struct _HANDLE_TABLE_FREE_LIST;
typedef struct _HANDLE_TRACE_DB_ENTRY;
typedef struct _HANDLE_TRACE_DEBUG_INFO;
typedef struct _HEAP;
typedef struct _HEAP_BUCKET;
typedef union _HEAP_BUCKET_COUNTERS;
typedef union _HEAP_BUCKET_RUN_INFO;
typedef struct _HEAP_COUNTERS;
typedef struct _HEAP_DESCRIPTOR_KEY;
typedef struct _HEAP_ENTRY;
typedef struct _HEAP_ENTRY_EXTRA;
typedef struct _HEAP_EXTENDED_ENTRY;
typedef struct _HEAP_FAILURE_INFORMATION;
typedef struct _HEAP_FREE_ENTRY;
typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS;
typedef struct _HEAP_LARGE_ALLOC_DATA;
typedef struct _HEAP_LFH_AFFINITY_SLOT;
typedef struct _HEAP_LFH_BUCKET;
typedef struct _HEAP_LFH_CONTEXT;
typedef struct _HEAP_LFH_MEM_POLICIES;
typedef union _HEAP_LFH_ONDEMAND_POINTER;
typedef struct _HEAP_LFH_SUBSEGMENT;
typedef struct _HEAP_LFH_SUBSEGMENT_CACHE;
typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE;
typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
typedef struct _HEAP_LFH_SUBSEGMENT_OWNER;
typedef struct _HEAP_LFH_UNUSED_BYTES_INFO;
typedef struct _HEAP_LIST_LOOKUP;
typedef struct _HEAP_LOCAL_DATA;
typedef struct _HEAP_LOCAL_SEGMENT_INFO;
typedef struct _HEAP_LOCK;
typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR;
typedef struct _HEAP_PAGE_SEGMENT;
typedef struct _HEAP_PSEUDO_TAG_ENTRY;
typedef struct _HEAP_SEGMENT;
typedef struct _HEAP_SUBALLOCATOR_CALLBACKS;
typedef struct _HEAP_SUBSEGMENT;
typedef struct _HEAP_TAG_ENTRY;
typedef struct _HEAP_TUNING_PARAMETERS;
typedef struct _HEAP_UCR_DESCRIPTOR;
typedef struct _HEAP_UNPACKED_ENTRY;
typedef struct _HEAP_USERDATA_HEADER;
typedef struct _HEAP_USERDATA_OFFSETS;
typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY;
typedef struct _HEAP_VS_CHUNK_FREE_HEADER;
typedef struct _HEAP_VS_CHUNK_HEADER;
typedef union _HEAP_VS_CHUNK_HEADER_SIZE;
typedef struct _HEAP_VS_CONTEXT;
typedef struct _HEAP_VS_SUBSEGMENT;
typedef struct _HEAP_VS_UNUSED_BYTES_INFO;
typedef struct _IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_DOS_HEADER;
typedef struct _IMAGE_FILE_HEADER;
typedef struct _IMAGE_NT_HEADERS;
typedef struct _IMAGE_OPTIONAL_HEADER;
typedef struct _INITIAL_PRIVILEGE_SET;
typedef struct _INTERFACE;
typedef struct _INTERLOCK_SEQ;
typedef struct _INTERRUPT_CONNECTION_DATA;
typedef struct _INTERRUPT_HT_INTR_INFO;
typedef struct _INTERRUPT_REMAPPING_INFO;
typedef struct _INTERRUPT_VECTOR_DATA;
typedef struct _IO_CLIENT_EXTENSION;
typedef struct _IO_COMPLETION_CONTEXT;
typedef struct _IO_DRIVER_CREATE_CONTEXT;
typedef struct _IO_MINI_COMPLETION_PACKET_USER;
typedef struct _IO_PRIORITY_INFO;
typedef struct _IO_RESOURCE_DESCRIPTOR;
typedef struct _IO_RESOURCE_LIST;
typedef struct _IO_RESOURCE_REQUIREMENTS_LIST;
typedef struct _IO_SECURITY_CONTEXT;
typedef struct _IO_STACK_LOCATION;
typedef struct _IO_STATUS_BLOCK;
typedef struct _IO_TIMER;
typedef struct _IOP_IRP_STACK_PROFILER;
typedef struct _IRP;
typedef struct _ISRDPCSTATS;
typedef struct _JOB_ACCESS_STATE;
typedef struct _JOB_CPU_RATE_CONTROL;
typedef struct _JOB_IO_RATE_CONTROL;
typedef struct _JOB_NET_RATE_CONTROL;
typedef struct _JOB_NOTIFICATION_INFORMATION;
typedef struct _JOBOBJECT_WAKE_FILTER;
typedef struct _KAFFINITY_EX;
typedef struct _KAPC;
typedef struct _KAPC_STATE;
typedef struct _KDEVICE_QUEUE;
typedef struct _KDEVICE_QUEUE_ENTRY;
typedef struct _KDPC;
typedef struct _KDPC_DATA;
typedef struct _KDPC_LIST;
typedef struct _KENTROPY_TIMING_STATE;
typedef struct _KERNEL_STACK_SEGMENT;
typedef struct _KEVENT;
typedef union _KEXECUTE_OPTIONS;
typedef struct _KGATE;
typedef struct _KGDTENTRY;
typedef struct _KHETERO_PROCESSOR_SET;
typedef struct _KIDTENTRY;
typedef struct _KiIoAccessMap;
typedef struct _KINTERRUPT;
typedef struct _KLOCK_ENTRY;
typedef struct _KLOCK_ENTRY_LOCK_STATE;
typedef struct _KNODE;
typedef struct _KPCR;
typedef struct _KPRCB;
typedef struct _KPRIQUEUE;
typedef struct _KPROCESS;
typedef struct _KPROCESSOR_STATE;
typedef struct _KQUEUE;
typedef struct _KREQUEST_PACKET;
typedef struct _KSCB;
typedef struct _KSCHEDULING_GROUP;
typedef struct _KSCHEDULING_GROUP_POLICY;
typedef struct _KSEMAPHORE;
typedef struct _KSHARED_READY_QUEUE;
typedef struct _KSPECIAL_REGISTERS;
typedef struct _KSPIN_LOCK_QUEUE;
typedef struct _KSTACK_CONTROL;
typedef union _KSTACK_COUNT;
typedef struct _KSYSTEM_TIME;
typedef struct _KTHREAD;
typedef struct _KTHREAD_COUNTERS;
typedef struct _KTIMER;
typedef struct _KTIMER_EXPIRATION_TRACE;
typedef struct _KTIMER_TABLE;
typedef struct _KTIMER_TABLE_ENTRY;
typedef struct _KTRAP_FRAME;
typedef struct _KTSS;
typedef struct _KUSER_SHARED_DATA;
typedef struct _KWAIT_BLOCK;
typedef struct _KWAIT_CHAIN;
typedef union _KWAIT_STATUS_REGISTER;
typedef union _LARGE_INTEGER;
typedef struct _LDR_DATA_TABLE_ENTRY;
typedef struct _LDR_DDAG_NODE;
typedef struct _LDR_SERVICE_TAG_RECORD;
typedef struct _LDRP_CSLIST;
typedef struct _LDRP_LOAD_CONTEXT;
typedef struct _LFH_BLOCK_ZONE;
typedef struct _LFH_HEAP;
typedef union _LFH_RANDOM_DATA;
typedef struct _LIST_ENTRY;
typedef struct _LIST_ENTRY32;
typedef struct _LIST_ENTRY64;
typedef struct _LOOKASIDE_LIST_EX;
typedef struct _LUID;
typedef struct _LUID_AND_ATTRIBUTES;
typedef struct _M128A;
typedef struct _MAILSLOT_CREATE_PARAMETERS;
typedef struct _MCA_EXCEPTION;
typedef union _MCI_ADDR;
typedef union _MCI_STATS;
typedef struct _MDL;
typedef struct _MM_DRIVER_VERIFIER_DATA;
typedef struct _MM_PAGE_ACCESS_INFO;
typedef union _MM_PAGE_ACCESS_INFO_FLAGS;
typedef struct _MM_PAGE_ACCESS_INFO_HEADER;
typedef struct _MMSUPPORT;
typedef struct _MMSUPPORT_FLAGS;
typedef struct _MMWSL;
typedef struct _NAMED_PIPE_CREATE_PARAMETERS;
typedef struct _NPAGED_LOOKASIDE_LIST;
typedef struct _NT_TIB;
typedef struct _NT_TIB32;
typedef struct _NT_TIB64;
typedef struct _OBJECT_DUMP_CONTROL;
typedef struct _OBJECT_HANDLE_INFORMATION;
typedef struct _OBJECT_NAME_INFORMATION;
typedef struct _OBJECT_TYPE;
typedef struct _OBJECT_TYPE_INITIALIZER;
typedef struct _OWNER_ENTRY;
typedef struct _PAGED_LOOKASIDE_LIST;
typedef struct _PAGEFAULT_HISTORY;
typedef struct _PEB;
typedef struct _PEB_LDR_DATA;
typedef struct _PEB32;
typedef struct _PEBS_DS_SAVE_AREA;
typedef struct _PERFINFO_GROUPMASK;
typedef struct _PERFINFO_PPM_STATE_SELECTION;
typedef struct _PF_KERNEL_GLOBALS;
typedef struct _PO_DIAG_STACK_RECORD;
typedef struct _POWER_SEQUENCE;
typedef union _POWER_STATE;
typedef struct _PP_LOOKASIDE_LIST;
typedef struct _PPM_CONCURRENCY_ACCOUNTING;
typedef struct _PPM_COORDINATED_SELECTION;
typedef struct _PPM_FFH_THROTTLE_STATE_INFO;
typedef struct _PPM_IDLE_STATE;
typedef struct _PPM_IDLE_STATES;
typedef union _PPM_IDLE_SYNCHRONIZATION_STATE;
typedef struct _PPM_SELECTION_DEPENDENCY;
typedef struct _PPM_SELECTION_MENU;
typedef struct _PPM_SELECTION_MENU_ENTRY;
typedef struct _PPM_SELECTION_STATISTICS;
typedef struct _PPM_VETO_ACCOUNTING;
typedef struct _PPM_VETO_ENTRY;
typedef struct _PRIVILEGE_SET;
typedef struct _PROC_FEEDBACK;
typedef struct _PROC_FEEDBACK_COUNTER;
typedef struct _PROC_IDLE_ACCOUNTING;
typedef struct _PROC_IDLE_POLICY;
typedef struct _PROC_IDLE_SNAP;
typedef struct _PROC_IDLE_STATE_ACCOUNTING;
typedef struct _PROC_IDLE_STATE_BUCKET;
typedef struct _PROC_PERF_CHECK;
typedef struct _PROC_PERF_CHECK_SNAP;
typedef struct _PROC_PERF_CONSTRAINT;
typedef struct _PROC_PERF_DOMAIN;
typedef struct _PROC_PERF_HISTORY;
typedef struct _PROC_PERF_HISTORY_ENTRY;
typedef struct _PROC_PERF_LOAD;
typedef struct _PROCESS_DISK_COUNTERS;
typedef struct _PROCESS_ENERGY_VALUES;
typedef struct _PROCESSOR_IDLE_CONSTRAINTS;
typedef struct _PROCESSOR_IDLE_DEPENDENCY;
typedef struct _PROCESSOR_IDLE_PREPARE_INFO;
typedef struct _PROCESSOR_NUMBER;
typedef struct _PROCESSOR_POWER_STATE;
typedef struct _PROCESSOR_PROFILE_CONTROL_AREA;
typedef union _PS_CLIENT_SECURITY_CONTEXT;
typedef struct _PS_PROPERTY_SET;
typedef struct _PS_PROTECTION;
typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA;
typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
typedef struct _PS_TRUSTLET_TKSESSION_ID;
typedef struct _PS_WAKE_INFORMATION;
typedef struct _QUAD;
typedef struct _REQUEST_MAILBOX;
typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef struct _RTL_AVL_TABLE;
typedef struct _RTL_AVL_TREE;
typedef struct _RTL_BALANCED_LINKS;
typedef struct _RTL_BALANCED_NODE;
typedef struct _RTL_BITMAP;
typedef struct _RTL_CRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_DRIVE_LETTER_CURDIR;
typedef struct _RTL_DYNAMIC_HASH_TABLE;
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _RTL_HEAP_WALK_ENTRY;
typedef struct _RTL_RB_TREE;
typedef struct _RTL_SPARSE_BITMAP_CTX;
typedef struct _RTL_SPARSE_BITMAP_RANGE;
typedef struct _RTL_SPLAY_LINKS;
typedef struct _RTL_SRWLOCK;
typedef struct _RTL_STACK_DATABASE_LOCK;
typedef struct _RTL_STACK_TRACE_ENTRY;
typedef struct _RTL_STD_LIST_ENTRY;
typedef struct _RTL_STD_LIST_HEAD;
typedef struct _RTL_TRACE_BLOCK;
typedef struct _RTL_TRACE_DATABASE;
typedef struct _RTL_TRACE_SEGMENT;
typedef struct _RTL_USER_PROCESS_PARAMETERS;
typedef struct _SCSI_REQUEST_BLOCK;
typedef struct _SE_AUDIT_PROCESS_CREATION_INFO;
typedef struct _SECTION_OBJECT_POINTERS;
typedef struct _SECURITY_DESCRIPTOR;
typedef struct _SECURITY_QUALITY_OF_SERVICE;
typedef struct _SECURITY_SUBJECT_CONTEXT;
typedef struct _SEGMENT_HEAP;
typedef struct _SEGMENT_HEAP_EXTRA;
typedef struct _SID;
typedef struct _SID_IDENTIFIER_AUTHORITY;
typedef struct _SILO_CONTEXT;
typedef struct _SINGLE_LIST_ENTRY;
typedef union _SLIST_HEADER;
typedef struct _STACK_TRACE_DATABASE;
typedef struct _STRING;
typedef struct _STRING32;
typedef struct _STRING64;
typedef struct _SYNCH_COUNTERS;
typedef struct _SYSTEM_POWER_CAPABILITIES;
typedef struct _SYSTEM_POWER_STATE_CONTEXT;
typedef struct _TEB;
typedef struct _TEB_ACTIVE_FRAME;
typedef struct _TEB_ACTIVE_FRAME_CONTEXT;
typedef struct _TEB32;
typedef struct _TEB64;
typedef struct _TERMINATION_PORT;
typedef struct _THREAD_ENERGY_VALUES;
typedef struct _THREAD_PERFORMANCE_DATA;
typedef struct _TP_CALLBACK_ENVIRON_V3;
typedef struct _TP_CALLBACK_INSTANCE;
typedef struct _TP_CLEANUP_GROUP;
typedef struct _TP_POOL;
typedef struct _TRUSTLET_COLLABORATION_ID;
typedef struct _TRUSTLET_MAILBOX_KEY;
typedef struct _TXN_PARAMETER_BLOCK;
typedef union _ULARGE_INTEGER;
typedef struct _UNICODE_STRING;
typedef struct _USER_MEMORY_CACHE_ENTRY;
typedef struct _VPB;
typedef struct _WAIT_CONTEXT_BLOCK;
typedef union _WHEA_ERROR_PACKET_FLAGS;
typedef struct _WHEA_ERROR_PACKET_V2;
typedef struct _WHEA_ERROR_RECORD;
typedef struct _WHEA_ERROR_RECORD_HEADER;
typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS;
typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
typedef union _WHEA_PERSISTENCE_INFO;
typedef union _WHEA_REVISION;
typedef union _WHEA_TIMESTAMP;
typedef struct _WNF_STATE_NAME;
typedef struct _WORK_QUEUE_ITEM;
typedef struct _XSAVE_AREA;
typedef struct _XSAVE_AREA_HEADER;
typedef struct _XSAVE_FORMAT;
typedef struct _XSTATE_CONFIGURATION;
typedef struct _XSTATE_CONTEXT;
typedef struct _XSTATE_FEATURE;
typedef struct _XSTATE_SAVE;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Function types

typedef VOID (NEAR STDCALL FUNCT_00C6_00C5_CleanupGroupCancelCallback_DeRefSecurityDescriptor) (VOID*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_00CD_FinalizationCallback) (struct _TP_CALLBACK_INSTANCE*, VOID*);
typedef enum _EXCEPTION_DISPOSITION (NEAR STDCALL FUNCT_015F_015E_Handler) (struct _EXCEPTION_RECORD*, VOID*, struct _CONTEXT*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_025D_PostProcessInitRoutine_DispatchAddress) ();
typedef VOID (NEAR STDCALL FUNCT_00C6_055C_DeferredRoutine) (struct _KDPC*, VOID*, VOID*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_068E_NormalRoutine) (VOID*, VOID*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0685_KernelRoutine) (struct _KAPC*, FUNCT_00C6_068E_NormalRoutine**, VOID**, VOID**, VOID**);
typedef VOID (NEAR STDCALL FUNCT_00C6_068E_NormalRoutine) (VOID*, VOID*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0693_RundownRoutine) (struct _KAPC*);
typedef VOID* (NEAR STDCALL FUNCT_00C9_0747_AllocateEx) (enum _POOL_TYPE, ULONG32, ULONG32, struct _LOOKASIDE_LIST_EX*);
typedef VOID* (NEAR STDCALL FUNCT_00C9_0751_Allocate) (enum _POOL_TYPE, ULONG32, ULONG32);
typedef VOID (NEAR STDCALL FUNCT_00C6_0756_FreeEx) (VOID*, struct _LOOKASIDE_LIST_EX*);
typedef VOID (NEAR STDCALL FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine) (VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0760_WorkerRoutine) (VOID*, VOID*, VOID*, VOID*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_07D2_IdlePrepare) (struct _PROCESSOR_IDLE_PREPARE_INFO*);
typedef LONG32 (NEAR FASTCALL FUNCT_0076_07F2_IdlePreExecute_IdleExecute) (VOID*, ULONG32, ULONG32, ULONG32, ULONG32*);
typedef ULONG32 (NEAR FASTCALL FUNCT_0009_07FA_IdlePreselect) (VOID*, struct _PROCESSOR_IDLE_CONSTRAINTS*);
typedef ULONG32 (NEAR FASTCALL FUNCT_0009_07FF_IdleTest) (VOID*, ULONG32, ULONG32);
typedef ULONG32 (NEAR FASTCALL FUNCT_0009_0804_IdleAvailabilityCheck) (VOID*, ULONG32);
typedef VOID (NEAR FASTCALL FUNCT_00C6_0808_IdleComplete) (VOID*, ULONG32, ULONG32, ULONG32, ULONG32*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_080A_IdleCancel) (VOID*, ULONG32);
typedef UINT8 (NEAR FASTCALL FUNCT_007F_080C_IdleIsHalted_IdleInitiateWake) (VOID*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_08A2_InstantaneousRead) (ULONG32, ULONG32*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_08A6_DifferentialRead) (ULONG32, UINT8, UINT64*, UINT64*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_090D_GetFFHThrottleState) (UINT64*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler) (ULONG32, ULONG32);
typedef VOID (NEAR FASTCALL FUNCT_00C6_0914_ReinitializeHandler) (ULONG32);
typedef ULONG32 (NEAR FASTCALL FUNCT_0009_0917_PerfSelectionHandler) (ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32*, UINT64*);
typedef VOID (NEAR FASTCALL FUNCT_00C6_0920_PerfControlHandler) (ULONG32, UINT64, ULONG32, ULONG32, ULONG32, UINT8, UINT8, UINT8);
typedef UINT8 (NEAR STDCALL FUNCT_007F_09CB_ServiceRoutine) (struct _KINTERRUPT*, VOID*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_09CF_MessageServiceRoutine) (struct _KINTERRUPT*, VOID*, ULONG32);
typedef LONG32 (NEAR STDCALL FUNCT_0076_0BE3_AddDevice) (struct _DRIVER_OBJECT*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter) (struct _FS_FILTER_CALLBACK_DATA*, VOID**);
typedef VOID (NEAR STDCALL FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter) (struct _FS_FILTER_CALLBACK_DATA*, LONG32, VOID*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0CA1_FastIoCheckIfPossible) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, UINT8, ULONG32, UINT8, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0CAC_FastIoRead_FastIoWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, UINT8, ULONG32, VOID*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0CB6_FastIoQueryBasicInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_BASIC_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0CC4_FastIoQueryStandardInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_STANDARD_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0CD2_FastIoLock) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, union _LARGE_INTEGER*, struct _EPROCESS*, ULONG32, UINT8, UINT8, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0E4D_MiniPacketCallback) (struct _IO_MINI_COMPLETION_PACKET_USER*, VOID*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F01_FastIoUnlockSingle) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, union _LARGE_INTEGER*, struct _EPROCESS*, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F0A_FastIoUnlockAll) (struct _FILE_OBJECT*, struct _EPROCESS*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F10_FastIoUnlockAllByKey) (struct _FILE_OBJECT*, VOID*, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F17_FastIoDeviceControl) (struct _FILE_OBJECT*, UINT8, VOID*, ULONG32, VOID*, ULONG32, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0F22_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection) (struct _FILE_OBJECT*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0F25_FastIoDetachDevice) (struct _DEVICE_OBJECT*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F29_FastIoQueryNetworkOpenInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_NETWORK_OPEN_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_0F39_AcquireForModWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, struct _ERESOURCE**, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F3F_MdlRead_PrepareMdlWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, ULONG32, struct _MDL**, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F53_MdlReadComplete_MdlReadCompleteCompressed) (struct _FILE_OBJECT*, struct _MDL*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F58_MdlWriteComplete_MdlWriteCompleteCompressed) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, struct _MDL*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F5E_FastIoReadCompressed_FastIoWriteCompressed) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, ULONG32, VOID*, struct _MDL**, struct _IO_STATUS_BLOCK*, struct _COMPRESSED_DATA_INFO*, ULONG32, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR STDCALL FUNCT_007F_0F73_FastIoQueryOpen) (struct _IRP*, struct _FILE_NETWORK_OPEN_INFORMATION*, struct _DEVICE_OBJECT*);
typedef VOID (NEAR STDCALL FUNCT_00C6_0F9A_UserApcRoutine) (VOID*, struct _IO_STATUS_BLOCK*, ULONG32);
typedef VOID (NEAR STDCALL FUNCT_00C6_0F9F_DriverStartIo_CancelRoutine) (struct _DEVICE_OBJECT*, struct _IRP*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_1248_CompletionRoutine) (struct _DEVICE_OBJECT*, struct _IRP*, VOID*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_124D_ReleaseForModWrite) (struct _FILE_OBJECT*, struct _ERESOURCE*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_1252_AcquireForCcFlush_ReleaseForCcFlush) (struct _FILE_OBJECT*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_1256_DriverInit) (struct _DRIVER_OBJECT*, struct _UNICODE_STRING*);
typedef VOID (NEAR STDCALL FUNCT_00C6_125A_DriverUnload) (struct _DRIVER_OBJECT*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_125E_MajorFunction) (struct _DEVICE_OBJECT*, struct _IRP*);
typedef VOID (NEAR STDCALL FUNCT_00C6_1268_TimerRoutine) (struct _DEVICE_OBJECT*, VOID*);
typedef enum _IO_ALLOCATION_ACTION (NEAR STDCALL FUNCT_127D_127C_DeviceRoutine) (struct _DEVICE_OBJECT*, struct _IRP*, VOID*, VOID*);
typedef VOID (NEAR STDCALL FUNCT_00C6_12EF_DumpProcedure) (VOID*, struct _OBJECT_DUMP_CONTROL*);
typedef LONG32 (NEAR STDCALL FUNCT_0076_12F7_OpenProcedure) (enum _OB_OPEN_REASON, CHAR, struct _EPROCESS*, VOID*, ULONG32*, ULONG32);
typedef VOID (NEAR STDCALL FUNCT_00C6_1305_CloseProcedure) (struct _EPROCESS*, VOID*, ULONG32, ULONG32);
typedef LONG32 (NEAR STDCALL FUNCT_0076_130B_ParseProcedure) (VOID*, VOID*, struct _ACCESS_STATE*, CHAR, ULONG32, struct _UNICODE_STRING*, struct _UNICODE_STRING*, VOID*, struct _SECURITY_QUALITY_OF_SERVICE*, VOID**);
typedef LONG32 (NEAR STDCALL FUNCT_0076_1317_SecurityProcedure) (VOID*, enum _SECURITY_OPERATION_CODE, ULONG32*, VOID*, ULONG32*, VOID**, enum _POOL_TYPE, struct _GENERIC_MAPPING*, CHAR);
typedef LONG32 (NEAR STDCALL FUNCT_0076_1328_QueryNameProcedure) (VOID*, UINT8, struct _OBJECT_NAME_INFORMATION*, ULONG32, ULONG32*, CHAR);
typedef UINT8 (NEAR STDCALL FUNCT_007F_1330_OkayToCloseProcedure) (struct _EPROCESS*, VOID*, VOID*, CHAR);
typedef LONG32 (NEAR STDCALL FUNCT_0076_14FE_CommitRoutine) (VOID*, VOID**, ULONG32*);
typedef VOID* (NEAR STDCALL FUNCT_00C9_1704_AllocateRoutine) (ULONG32);
typedef ULONG32 (NEAR STDCALL FUNCT_0009_1B1A_HashFunction) (ULONG32, VOID**);
typedef enum _RTL_GENERIC_COMPARE_RESULTS (NEAR STDCALL FUNCT_1BC3_1BC2_CompareRoutine) (struct _RTL_AVL_TABLE*, VOID*, VOID*);
typedef VOID* (NEAR STDCALL FUNCT_00C9_1BCC_AllocateRoutine) (struct _RTL_AVL_TABLE*, ULONG32);
typedef VOID (NEAR STDCALL FUNCT_00C6_1BD0_FreeRoutine) (struct _RTL_AVL_TABLE*, VOID*);

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Structure types

          typedef struct _ACCESS_REASONS // 1 elements, 0x80 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      Data[32];                                        
          }ACCESS_REASONS, *PACCESS_REASONS;                                   
                                                                            
          typedef struct _LUID       // 2 elements, 0x8 bytes (sizeof) 
          {                                                            
/*0x000*/     ULONG32      LowPart;                                    
/*0x004*/     LONG32       HighPart;                                   
          }LUID, *PLUID;                                               
                                                                       
          typedef struct _SECURITY_SUBJECT_CONTEXT                   // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                             
/*0x000*/     VOID*        ClientToken;                                                                 
/*0x004*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                    
/*0x008*/     VOID*        PrimaryToken;                                                                
/*0x00C*/     VOID*        ProcessAuditId;                                                              
          }SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;                                        
                                                                                                        
          typedef struct _LUID_AND_ATTRIBUTES // 2 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _LUID Luid;              // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Attributes;                                          
          }LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;                                  
                                                                                
          typedef struct _INITIAL_PRIVILEGE_SET         // 3 elements, 0x2C bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[3];                                    
          }INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET;                                   
                                                                                           
          typedef struct _PRIVILEGE_SET                 // 3 elements, 0x14 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[1];                                    
          }PRIVILEGE_SET, *PPRIVILEGE_SET;                                                 
                                                                                           
          typedef struct _UNICODE_STRING  // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Length;                                          
/*0x002*/     UINT16       MaximumLength;                                   
/*0x004*/     UINT16*      Buffer;                                          
          }UNICODE_STRING, *PUNICODE_STRING;                                  
                                                                            
          typedef struct _ACCESS_STATE                                 // 16 elements, 0x74 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _LUID OperationID;                                // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     UINT8        SecurityEvaluated;                                                              
/*0x009*/     UINT8        GenerateAudit;                                                                  
/*0x00A*/     UINT8        GenerateOnClose;                                                                
/*0x00B*/     UINT8        PrivilegesAllocated;                                                            
/*0x00C*/     ULONG32      Flags;                                                                          
/*0x010*/     ULONG32      RemainingDesiredAccess;                                                         
/*0x014*/     ULONG32      PreviouslyGrantedAccess;                                                        
/*0x018*/     ULONG32      OriginalDesiredAccess;                                                          
/*0x01C*/     struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext; // 4 elements, 0x10 bytes (sizeof)  
/*0x02C*/     VOID*        SecurityDescriptor;                                                             
/*0x030*/     VOID*        AuxData;                                                                        
              union                                                    // 2 elements, 0x2C bytes (sizeof)  
              {                                                                                            
/*0x034*/         struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;   // 3 elements, 0x2C bytes (sizeof)  
/*0x034*/         struct _PRIVILEGE_SET PrivilegeSet;                  // 3 elements, 0x14 bytes (sizeof)  
              }Privileges;                                                                                 
/*0x060*/     UINT8        AuditPrivileges;                                                                
/*0x061*/     UINT8        _PADDING0_[0x3];                                                                
/*0x064*/     struct _UNICODE_STRING ObjectName;                       // 3 elements, 0x8 bytes (sizeof)   
/*0x06C*/     struct _UNICODE_STRING ObjectTypeName;                   // 3 elements, 0x8 bytes (sizeof)   
          }ACCESS_STATE, *PACCESS_STATE;                                                                   
                                                                                                           
          typedef struct _ACL           // 5 elements, 0x8 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT8        AclRevision;                                   
/*0x001*/     UINT8        Sbz1;                                          
/*0x002*/     UINT16       AclSize;                                       
/*0x004*/     UINT16       AceCount;                                      
/*0x006*/     UINT16       Sbz2;                                          
          }ACL, *PACL;                                                    
                                                                          
typedef struct _ACTIVATION_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}ACTIVATION_CONTEXT, *PACTIVATION_CONTEXT;                                  
                                                                     
typedef struct _ACTIVATION_CONTEXT_DATA // 0 elements, 0x0 bytes (sizeof) 
{                                                                         
}ACTIVATION_CONTEXT_DATA, *PACTIVATION_CONTEXT_DATA;                                  
                                                                          
          typedef struct _LIST_ENTRY     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     struct _LIST_ENTRY* Flink;                                   
/*0x004*/     struct _LIST_ENTRY* Blink;                                   
          }LIST_ENTRY, *PLIST_ENTRY;                                       
                                                                           
          typedef struct _ACTIVATION_CONTEXT_STACK                     // 5 elements, 0x18 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;                                    
/*0x004*/     struct _LIST_ENTRY FrameListCache;                       // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     ULONG32      Flags;                                                                         
/*0x010*/     ULONG32      NextCookieSequenceNumber;                                                      
/*0x014*/     ULONG32      StackId;                                                                       
          }ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK;                                          
                                                                                                          
          typedef struct _EX_PUSH_LOCK                 // 7 elements, 0x4 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x4 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x4 bytes (sizeof) 
                  {                                                                      
/*0x000*/             ULONG32      Locked : 1;         // 0 BitPosition                  
/*0x000*/             ULONG32      Waiting : 1;        // 1 BitPosition                  
/*0x000*/             ULONG32      Waking : 1;         // 2 BitPosition                  
/*0x000*/             ULONG32      MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             ULONG32      Shared : 28;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         ULONG32      Value;                                                    
/*0x000*/         VOID*        Ptr;                                                      
              };                                                                         
          }EX_PUSH_LOCK, *PEX_PUSH_LOCK;                                                 
                                                                                         
          typedef struct _ALPC_PROCESS_CONTEXT  // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _EX_PUSH_LOCK Lock;        // 7 elements, 0x4 bytes (sizeof)  
/*0x004*/     struct _LIST_ENTRY ViewListHead;  // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     ULONG32      PagedPoolQuotaCache;                                    
          }ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT;                                   
                                                                                   
typedef struct _ASSEMBLY_STORAGE_MAP // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}ASSEMBLY_STORAGE_MAP, *PASSEMBLY_STORAGE_MAP;                                  
                                                                       
          typedef struct _GENERIC_MAPPING  // 4 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      GenericRead;                                       
/*0x004*/     ULONG32      GenericWrite;                                      
/*0x008*/     ULONG32      GenericExecute;                                    
/*0x00C*/     ULONG32      GenericAll;                                        
          }GENERIC_MAPPING, *PGENERIC_MAPPING;                                   
                                                                              
          typedef struct _GUID       // 4 elements, 0x10 bytes (sizeof) 
          {                                                             
/*0x000*/     ULONG32      Data1;                                       
/*0x004*/     UINT16       Data2;                                       
/*0x006*/     UINT16       Data3;                                       
/*0x008*/     UINT8        Data4[8];                                    
          }GUID, *PGUID;                                                
                                                                        
          typedef struct _AUX_ACCESS_DATA                                                                  // 12 elements, 0xC4 bytes (sizeof) 
          {                                                                                                                                    
/*0x000*/     struct _PRIVILEGE_SET* PrivilegesUsed;                                                                                           
/*0x004*/     struct _GENERIC_MAPPING GenericMapping;                                                      // 4 elements, 0x10 bytes (sizeof)  
/*0x014*/     ULONG32      AccessesToAudit;                                                                                                    
/*0x018*/     ULONG32      MaximumAuditMask;                                                                                                   
/*0x01C*/     struct _GUID TransactionId;                                                                  // 4 elements, 0x10 bytes (sizeof)  
/*0x02C*/     VOID*        NewSecurityDescriptor;                                                                                              
/*0x030*/     VOID*        ExistingSecurityDescriptor;                                                                                         
/*0x034*/     VOID*        ParentSecurityDescriptor;                                                                                           
/*0x038*/     FUNCT_00C6_00C5_CleanupGroupCancelCallback_DeRefSecurityDescriptor* DeRefSecurityDescriptor;                                     
/*0x03C*/     VOID*        SDLock;                                                                                                             
/*0x040*/     struct _ACCESS_REASONS AccessReasons;                                                        // 1 elements, 0x80 bytes (sizeof)  
/*0x0C0*/     UINT8        GenerateStagingEvents;                                                                                              
/*0x0C1*/     UINT8        _PADDING0_[0x3];                                                                                                    
          }AUX_ACCESS_DATA, *PAUX_ACCESS_DATA;                                                                                                 
                                                                                                                                               
          typedef struct _BATTERY_REPORTING_SCALE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Granularity;                                             
/*0x004*/     ULONG32      Capacity;                                                
          }BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;                                  
                                                                                    
          typedef struct _CACHE_DESCRIPTOR     // 5 elements, 0xC bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Level;                                                
/*0x001*/     UINT8        Associativity;                                        
/*0x002*/     UINT16       LineSize;                                             
/*0x004*/     ULONG32      Size;                                                 
/*0x008*/     enum _PROCESSOR_CACHE_TYPE Type;                                   
          }CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;                                  
                                                                                 
          typedef struct _CLIENT_ID       // 2 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     VOID*        UniqueProcess;                                   
/*0x004*/     VOID*        UniqueThread;                                    
          }CLIENT_ID, *PCLIENT_ID;                                          
                                                                            
          typedef struct _CLIENT_ID32     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      UniqueProcess;                                   
/*0x004*/     ULONG32      UniqueThread;                                    
          }CLIENT_ID32, *PCLIENT_ID32;                                      
                                                                            
          typedef struct _CLIENT_ID64     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       UniqueProcess;                                    
/*0x008*/     UINT64       UniqueThread;                                     
          }CLIENT_ID64, *PCLIENT_ID64;                                       
                                                                             
          typedef union _LARGE_INTEGER   // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              }u;                                                          
/*0x000*/     INT64        QuadPart;                                       
          }LARGE_INTEGER, *PLARGE_INTEGER;                                  
                                                                           
          typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT8        Type;                                                            
/*0x001*/     UINT8        ShareDisposition;                                                
/*0x002*/     UINT16       Flags;                                                           
              union                                      // 14 elements, 0xC bytes (sizeof) 
              {                                                                             
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length;                                                  
                  }Generic;                                                                 
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length;                                                  
                  }Port;                                                                    
                  struct                                 // 4 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             UINT16       Level;                                                   
/*0x006*/             UINT16       Group;                                                   
/*0x008*/             ULONG32      Vector;                                                  
/*0x00C*/             ULONG32      Affinity;                                                
                  }Interrupt;                                                               
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
                      union                              // 2 elements, 0xC bytes (sizeof)  
                      {                                                                     
                          struct                         // 4 elements, 0xC bytes (sizeof)  
                          {                                                                 
/*0x004*/                     UINT16       Group;                                           
/*0x006*/                     UINT16       MessageCount;                                    
/*0x008*/                     ULONG32      Vector;                                          
/*0x00C*/                     ULONG32      Affinity;                                        
                          }Raw;                                                             
                          struct                         // 4 elements, 0xC bytes (sizeof)  
                          {                                                                 
/*0x004*/                     UINT16       Level;                                           
/*0x006*/                     UINT16       Group;                                           
/*0x008*/                     ULONG32      Vector;                                          
/*0x00C*/                     ULONG32      Affinity;                                        
                          }Translated;                                                      
                      };                                                                    
                  }MessageInterrupt;                                                        
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length;                                                  
                  }Memory;                                                                  
                  struct                                 // 3 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             ULONG32      Channel;                                                 
/*0x008*/             ULONG32      Port;                                                    
/*0x00C*/             ULONG32      Reserved1;                                               
                  }Dma;                                                                     
                  struct                                 // 6 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             ULONG32      Channel;                                                 
/*0x008*/             ULONG32      RequestLine;                                             
/*0x00C*/             UINT8        TransferWidth;                                           
/*0x00D*/             UINT8        Reserved1;                                               
/*0x00E*/             UINT8        Reserved2;                                               
/*0x00F*/             UINT8        Reserved3;                                               
                  }DmaV3;                                                                   
                  struct                                 // 1 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             ULONG32      Data[3];                                                 
                  }DevicePrivate;                                                           
                  struct                                 // 3 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             ULONG32      Start;                                                   
/*0x008*/             ULONG32      Length;                                                  
/*0x00C*/             ULONG32      Reserved;                                                
                  }BusNumber;                                                               
                  struct                                 // 3 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             ULONG32      DataSize;                                                
/*0x008*/             ULONG32      Reserved1;                                               
/*0x00C*/             ULONG32      Reserved2;                                               
                  }DeviceSpecificData;                                                      
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length40;                                                
                  }Memory40;                                                                
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length48;                                                
                  }Memory48;                                                                
                  struct                                 // 2 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)  
/*0x00C*/             ULONG32      Length64;                                                
                  }Memory64;                                                                
                  struct                                 // 6 elements, 0xC bytes (sizeof)  
                  {                                                                         
/*0x004*/             UINT8        Class;                                                   
/*0x005*/             UINT8        Type;                                                    
/*0x006*/             UINT8        Reserved1;                                               
/*0x007*/             UINT8        Reserved2;                                               
/*0x008*/             ULONG32      IdLowPart;                                               
/*0x00C*/             ULONG32      IdHighPart;                                              
                  }Connection;                                                              
              }u;                                                                           
          }CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;                                   
                                                                                            
          typedef struct _CM_PARTIAL_RESOURCE_LIST                          // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT16       Version;                                                                            
/*0x002*/     UINT16       Revision;                                                                           
/*0x004*/     ULONG32      Count;                                                                              
/*0x008*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];                                    
          }CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;                                               
                                                                                                               
          typedef struct _CM_FULL_RESOURCE_DESCRIPTOR               // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                            
/*0x000*/     enum _INTERFACE_TYPE InterfaceType;                                                      
/*0x004*/     ULONG32      BusNumber;                                                                  
/*0x008*/     struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList; // 4 elements, 0x18 bytes (sizeof) 
          }CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;                                   
                                                                                                       
          typedef struct _CM_RESOURCE_LIST                 // 2 elements, 0x24 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Count;                                                             
/*0x004*/     struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];                                    
          }CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;                                              
                                                                                              
          typedef struct _COMPRESSED_DATA_INFO         // 7 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT16       CompressionFormatAndEngine;                                   
/*0x002*/     UINT8        CompressionUnitShift;                                         
/*0x003*/     UINT8        ChunkShift;                                                   
/*0x004*/     UINT8        ClusterShift;                                                 
/*0x005*/     UINT8        Reserved;                                                     
/*0x006*/     UINT16       NumberOfChunks;                                               
/*0x008*/     ULONG32      CompressedChunkSizes[1];                                      
          }COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO;                                  
                                                                                         
          typedef struct _FLOATING_SAVE_AREA // 9 elements, 0x70 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      ControlWord;                                         
/*0x004*/     ULONG32      StatusWord;                                          
/*0x008*/     ULONG32      TagWord;                                             
/*0x00C*/     ULONG32      ErrorOffset;                                         
/*0x010*/     ULONG32      ErrorSelector;                                       
/*0x014*/     ULONG32      DataOffset;                                          
/*0x018*/     ULONG32      DataSelector;                                        
/*0x01C*/     UINT8        RegisterArea[80];                                    
/*0x06C*/     ULONG32      Spare0;                                              
          }FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA;                                   
                                                                                
          typedef struct _CONTEXT                   // 25 elements, 0x2CC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      ContextFlags;                                                 
/*0x004*/     ULONG32      Dr0;                                                          
/*0x008*/     ULONG32      Dr1;                                                          
/*0x00C*/     ULONG32      Dr2;                                                          
/*0x010*/     ULONG32      Dr3;                                                          
/*0x014*/     ULONG32      Dr6;                                                          
/*0x018*/     ULONG32      Dr7;                                                          
/*0x01C*/     struct _FLOATING_SAVE_AREA FloatSave; // 9 elements, 0x70 bytes (sizeof)   
/*0x08C*/     ULONG32      SegGs;                                                        
/*0x090*/     ULONG32      SegFs;                                                        
/*0x094*/     ULONG32      SegEs;                                                        
/*0x098*/     ULONG32      SegDs;                                                        
/*0x09C*/     ULONG32      Edi;                                                          
/*0x0A0*/     ULONG32      Esi;                                                          
/*0x0A4*/     ULONG32      Ebx;                                                          
/*0x0A8*/     ULONG32      Edx;                                                          
/*0x0AC*/     ULONG32      Ecx;                                                          
/*0x0B0*/     ULONG32      Eax;                                                          
/*0x0B4*/     ULONG32      Ebp;                                                          
/*0x0B8*/     ULONG32      Eip;                                                          
/*0x0BC*/     ULONG32      SegCs;                                                        
/*0x0C0*/     ULONG32      EFlags;                                                       
/*0x0C4*/     ULONG32      Esp;                                                          
/*0x0C8*/     ULONG32      SegSs;                                                        
/*0x0CC*/     UINT8        ExtendedRegisters[512];                                       
          }CONTEXT, *PCONTEXT;                                                           
                                                                                         
          typedef struct _COUNTER_READING       // 4 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     enum _HARDWARE_COUNTER_TYPE Type;                                    
/*0x004*/     ULONG32      Index;                                                  
/*0x008*/     UINT64       Start;                                                  
/*0x010*/     UINT64       Total;                                                  
          }COUNTER_READING, *PCOUNTER_READING;                                     
                                                                                   
          typedef union _CPU_INFO       // 5 elements, 0x10 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT32       AsUINT32[4];                                    
              struct                    // 4 elements, 0x10 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      Eax;                                        
/*0x004*/         ULONG32      Ebx;                                        
/*0x008*/         ULONG32      Ecx;                                        
/*0x00C*/         ULONG32      Edx;                                        
              };                                                           
          }CPU_INFO, *PCPU_INFO;                                           
                                                                           
          typedef struct _CURDIR              // 2 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _UNICODE_STRING DosPath; // 3 elements, 0x8 bytes (sizeof) 
/*0x008*/     VOID*        Handle;                                              
          }CURDIR, *PCURDIR;                                                    
                                                                                
          typedef struct _DESCRIPTOR // 3 elements, 0x8 bytes (sizeof) 
          {                                                            
/*0x000*/     UINT16       Pad;                                        
/*0x002*/     UINT16       Limit;                                      
/*0x004*/     ULONG32      Base;                                       
          }DESCRIPTOR, *PDESCRIPTOR;                                   
                                                                       
          typedef struct _DEVICE_CAPABILITIES          // 31 elements, 0x40 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT16       Size;                                                           
/*0x002*/     UINT16       Version;                                                        
              struct                                   // 21 elements, 0x4 bytes (sizeof)  
              {                                                                            
/*0x004*/         ULONG32      DeviceD1 : 1;           // 0 BitPosition                    
/*0x004*/         ULONG32      DeviceD2 : 1;           // 1 BitPosition                    
/*0x004*/         ULONG32      LockSupported : 1;      // 2 BitPosition                    
/*0x004*/         ULONG32      EjectSupported : 1;     // 3 BitPosition                    
/*0x004*/         ULONG32      Removable : 1;          // 4 BitPosition                    
/*0x004*/         ULONG32      DockDevice : 1;         // 5 BitPosition                    
/*0x004*/         ULONG32      UniqueID : 1;           // 6 BitPosition                    
/*0x004*/         ULONG32      SilentInstall : 1;      // 7 BitPosition                    
/*0x004*/         ULONG32      RawDeviceOK : 1;        // 8 BitPosition                    
/*0x004*/         ULONG32      SurpriseRemovalOK : 1;  // 9 BitPosition                    
/*0x004*/         ULONG32      WakeFromD0 : 1;         // 10 BitPosition                   
/*0x004*/         ULONG32      WakeFromD1 : 1;         // 11 BitPosition                   
/*0x004*/         ULONG32      WakeFromD2 : 1;         // 12 BitPosition                   
/*0x004*/         ULONG32      WakeFromD3 : 1;         // 13 BitPosition                   
/*0x004*/         ULONG32      HardwareDisabled : 1;   // 14 BitPosition                   
/*0x004*/         ULONG32      NonDynamic : 1;         // 15 BitPosition                   
/*0x004*/         ULONG32      WarmEjectSupported : 1; // 16 BitPosition                   
/*0x004*/         ULONG32      NoDisplayInUI : 1;      // 17 BitPosition                   
/*0x004*/         ULONG32      Reserved1 : 1;          // 18 BitPosition                   
/*0x004*/         ULONG32      WakeFromInterrupt : 1;  // 19 BitPosition                   
/*0x004*/         ULONG32      Reserved : 12;          // 20 BitPosition                   
              };                                                                           
/*0x008*/     ULONG32      Address;                                                        
/*0x00C*/     ULONG32      UINumber;                                                       
/*0x010*/     enum _DEVICE_POWER_STATE DeviceState[7];                                     
/*0x02C*/     enum _SYSTEM_POWER_STATE SystemWake;                                         
/*0x030*/     enum _DEVICE_POWER_STATE DeviceWake;                                         
/*0x034*/     ULONG32      D1Latency;                                                      
/*0x038*/     ULONG32      D2Latency;                                                      
/*0x03C*/     ULONG32      D3Latency;                                                      
          }DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES;                                     
                                                                                           
          typedef struct _KDEVICE_QUEUE_ENTRY     // 3 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY DeviceListEntry; // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      SortKey;                                                  
/*0x00C*/     UINT8        Inserted;                                                 
/*0x00D*/     UINT8        _PADDING0_[0x3];                                          
          }KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY;                                   
                                                                                     
          typedef struct _WAIT_CONTEXT_BLOCK                  // 12 elements, 0x28 bytes (sizeof) 
          {                                                                                       
              union                                           // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                   
/*0x000*/         struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry; // 3 elements, 0x10 bytes (sizeof)  
                  struct                                      // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             struct _LIST_ENTRY DmaWaitEntry;        // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/             ULONG32      NumberOfChannels;                                              
                      struct                                  // 3 elements, 0x4 bytes (sizeof)   
                      {                                                                           
/*0x00C*/                 ULONG32      SyncCallback : 1;      // 0 BitPosition                    
/*0x00C*/                 ULONG32      DmaContext : 1;        // 1 BitPosition                    
/*0x00C*/                 ULONG32      Reserved : 30;         // 2 BitPosition                    
                      };                                                                          
                  };                                                                              
              };                                                                                  
/*0x010*/     FUNCT_127D_127C_DeviceRoutine* DeviceRoutine;                                       
/*0x014*/     VOID*        DeviceContext;                                                         
/*0x018*/     ULONG32      NumberOfMapRegisters;                                                  
/*0x01C*/     VOID*        DeviceObject;                                                          
/*0x020*/     VOID*        CurrentIrp;                                                            
/*0x024*/     struct _KDPC* BufferChainingDpc;                                                    
          }WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;                                              
                                                                                                  
          typedef struct _KDEVICE_QUEUE          // 5 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     INT16        Type;                                                    
/*0x002*/     INT16        Size;                                                    
/*0x004*/     struct _LIST_ENTRY DeviceListHead; // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     ULONG32      Lock;                                                    
/*0x010*/     UINT8        Busy;                                                    
/*0x011*/     UINT8        _PADDING0_[0x3];                                         
          }KDEVICE_QUEUE, *PKDEVICE_QUEUE;                                          
                                                                                    
          typedef struct _SINGLE_LIST_ENTRY    // 1 elements, 0x4 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _SINGLE_LIST_ENTRY* Next;                                   
          }SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;                                  
                                                                                 
          typedef struct _KDPC                                  // 11 elements, 0x20 bytes (sizeof) 
          {                                                                                         
              union                                             // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                     
/*0x000*/         ULONG32      TargetInfoAsUlong;                                                   
                  struct                                        // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                                 
/*0x000*/             UINT8        Type;                                                            
/*0x001*/             UINT8        Importance;                                                      
/*0x002*/             UINT16       Number;                                                          
                  };                                                                                
              };                                                                                    
/*0x004*/     struct _SINGLE_LIST_ENTRY DpcListEntry;           // 1 elements, 0x4 bytes (sizeof)   
/*0x008*/     ULONG32      ProcessorHistory;                                                        
/*0x00C*/     FUNCT_00C6_055C_DeferredRoutine* DeferredRoutine;                                     
/*0x010*/     VOID*        DeferredContext;                                                         
/*0x014*/     VOID*        SystemArgument1;                                                         
/*0x018*/     VOID*        SystemArgument2;                                                         
/*0x01C*/     VOID*        DpcData;                                                                 
          }KDPC, *PKDPC;                                                                            
                                                                                                    
          typedef struct _DISPATCHER_HEADER                                // 53 elements, 0x10 bytes (sizeof) 
          {                                                                                                    
              union                                                        // 8 elements, 0x4 bytes (sizeof)   
              {                                                                                                
/*0x000*/         LONG32       Lock;                                                                           
/*0x000*/         LONG32       LockNV;                                                                         
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Type;                                                                       
/*0x001*/             UINT8        Signalling;                                                                 
/*0x002*/             UINT8        Size;                                                                       
/*0x003*/             UINT8        Reserved1;                                                                  
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        TimerType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        TimerControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Absolute : 1;                   // 0 BitPosition                    
/*0x001*/                     UINT8        Wake : 1;                       // 1 BitPosition                    
/*0x001*/                     UINT8        EncodedTolerableDelay : 6;      // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Hand;                                                                       
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x003*/                 UINT8        TimerMiscFlags;                                                         
                          struct                                           // 4 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x003*/                     UINT8        Index : 1;                      // 0 BitPosition                    
/*0x003*/                     UINT8        Processor : 5;                  // 1 BitPosition                    
/*0x003*/                     UINT8        Inserted : 1;                   // 6 BitPosition                    
/*0x003*/                     UINT8        Expired : 1;                    // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Timer2Type;                                                                 
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        Timer2Flags;                                                            
                          struct                                           // 7 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Timer2Inserted : 1;             // 0 BitPosition                    
/*0x001*/                     UINT8        Timer2Expiring : 1;             // 1 BitPosition                    
/*0x001*/                     UINT8        Timer2CancelPending : 1;        // 2 BitPosition                    
/*0x001*/                     UINT8        Timer2SetPending : 1;           // 3 BitPosition                    
/*0x001*/                     UINT8        Timer2Running : 1;              // 4 BitPosition                    
/*0x001*/                     UINT8        Timer2Disabled : 1;             // 5 BitPosition                    
/*0x001*/                     UINT8        Timer2ReservedFlags : 2;        // 6 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Timer2Reserved1;                                                            
/*0x003*/             UINT8        Timer2Reserved2;                                                            
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        QueueType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        QueueControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Abandoned : 1;                  // 0 BitPosition                    
/*0x001*/                     UINT8        DisableIncrement : 1;           // 1 BitPosition                    
/*0x001*/                     UINT8        QueueReservedControlFlags : 6;  // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        QueueSize;                                                                  
/*0x003*/             UINT8        QueueReserved;                                                              
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        ThreadType;                                                                 
/*0x001*/             UINT8        ThreadReserved;                                                             
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x002*/                 UINT8        ThreadControlFlags;                                                     
                          struct                                           // 8 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x002*/                     UINT8        CycleProfiling : 1;             // 0 BitPosition                    
/*0x002*/                     UINT8        CounterProfiling : 1;           // 1 BitPosition                    
/*0x002*/                     UINT8        GroupScheduling : 1;            // 2 BitPosition                    
/*0x002*/                     UINT8        AffinitySet : 1;                // 3 BitPosition                    
/*0x002*/                     UINT8        Tagged : 1;                     // 4 BitPosition                    
/*0x002*/                     UINT8        EnergyProfiling : 1;            // 5 BitPosition                    
/*0x002*/                     UINT8        Instrumented : 1;               // 6 BitPosition                    
/*0x002*/                     UINT8        ThreadReservedControlFlags : 1; // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x003*/             UINT8        DebugActive;                                                                
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        MutantType;                                                                 
/*0x001*/             UINT8        MutantSize;                                                                 
/*0x002*/             UINT8        DpcActive;                                                                  
/*0x003*/             UINT8        MutantReserved;                                                             
                  };                                                                                           
              };                                                                                               
/*0x004*/     LONG32       SignalState;                                                                        
/*0x008*/     struct _LIST_ENTRY WaitListHead;                             // 2 elements, 0x8 bytes (sizeof)   
          }DISPATCHER_HEADER, *PDISPATCHER_HEADER;                                                             
                                                                                                               
          typedef struct _KEVENT                // 1 elements, 0x10 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 53 elements, 0x10 bytes (sizeof) 
          }KEVENT, *PKEVENT;                                                        
                                                                                    
          typedef struct _DEVICE_OBJECT                        // 25 elements, 0xB8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     INT16        Type;                                                                   
/*0x002*/     UINT16       Size;                                                                   
/*0x004*/     LONG32       ReferenceCount;                                                         
/*0x008*/     struct _DRIVER_OBJECT* DriverObject;                                                 
/*0x00C*/     struct _DEVICE_OBJECT* NextDevice;                                                   
/*0x010*/     struct _DEVICE_OBJECT* AttachedDevice;                                               
/*0x014*/     struct _IRP* CurrentIrp;                                                             
/*0x018*/     struct _IO_TIMER* Timer;                                                             
/*0x01C*/     ULONG32      Flags;                                                                  
/*0x020*/     ULONG32      Characteristics;                                                        
/*0x024*/     struct _VPB* Vpb;                                                                    
/*0x028*/     VOID*        DeviceExtension;                                                        
/*0x02C*/     ULONG32      DeviceType;                                                             
/*0x030*/     CHAR         StackSize;                                                              
/*0x031*/     UINT8        _PADDING0_[0x3];                                                        
              union                                            // 2 elements, 0x28 bytes (sizeof)  
              {                                                                                    
/*0x034*/         struct _LIST_ENTRY ListEntry;                // 2 elements, 0x8 bytes (sizeof)   
/*0x034*/         struct _WAIT_CONTEXT_BLOCK Wcb;              // 12 elements, 0x28 bytes (sizeof) 
              }Queue;                                                                              
/*0x05C*/     ULONG32      AlignmentRequirement;                                                   
/*0x060*/     struct _KDEVICE_QUEUE DeviceQueue;               // 5 elements, 0x14 bytes (sizeof)  
/*0x074*/     struct _KDPC Dpc;                                // 11 elements, 0x20 bytes (sizeof) 
/*0x094*/     ULONG32      ActiveThreadCount;                                                      
/*0x098*/     VOID*        SecurityDescriptor;                                                     
/*0x09C*/     struct _KEVENT DeviceLock;                       // 1 elements, 0x10 bytes (sizeof)  
/*0x0AC*/     UINT16       SectorSize;                                                             
/*0x0AE*/     UINT16       Spare1;                                                                 
/*0x0B0*/     struct _DEVOBJ_EXTENSION* DeviceObjectExtension;                                     
/*0x0B4*/     VOID*        Reserved;                                                               
          }DEVICE_OBJECT, *PDEVICE_OBJECT;                                                         
                                                                                                   
typedef struct _DEVICE_OBJECT_POWER_EXTENSION // 0 elements, 0x0 bytes (sizeof) 
{                                                                               
}DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION;                                  
                                                                                
          typedef struct _DEVOBJ_EXTENSION                 // 15 elements, 0x38 bytes (sizeof) 
          {                                                                                    
/*0x000*/     INT16        Type;                                                               
/*0x002*/     UINT16       Size;                                                               
/*0x004*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x008*/     ULONG32      PowerFlags;                                                         
/*0x00C*/     struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;                                     
/*0x010*/     ULONG32      ExtensionFlags;                                                     
/*0x014*/     VOID*        DeviceNode;                                                         
/*0x018*/     struct _DEVICE_OBJECT* AttachedTo;                                               
/*0x01C*/     LONG32       StartIoCount;                                                       
/*0x020*/     LONG32       StartIoKey;                                                         
/*0x024*/     ULONG32      StartIoFlags;                                                       
/*0x028*/     struct _VPB* Vpb;                                                                
/*0x02C*/     VOID*        DependencyNode;                                                     
/*0x030*/     VOID*        InterruptContext;                                                   
/*0x034*/     VOID*        VerifierContext;                                                    
          }DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;                                               
                                                                                               
          typedef struct _DPH_BLOCK_INFORMATION           // 9 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      StartStamp;                                                       
/*0x004*/     VOID*        Heap;                                                             
/*0x008*/     ULONG32      RequestedSize;                                                    
/*0x00C*/     ULONG32      ActualSize;                                                       
              union                                       // 3 elements, 0x8 bytes (sizeof)  
              {                                                                              
/*0x010*/         struct _LIST_ENTRY FreeQueue;           // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/         struct _SINGLE_LIST_ENTRY FreePushList; // 1 elements, 0x4 bytes (sizeof)  
/*0x010*/         UINT16       TraceIndex;                                                   
              };                                                                             
/*0x018*/     VOID*        StackTrace;                                                       
/*0x01C*/     ULONG32      EndStamp;                                                         
          }DPH_BLOCK_INFORMATION, *PDPH_BLOCK_INFORMATION;                                   
                                                                                             
          typedef struct _RTL_BALANCED_LINKS          // 5 elements, 0x10 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _RTL_BALANCED_LINKS* Parent;                                        
/*0x004*/     struct _RTL_BALANCED_LINKS* LeftChild;                                     
/*0x008*/     struct _RTL_BALANCED_LINKS* RightChild;                                    
/*0x00C*/     CHAR         Balance;                                                      
/*0x00D*/     UINT8        Reserved[3];                                                  
          }RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;                                     
                                                                                         
          typedef struct _DPH_HEAP_BLOCK                 // 14 elements, 0x40 bytes (sizeof) 
          {                                                                                  
              union                                      // 3 elements, 0x10 bytes (sizeof)  
              {                                                                              
/*0x000*/         struct _DPH_HEAP_BLOCK* pNextAlloc;                                        
/*0x000*/         struct _LIST_ENTRY AvailableEntry;     // 2 elements, 0x8 bytes (sizeof)   
/*0x000*/         struct _RTL_BALANCED_LINKS TableLinks; // 5 elements, 0x10 bytes (sizeof)  
              };                                                                             
/*0x010*/     UINT8*       pUserAllocation;                                                  
/*0x014*/     UINT8*       pVirtualBlock;                                                    
/*0x018*/     ULONG32      nVirtualBlockSize;                                                
/*0x01C*/     ULONG32      nVirtualAccessSize;                                               
/*0x020*/     ULONG32      nUserRequestedSize;                                               
/*0x024*/     ULONG32      nUserActualSize;                                                  
/*0x028*/     VOID*        UserValue;                                                        
/*0x02C*/     ULONG32      UserFlags;                                                        
/*0x030*/     struct _RTL_TRACE_BLOCK* StackTrace;                                           
/*0x034*/     struct _LIST_ENTRY AdjacencyEntry;         // 2 elements, 0x8 bytes (sizeof)   
/*0x03C*/     UINT8*       pVirtualRegion;                                                   
          }DPH_HEAP_BLOCK, *PDPH_HEAP_BLOCK;                                                 
                                                                                             
          typedef struct _RTL_AVL_TABLE                         // 11 elements, 0x38 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _RTL_BALANCED_LINKS BalancedRoot;          // 5 elements, 0x10 bytes (sizeof)  
/*0x010*/     VOID*        OrderedPointer;                                                          
/*0x014*/     ULONG32      WhichOrderedElement;                                                     
/*0x018*/     ULONG32      NumberGenericTableElements;                                              
/*0x01C*/     ULONG32      DepthOfTree;                                                             
/*0x020*/     struct _RTL_BALANCED_LINKS* RestartKey;                                               
/*0x024*/     ULONG32      DeleteCount;                                                             
/*0x028*/     FUNCT_1BC3_1BC2_CompareRoutine* CompareRoutine;                                       
/*0x02C*/     FUNCT_00C9_1BCC_AllocateRoutine* AllocateRoutine;                                     
/*0x030*/     FUNCT_00C6_1BD0_FreeRoutine* FreeRoutine;                                             
/*0x034*/     VOID*        TableContext;                                                            
          }RTL_AVL_TABLE, *PRTL_AVL_TABLE;                                                          
                                                                                                    
          typedef struct _DPH_HEAP_ROOT                        // 33 elements, 0xC0 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Signature;                                                              
/*0x004*/     ULONG32      HeapFlags;                                                              
/*0x008*/     struct _RTL_CRITICAL_SECTION* HeapCritSect;                                          
/*0x00C*/     ULONG32      nRemoteLockAcquired;                                                    
/*0x010*/     struct _DPH_HEAP_BLOCK* pVirtualStorageListHead;                                     
/*0x014*/     struct _DPH_HEAP_BLOCK* pVirtualStorageListTail;                                     
/*0x018*/     ULONG32      nVirtualStorageRanges;                                                  
/*0x01C*/     ULONG32      nVirtualStorageBytes;                                                   
/*0x020*/     struct _RTL_AVL_TABLE BusyNodesTable;            // 11 elements, 0x38 bytes (sizeof) 
/*0x058*/     struct _DPH_HEAP_BLOCK* NodeToAllocate;                                              
/*0x05C*/     ULONG32      nBusyAllocations;                                                       
/*0x060*/     ULONG32      nBusyAllocationBytesCommitted;                                          
/*0x064*/     struct _DPH_HEAP_BLOCK* pFreeAllocationListHead;                                     
/*0x068*/     struct _DPH_HEAP_BLOCK* pFreeAllocationListTail;                                     
/*0x06C*/     ULONG32      nFreeAllocations;                                                       
/*0x070*/     ULONG32      nFreeAllocationBytesCommitted;                                          
/*0x074*/     struct _LIST_ENTRY AvailableAllocationHead;      // 2 elements, 0x8 bytes (sizeof)   
/*0x07C*/     ULONG32      nAvailableAllocations;                                                  
/*0x080*/     ULONG32      nAvailableAllocationBytesCommitted;                                     
/*0x084*/     struct _DPH_HEAP_BLOCK* pUnusedNodeListHead;                                         
/*0x088*/     struct _DPH_HEAP_BLOCK* pUnusedNodeListTail;                                         
/*0x08C*/     ULONG32      nUnusedNodes;                                                           
/*0x090*/     ULONG32      nBusyAllocationBytesAccessible;                                         
/*0x094*/     struct _DPH_HEAP_BLOCK* pNodePoolListHead;                                           
/*0x098*/     struct _DPH_HEAP_BLOCK* pNodePoolListTail;                                           
/*0x09C*/     ULONG32      nNodePools;                                                             
/*0x0A0*/     ULONG32      nNodePoolBytes;                                                         
/*0x0A4*/     struct _LIST_ENTRY NextHeap;                     // 2 elements, 0x8 bytes (sizeof)   
/*0x0AC*/     ULONG32      ExtraFlags;                                                             
/*0x0B0*/     ULONG32      Seed;                                                                   
/*0x0B4*/     VOID*        NormalHeap;                                                             
/*0x0B8*/     struct _RTL_TRACE_BLOCK* CreateStackTrace;                                           
/*0x0BC*/     VOID*        FirstThread;                                                            
          }DPH_HEAP_ROOT, *PDPH_HEAP_ROOT;                                                         
                                                                                                   
          typedef struct _DRIVER_EXTENSION                        // 9 elements, 0x28 bytes (sizeof) 
          {                                                                                          
/*0x000*/     struct _DRIVER_OBJECT* DriverObject;                                                   
/*0x004*/     FUNCT_0076_0BE3_AddDevice* AddDevice;                                                  
/*0x008*/     ULONG32      Count;                                                                    
/*0x00C*/     struct _UNICODE_STRING ServiceKeyName;              // 3 elements, 0x8 bytes (sizeof)  
/*0x014*/     struct _IO_CLIENT_EXTENSION* ClientDriverExtension;                                    
/*0x018*/     struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;                                        
/*0x01C*/     VOID*        KseCallbacks;                                                             
/*0x020*/     VOID*        DvCallbacks;                                                              
/*0x024*/     VOID*        VerifierContext;                                                          
          }DRIVER_EXTENSION, *PDRIVER_EXTENSION;                                                     
                                                                                                     
          typedef struct _DRIVER_OBJECT                                   // 15 elements, 0xA8 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     INT16        Type;                                                                              
/*0x002*/     INT16        Size;                                                                              
/*0x004*/     struct _DEVICE_OBJECT* DeviceObject;                                                            
/*0x008*/     ULONG32      Flags;                                                                             
/*0x00C*/     VOID*        DriverStart;                                                                       
/*0x010*/     ULONG32      DriverSize;                                                                        
/*0x014*/     VOID*        DriverSection;                                                                     
/*0x018*/     struct _DRIVER_EXTENSION* DriverExtension;                                                      
/*0x01C*/     struct _UNICODE_STRING DriverName;                          // 3 elements, 0x8 bytes (sizeof)   
/*0x024*/     struct _UNICODE_STRING* HardwareDatabase;                                                       
/*0x028*/     struct _FAST_IO_DISPATCH* FastIoDispatch;                                                       
/*0x02C*/     FUNCT_0076_1256_DriverInit* DriverInit;                                                         
/*0x030*/     FUNCT_00C6_0F9F_DriverStartIo_CancelRoutine* DriverStartIo;                                     
/*0x034*/     FUNCT_00C6_125A_DriverUnload* DriverUnload;                                                     
/*0x038*/     FUNCT_0076_125E_MajorFunction* MajorFunction[28];                                               
          }DRIVER_OBJECT, *PDRIVER_OBJECT;                                                                    
                                                                                                              
typedef struct _ECP_LIST // 0 elements, 0x0 bytes (sizeof) 
{                                                          
}ECP_LIST, *PECP_LIST;                                     
                                                           
          typedef struct _KWAIT_CHAIN         // 1 elements, 0x4 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _SINGLE_LIST_ENTRY Head; // 1 elements, 0x4 bytes (sizeof) 
          }KWAIT_CHAIN, *PKWAIT_CHAIN;                                          
                                                                                
          typedef struct _OWNER_ENTRY                     // 5 elements, 0x8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      OwnerThread;                                                     
              union                                       // 2 elements, 0x4 bytes (sizeof) 
              {                                                                             
                  struct                                  // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                         
/*0x004*/             ULONG32      IoPriorityBoosted : 1; // 0 BitPosition                  
/*0x004*/             ULONG32      OwnerReferenced : 1;   // 1 BitPosition                  
/*0x004*/             ULONG32      OwnerCount : 30;       // 2 BitPosition                  
                  };                                                                        
/*0x004*/         ULONG32      TableSize;                                                   
              };                                                                            
          }OWNER_ENTRY, *POWNER_ENTRY;                                                      
                                                                                            
          typedef struct _ERESOURCE                   // 16 elements, 0x38 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY SystemResourcesList; // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     struct _OWNER_ENTRY* OwnerTable;                                            
/*0x00C*/     INT16        ActiveCount;                                                   
              union                                   // 2 elements, 0x2 bytes (sizeof)   
              {                                                                           
/*0x00E*/         UINT16       Flag;                                                      
                  struct                              // 2 elements, 0x2 bytes (sizeof)   
                  {                                                                       
/*0x00E*/             UINT8        ReservedLowFlags;                                      
/*0x00F*/             UINT8        WaiterPriority;                                        
                  };                                                                      
              };                                                                          
/*0x010*/     struct _KWAIT_CHAIN SharedWaiters;      // 1 elements, 0x4 bytes (sizeof)   
/*0x014*/     struct _KEVENT* ExclusiveWaiters;                                           
/*0x018*/     struct _OWNER_ENTRY OwnerEntry;         // 5 elements, 0x8 bytes (sizeof)   
/*0x020*/     ULONG32      ActiveEntries;                                                 
/*0x024*/     ULONG32      ContentionCount;                                               
/*0x028*/     ULONG32      NumberOfSharedWaiters;                                         
/*0x02C*/     ULONG32      NumberOfExclusiveWaiters;                                      
              union                                   // 2 elements, 0x4 bytes (sizeof)   
              {                                                                           
/*0x030*/         VOID*        Address;                                                   
/*0x030*/         ULONG32      CreatorBackTraceIndex;                                     
              };                                                                          
/*0x034*/     ULONG32      SpinLock;                                                      
          }ERESOURCE, *PERESOURCE;                                                        
                                                                                          
          typedef struct _KAFFINITY_EX // 4 elements, 0x58 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT16       Count;                                         
/*0x002*/     UINT16       Size;                                          
/*0x004*/     ULONG32      Reserved;                                      
/*0x008*/     ULONG32      Bitmap[20];                                    
          }KAFFINITY_EX, *PKAFFINITY_EX;                                   
                                                                          
          typedef struct _PROCESS_DISK_COUNTERS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       BytesRead;                                              
/*0x008*/     UINT64       BytesWritten;                                           
/*0x010*/     UINT64       ReadOperationCount;                                     
/*0x018*/     UINT64       WriteOperationCount;                                    
/*0x020*/     UINT64       FlushOperationCount;                                    
          }PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS;                                   
                                                                                   
          typedef struct _WNF_STATE_NAME // 1 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Data[2];                                        
          }WNF_STATE_NAME, *PWNF_STATE_NAME;                                  
                                                                           
          typedef struct _PS_WAKE_INFORMATION   // 3 elements, 0x38 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       NotificationChannel;                                    
/*0x008*/     UINT64       WakeCounters[5];                                        
/*0x030*/     UINT64       NoWakeCounter;                                          
          }PS_WAKE_INFORMATION, *PPS_WAKE_INFORMATION;                                   
                                                                                   
          typedef struct _JOBOBJECT_WAKE_FILTER // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      HighEdgeFilter;                                        
/*0x004*/     ULONG32      LowEdgeFilter;                                         
          }JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER;                                  
                                                                                  
          typedef struct _EPROCESS_VALUES       // 10 elements, 0x50 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       KernelTime;                                              
/*0x008*/     UINT64       UserTime;                                                
/*0x010*/     UINT64       CycleTime;                                               
/*0x018*/     UINT64       ContextSwitches;                                         
/*0x020*/     INT64        ReadOperationCount;                                      
/*0x028*/     INT64        WriteOperationCount;                                     
/*0x030*/     INT64        OtherOperationCount;                                     
/*0x038*/     INT64        ReadTransferCount;                                       
/*0x040*/     INT64        WriteTransferCount;                                      
/*0x048*/     INT64        OtherTransferCount;                                      
          }EPROCESS_VALUES, *PEPROCESS_VALUES;                                      
                                                                                    
          typedef struct _PS_PROPERTY_SET  // 2 elements, 0xC bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _LIST_ENTRY ListHead; // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Lock;                                             
          }PS_PROPERTY_SET, *PPS_PROPERTY_SET;                                  
                                                                             
          typedef struct _EJOB                                            // 131 elements, 0x390 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     struct _KEVENT Event;                                       // 1 elements, 0x10 bytes (sizeof)    
/*0x010*/     struct _LIST_ENTRY JobLinks;                                // 2 elements, 0x8 bytes (sizeof)     
/*0x018*/     struct _LIST_ENTRY ProcessListHead;                         // 2 elements, 0x8 bytes (sizeof)     
/*0x020*/     struct _ERESOURCE JobLock;                                  // 16 elements, 0x38 bytes (sizeof)   
/*0x058*/     union _LARGE_INTEGER TotalUserTime;                         // 4 elements, 0x8 bytes (sizeof)     
/*0x060*/     union _LARGE_INTEGER TotalKernelTime;                       // 4 elements, 0x8 bytes (sizeof)     
/*0x068*/     union _LARGE_INTEGER TotalCycleTime;                        // 4 elements, 0x8 bytes (sizeof)     
/*0x070*/     union _LARGE_INTEGER ThisPeriodTotalUserTime;               // 4 elements, 0x8 bytes (sizeof)     
/*0x078*/     union _LARGE_INTEGER ThisPeriodTotalKernelTime;             // 4 elements, 0x8 bytes (sizeof)     
/*0x080*/     UINT64       TotalContextSwitches;                                                                
/*0x088*/     ULONG32      TotalPageFaultCount;                                                                 
/*0x08C*/     ULONG32      TotalProcesses;                                                                      
/*0x090*/     ULONG32      ActiveProcesses;                                                                     
/*0x094*/     ULONG32      TotalTerminatedProcesses;                                                            
/*0x098*/     union _LARGE_INTEGER PerProcessUserTimeLimit;               // 4 elements, 0x8 bytes (sizeof)     
/*0x0A0*/     union _LARGE_INTEGER PerJobUserTimeLimit;                   // 4 elements, 0x8 bytes (sizeof)     
/*0x0A8*/     ULONG32      MinimumWorkingSetSize;                                                               
/*0x0AC*/     ULONG32      MaximumWorkingSetSize;                                                               
/*0x0B0*/     ULONG32      LimitFlags;                                                                          
/*0x0B4*/     ULONG32      ActiveProcessLimit;                                                                  
/*0x0B8*/     struct _KAFFINITY_EX Affinity;                              // 4 elements, 0x58 bytes (sizeof)    
/*0x110*/     struct _JOB_ACCESS_STATE* AccessState;                                                            
/*0x114*/     VOID*        AccessStateQuotaReference;                                                           
/*0x118*/     ULONG32      UIRestrictionsClass;                                                                 
/*0x11C*/     ULONG32      EndOfJobTimeAction;                                                                  
/*0x120*/     VOID*        CompletionPort;                                                                      
/*0x124*/     VOID*        CompletionKey;                                                                       
/*0x128*/     UINT64       CompletionCount;                                                                     
/*0x130*/     ULONG32      SessionId;                                                                           
/*0x134*/     ULONG32      SchedulingClass;                                                                     
/*0x138*/     UINT64       ReadOperationCount;                                                                  
/*0x140*/     UINT64       WriteOperationCount;                                                                 
/*0x148*/     UINT64       OtherOperationCount;                                                                 
/*0x150*/     UINT64       ReadTransferCount;                                                                   
/*0x158*/     UINT64       WriteTransferCount;                                                                  
/*0x160*/     UINT64       OtherTransferCount;                                                                  
/*0x168*/     struct _PROCESS_DISK_COUNTERS DiskIoInfo;                   // 5 elements, 0x28 bytes (sizeof)    
/*0x190*/     ULONG32      ProcessMemoryLimit;                                                                  
/*0x194*/     ULONG32      JobMemoryLimit;                                                                      
/*0x198*/     ULONG32      JobTotalMemoryLimit;                                                                 
/*0x19C*/     ULONG32      PeakProcessMemoryUsed;                                                               
/*0x1A0*/     ULONG32      PeakJobMemoryUsed;                                                                   
/*0x1A4*/     struct _KAFFINITY_EX EffectiveAffinity;                     // 4 elements, 0x58 bytes (sizeof)    
/*0x1FC*/     UINT8        _PADDING0_[0x4];                                                                     
/*0x200*/     union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;      // 4 elements, 0x8 bytes (sizeof)     
/*0x208*/     ULONG32      EffectiveMinimumWorkingSetSize;                                                      
/*0x20C*/     ULONG32      EffectiveMaximumWorkingSetSize;                                                      
/*0x210*/     ULONG32      EffectiveProcessMemoryLimit;                                                         
/*0x214*/     struct _EJOB* EffectiveProcessMemoryLimitJob;                                                     
/*0x218*/     struct _EJOB* EffectivePerProcessUserTimeLimitJob;                                                
/*0x21C*/     struct _EJOB* EffectiveDiskIoRateLimitJob;                                                        
/*0x220*/     struct _EJOB* EffectiveNetIoRateLimitJob;                                                         
/*0x224*/     struct _EJOB* EffectiveHeapAttributionJob;                                                        
/*0x228*/     ULONG32      EffectiveLimitFlags;                                                                 
/*0x22C*/     ULONG32      EffectiveSchedulingClass;                                                            
/*0x230*/     ULONG32      EffectiveFreezeCount;                                                                
/*0x234*/     ULONG32      EffectiveBackgroundCount;                                                            
/*0x238*/     ULONG32      EffectiveSwapCount;                                                                  
/*0x23C*/     ULONG32      EffectiveNotificationLimitCount;                                                     
/*0x240*/     UINT8        EffectivePriorityClass;                                                              
/*0x241*/     UINT8        PriorityClass;                                                                       
/*0x242*/     UINT8        NestingDepth;                                                                        
/*0x243*/     UINT8        Reserved1[1];                                                                        
/*0x244*/     ULONG32      CompletionFilter;                                                                    
              union                                                       // 2 elements, 0x38 bytes (sizeof)    
              {                                                                                                 
/*0x248*/         struct _WNF_STATE_NAME WakeChannel;                     // 1 elements, 0x8 bytes (sizeof)     
/*0x248*/         struct _PS_WAKE_INFORMATION WakeInfo;                   // 3 elements, 0x38 bytes (sizeof)    
              };                                                                                                
/*0x280*/     struct _JOBOBJECT_WAKE_FILTER WakeFilter;                   // 2 elements, 0x8 bytes (sizeof)     
/*0x288*/     ULONG32      LowEdgeLatchFilter;                                                                  
/*0x28C*/     ULONG32      OwnedHighEdgeFilters;                                                                
/*0x290*/     struct _EJOB* NotificationLink;                                                                   
/*0x294*/     UINT8        _PADDING1_[0x4];                                                                     
/*0x298*/     UINT64       CurrentJobMemoryUsed;                                                                
/*0x2A0*/     struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;                                           
/*0x2A4*/     VOID*        NotificationInfoQuotaReference;                                                      
/*0x2A8*/     struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;                                       
/*0x2AC*/     struct _JOB_CPU_RATE_CONTROL* CpuRateControl;                                                     
/*0x2B0*/     VOID*        EffectiveSchedulingGroup;                                                            
/*0x2B4*/     UINT8        _PADDING2_[0x4];                                                                     
/*0x2B8*/     UINT64       ReadyTime;                                                                           
/*0x2C0*/     struct _EX_PUSH_LOCK MemoryLimitsLock;                      // 7 elements, 0x4 bytes (sizeof)     
/*0x2C4*/     struct _LIST_ENTRY SiblingJobLinks;                         // 2 elements, 0x8 bytes (sizeof)     
/*0x2CC*/     struct _LIST_ENTRY ChildJobListHead;                        // 2 elements, 0x8 bytes (sizeof)     
/*0x2D4*/     struct _EJOB* ParentJob;                                                                          
/*0x2D8*/     struct _EJOB* RootJob;                                                                            
/*0x2DC*/     struct _LIST_ENTRY IteratorListHead;                        // 2 elements, 0x8 bytes (sizeof)     
/*0x2E4*/     ULONG32      AncestorCount;                                                                       
              union                                                       // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                 
/*0x2E8*/         struct _EJOB** Ancestors;                                                                     
/*0x2E8*/         VOID*        SessionObject;                                                                   
              };                                                                                                
/*0x2F0*/     struct _EPROCESS_VALUES Accounting;                         // 10 elements, 0x50 bytes (sizeof)   
/*0x340*/     ULONG32      ShadowActiveProcessCount;                                                            
/*0x344*/     ULONG32      ActiveAuxiliaryProcessCount;                                                         
/*0x348*/     ULONG32      SequenceNumber;                                                                      
/*0x34C*/     ULONG32      TimerListLock;                                                                       
/*0x350*/     struct _LIST_ENTRY TimerListHead;                           // 2 elements, 0x8 bytes (sizeof)     
/*0x358*/     struct _GUID ContainerId;                                   // 4 elements, 0x10 bytes (sizeof)    
/*0x368*/     struct _SILO_CONTEXT* Container;                                                                  
/*0x36C*/     struct _PS_PROPERTY_SET PropertySet;                        // 2 elements, 0xC bytes (sizeof)     
/*0x378*/     struct _JOB_NET_RATE_CONTROL* NetRateControl;                                                     
/*0x37C*/     struct _JOB_IO_RATE_CONTROL* IoRateControl;                                                       
              union                                                       // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                 
/*0x380*/         ULONG32      JobFlags;                                                                        
                  struct                                                  // 31 elements, 0x4 bytes (sizeof)    
                  {                                                                                             
/*0x380*/             ULONG32      CloseDone : 1;                         // 0 BitPosition                      
/*0x380*/             ULONG32      MultiGroup : 1;                        // 1 BitPosition                      
/*0x380*/             ULONG32      OutstandingNotification : 1;           // 2 BitPosition                      
/*0x380*/             ULONG32      NotificationInProgress : 1;            // 3 BitPosition                      
/*0x380*/             ULONG32      UILimits : 1;                          // 4 BitPosition                      
/*0x380*/             ULONG32      CpuRateControlActive : 1;              // 5 BitPosition                      
/*0x380*/             ULONG32      OwnCpuRateControl : 1;                 // 6 BitPosition                      
/*0x380*/             ULONG32      Terminating : 1;                       // 7 BitPosition                      
/*0x380*/             ULONG32      WorkingSetLock : 1;                    // 8 BitPosition                      
/*0x380*/             ULONG32      JobFrozen : 1;                         // 9 BitPosition                      
/*0x380*/             ULONG32      Background : 1;                        // 10 BitPosition                     
/*0x380*/             ULONG32      WakeNotificationAllocated : 1;         // 11 BitPosition                     
/*0x380*/             ULONG32      WakeNotificationEnabled : 1;           // 12 BitPosition                     
/*0x380*/             ULONG32      WakeNotificationPending : 1;           // 13 BitPosition                     
/*0x380*/             ULONG32      LimitNotificationRequired : 1;         // 14 BitPosition                     
/*0x380*/             ULONG32      ZeroCountNotificationRequired : 1;     // 15 BitPosition                     
/*0x380*/             ULONG32      CycleTimeNotificationRequired : 1;     // 16 BitPosition                     
/*0x380*/             ULONG32      CycleTimeNotificationPending : 1;      // 17 BitPosition                     
/*0x380*/             ULONG32      TimersVirtualized : 1;                 // 18 BitPosition                     
/*0x380*/             ULONG32      JobSwapped : 1;                        // 19 BitPosition                     
/*0x380*/             ULONG32      ViolationDetected : 1;                 // 20 BitPosition                     
/*0x380*/             ULONG32      EmptyJobNotified : 1;                  // 21 BitPosition                     
/*0x380*/             ULONG32      NoSystemCharge : 1;                    // 22 BitPosition                     
/*0x380*/             ULONG32      DropNoWakeCharges : 1;                 // 23 BitPosition                     
/*0x380*/             ULONG32      NoWakeChargePolicyDecided : 1;         // 24 BitPosition                     
/*0x380*/             ULONG32      NetRateControlActive : 1;              // 25 BitPosition                     
/*0x380*/             ULONG32      OwnNetRateControl : 1;                 // 26 BitPosition                     
/*0x380*/             ULONG32      IoRateControlActive : 1;               // 27 BitPosition                     
/*0x380*/             ULONG32      OwnIoRateControl : 1;                  // 28 BitPosition                     
/*0x380*/             ULONG32      DisallowNewProcesses : 1;              // 29 BitPosition                     
/*0x380*/             ULONG32      SpareJobFlags : 2;                     // 30 BitPosition                     
                  };                                                                                            
              };                                                                                                
/*0x384*/     ULONG32      EffectiveHighEdgeFilters;                                                            
/*0x388*/     struct _PROCESS_ENERGY_VALUES* EnergyValues;                                                      
/*0x38C*/     ULONG32      SharedCommitCharge;                                                                  
          }EJOB, *PEJOB;                                                                                        
                                                                                                                
          typedef struct _GROUP_AFFINITY // 3 elements, 0xC bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Mask;                                           
/*0x004*/     UINT16       Group;                                          
/*0x006*/     UINT16       Reserved[3];                                    
          }GROUP_AFFINITY, *PGROUP_AFFINITY;                                  
                                                                           
          typedef struct _flags                      // 5 elements, 0x1 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT8        Removable : 1;            // 0 BitPosition                  
/*0x000*/     UINT8        GroupAssigned : 1;        // 1 BitPosition                  
/*0x000*/     UINT8        GroupCommitted : 1;       // 2 BitPosition                  
/*0x000*/     UINT8        GroupAssignmentFixed : 1; // 3 BitPosition                  
/*0x000*/     UINT8        Fill : 4;                 // 4 BitPosition                  
          }flags, *Pflags;                                                             
                                                                                       
          typedef struct _KHETERO_PROCESSOR_SET // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      PreferredMask;                                         
/*0x004*/     ULONG32      AvailableMask;                                         
          }KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET;                                  
                                                                                  
          typedef struct _KNODE                            // 23 elements, 0x100 bytes (sizeof) 
          {                                                                                     
/*0x000*/     ULONG32      IdleNonParkedCpuSet;                                                 
/*0x004*/     ULONG32      IdleSmtSet;                                                          
/*0x008*/     ULONG32      IdleCpuSet;                                                          
/*0x00C*/     UINT8        _PADDING0_[0x34];                                                    
/*0x040*/     ULONG32      DeepIdleSet;                                                         
/*0x044*/     ULONG32      IdleConstrainedSet;                                                  
/*0x048*/     ULONG32      NonParkedSet;                                                        
/*0x04C*/     LONG32       ParkLock;                                                            
/*0x050*/     ULONG32      Seed;                                                                
/*0x054*/     UINT8        _PADDING1_[0x2C];                                                    
/*0x080*/     ULONG32      SiblingMask;                                                         
              union                                        // 2 elements, 0xC bytes (sizeof)    
              {                                                                                 
/*0x084*/         struct _GROUP_AFFINITY Affinity;         // 3 elements, 0xC bytes (sizeof)    
                  struct                                   // 5 elements, 0xC bytes (sizeof)    
                  {                                                                             
/*0x084*/             UINT8        AffinityFill[6];                                             
/*0x08A*/             UINT16       NodeNumber;                                                  
/*0x08C*/             UINT16       PrimaryNodeNumber;                                           
/*0x08E*/             UINT8        Stride;                                                      
/*0x08F*/             UINT8        Spare0;                                                      
                  };                                                                            
              };                                                                                
/*0x090*/     ULONG32      SharedReadyQueueLeaders;                                             
/*0x094*/     ULONG32      ProximityId;                                                         
/*0x098*/     ULONG32      Lowest;                                                              
/*0x09C*/     ULONG32      Highest;                                                             
/*0x0A0*/     UINT8        MaximumProcessors;                                                   
/*0x0A1*/     struct _flags Flags;                         // 5 elements, 0x1 bytes (sizeof)    
/*0x0A2*/     UINT8        Spare10;                                                             
/*0x0A3*/     UINT8        _PADDING2_[0x1];                                                     
/*0x0A4*/     struct _KHETERO_PROCESSOR_SET HeteroSets[5];                                      
/*0x0CC*/     UINT8        _PADDING3_[0x34];                                                    
          }KNODE, *PKNODE;                                                                      
                                                                                                
          typedef struct _KPRIQUEUE                 // 5 elements, 0x19C bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _DISPATCHER_HEADER Header;     // 53 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY EntryListHead[32];                                     
/*0x110*/     LONG32       CurrentCount[32];                                            
/*0x190*/     ULONG32      MaximumCount;                                                
/*0x194*/     struct _LIST_ENTRY ThreadListHead;    // 2 elements, 0x8 bytes (sizeof)   
          }KPRIQUEUE, *PKPRIQUEUE;                                                      
                                                                                        
          typedef struct _EX_WORK_QUEUE                    // 9 elements, 0x1B8 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _KPRIQUEUE WorkPriQueue;              // 5 elements, 0x19C bytes (sizeof) 
/*0x19C*/     struct _ENODE* Node;                                                             
/*0x1A0*/     ULONG32      WorkItemsProcessed;                                                 
/*0x1A4*/     ULONG32      WorkItemsProcessedLastPass;                                         
/*0x1A8*/     LONG32       ThreadCount;                                                        
/*0x1AC*/     LONG32       MinThreads : 31;                // 0 BitPosition                    
/*0x1B0*/     UINT8        _PADDING0_[0xFFFFFFFFFFFFFFFC];                                     
/*0x1AC*/     ULONG32      TryFailed : 1;                  // 31 BitPosition                   
/*0x1B0*/     LONG32       MaxThreads;                                                         
/*0x1B4*/     enum _EXQUEUEINDEX QueueIndex;                                                   
          }EX_WORK_QUEUE, *PEX_WORK_QUEUE;                                                     
                                                                                               
          typedef union _ULARGE_INTEGER  // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              }u;                                                          
/*0x000*/     UINT64       QuadPart;                                       
          }ULARGE_INTEGER, *PULARGE_INTEGER;                                  
                                                                           
          typedef struct _KTIMER                 // 5 elements, 0x28 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 53 elements, 0x10 bytes (sizeof) 
/*0x010*/     union _ULARGE_INTEGER DueTime;     // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _LIST_ENTRY TimerListEntry; // 2 elements, 0x8 bytes (sizeof)   
/*0x020*/     struct _KDPC* Dpc;                                                     
/*0x024*/     ULONG32      Period;                                                   
          }KTIMER, *PKTIMER;                                                         
                                                                                     
          typedef struct _KWAIT_BLOCK                // 8 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY WaitListEntry;      // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT8        WaitType;                                                    
/*0x009*/     UINT8        BlockState;                                                  
/*0x00A*/     UINT16       WaitKey;                                                     
              union                                  // 2 elements, 0x4 bytes (sizeof)  
              {                                                                         
/*0x00C*/         struct _KTHREAD* Thread;                                              
/*0x00C*/         struct _KQUEUE* NotificationQueue;                                    
              };                                                                        
/*0x010*/     VOID*        Object;                                                      
/*0x014*/     VOID*        SparePtr;                                                    
          }KWAIT_BLOCK, *PKWAIT_BLOCK;                                                  
                                                                                        
          typedef struct _ENODE                                  // 12 elements, 0x380 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _KNODE Ncb;                                 // 23 elements, 0x100 bytes (sizeof) 
/*0x100*/     struct _EX_WORK_QUEUE* ExWorkQueues[8];                                                 
/*0x120*/     struct _EX_WORK_QUEUE ExWorkQueue;                 // 9 elements, 0x1B8 bytes (sizeof)  
/*0x2D8*/     struct _KEVENT ExpThreadSetManagerEvent;           // 1 elements, 0x10 bytes (sizeof)   
/*0x2E8*/     struct _KTIMER ExpDeadlockTimer;                   // 5 elements, 0x28 bytes (sizeof)   
/*0x310*/     struct _KEVENT ExpThreadReaperEvent;               // 1 elements, 0x10 bytes (sizeof)   
/*0x320*/     struct _KWAIT_BLOCK WaitBlocks[3];                                                      
/*0x368*/     struct _ETHREAD* ExpWorkerThreadBalanceManagerPtr;                                      
/*0x36C*/     ULONG32      ExpWorkerSeed;                                                             
              union                                              // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                       
                  struct                                         // 2 elements, 0x4 bytes (sizeof)    
                  {                                                                                   
/*0x370*/             ULONG32      ExWorkerFullInit : 1;         // 0 BitPosition                     
/*0x370*/             ULONG32      ExWorkerStructInit : 1;       // 1 BitPosition                     
                  };                                                                                  
/*0x370*/         ULONG32      ExWorkerFlags;                                                         
              };                                                                                      
          }ENODE, *PENODE;                                                                            
                                                                                                      
          typedef struct _KGDTENTRY                 // 3 elements, 0x8 bytes (sizeof)  
          {                                                                            
/*0x000*/     UINT16       LimitLow;                                                   
/*0x002*/     UINT16       BaseLow;                                                    
              union                                 // 2 elements, 0x4 bytes (sizeof)  
              {                                                                        
                  struct                            // 4 elements, 0x4 bytes (sizeof)  
                  {                                                                    
/*0x004*/             UINT8        BaseMid;                                            
/*0x005*/             UINT8        Flags1;                                             
/*0x006*/             UINT8        Flags2;                                             
/*0x007*/             UINT8        BaseHi;                                             
                  }Bytes;                                                              
                  struct                            // 10 elements, 0x4 bytes (sizeof) 
                  {                                                                    
/*0x004*/             ULONG32      BaseMid : 8;     // 0 BitPosition                   
/*0x004*/             ULONG32      Type : 5;        // 8 BitPosition                   
/*0x004*/             ULONG32      Dpl : 2;         // 13 BitPosition                  
/*0x004*/             ULONG32      Pres : 1;        // 15 BitPosition                  
/*0x004*/             ULONG32      LimitHi : 4;     // 16 BitPosition                  
/*0x004*/             ULONG32      Sys : 1;         // 20 BitPosition                  
/*0x004*/             ULONG32      Reserved_0 : 1;  // 21 BitPosition                  
/*0x004*/             ULONG32      Default_Big : 1; // 22 BitPosition                  
/*0x004*/             ULONG32      Granularity : 1; // 23 BitPosition                  
/*0x004*/             ULONG32      BaseHi : 8;      // 24 BitPosition                  
                  }Bits;                                                               
              }HighWord;                                                               
          }KGDTENTRY, *PKGDTENTRY;                                                     
                                                                                       
          typedef struct _KIDTENTRY        // 4 elements, 0x8 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT16       Offset;                                           
/*0x002*/     UINT16       Selector;                                         
/*0x004*/     UINT16       Access;                                           
/*0x006*/     UINT16       ExtendedOffset;                                   
          }KIDTENTRY, *PKIDTENTRY;                                           
                                                                             
          typedef union _KEXECUTE_OPTIONS                           // 10 elements, 0x1 bytes (sizeof) 
          {                                                                                            
              struct                                                // 8 elements, 0x1 bytes (sizeof)  
              {                                                                                        
/*0x000*/         UINT8        ExecuteDisable : 1;                  // 0 BitPosition                   
/*0x000*/         UINT8        ExecuteEnable : 1;                   // 1 BitPosition                   
/*0x000*/         UINT8        DisableThunkEmulation : 1;           // 2 BitPosition                   
/*0x000*/         UINT8        Permanent : 1;                       // 3 BitPosition                   
/*0x000*/         UINT8        ExecuteDispatchEnable : 1;           // 4 BitPosition                   
/*0x000*/         UINT8        ImageDispatchEnable : 1;             // 5 BitPosition                   
/*0x000*/         UINT8        DisableExceptionChainValidation : 1; // 6 BitPosition                   
/*0x000*/         UINT8        Spare : 1;                           // 7 BitPosition                   
              };                                                                                       
/*0x000*/     UINT8        ExecuteOptions;                                                             
/*0x000*/     UINT8        ExecuteOptionsNV;                                                           
          }KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS;                                                       
                                                                                                       
          typedef union _KSTACK_COUNT           // 3 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     LONG32       Value;                                                 
              struct                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                   
/*0x000*/         ULONG32      State : 3;       // 0 BitPosition                  
/*0x000*/         ULONG32      StackCount : 29; // 3 BitPosition                  
              };                                                                  
          }KSTACK_COUNT, *PKSTACK_COUNT;                                          
                                                                                  
          typedef struct _KPROCESS                          // 40 elements, 0x1B8 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _DISPATCHER_HEADER Header;             // 53 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY ProfileListHead;           // 2 elements, 0x8 bytes (sizeof)    
/*0x018*/     ULONG32      DirectoryTableBase;                                                   
/*0x01C*/     struct _KGDTENTRY LdtDescriptor;              // 3 elements, 0x8 bytes (sizeof)    
/*0x024*/     struct _KIDTENTRY Int21Descriptor;            // 4 elements, 0x8 bytes (sizeof)    
/*0x02C*/     struct _LIST_ENTRY ThreadListHead;            // 2 elements, 0x8 bytes (sizeof)    
/*0x034*/     ULONG32      ProcessLock;                                                          
/*0x038*/     UINT64       DeepFreezeStartTime;                                                  
/*0x040*/     struct _KAFFINITY_EX Affinity;                // 4 elements, 0x58 bytes (sizeof)   
/*0x098*/     struct _LIST_ENTRY ReadyListHead;             // 2 elements, 0x8 bytes (sizeof)    
/*0x0A0*/     struct _SINGLE_LIST_ENTRY SwapListEntry;      // 1 elements, 0x4 bytes (sizeof)    
/*0x0A4*/     struct _KAFFINITY_EX ActiveProcessors;        // 4 elements, 0x58 bytes (sizeof)   
              union                                         // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                  
                  struct                                    // 9 elements, 0x4 bytes (sizeof)    
                  {                                                                              
/*0x0FC*/             LONG32       AutoAlignment : 1;       // 0 BitPosition                     
/*0x0FC*/             LONG32       DisableBoost : 1;        // 1 BitPosition                     
/*0x0FC*/             LONG32       DisableQuantum : 1;      // 2 BitPosition                     
/*0x0FC*/             ULONG32      DeepFreeze : 1;          // 3 BitPosition                     
/*0x0FC*/             ULONG32      TimerVirtualization : 1; // 4 BitPosition                     
/*0x0FC*/             ULONG32      CheckStackExtents : 1;   // 5 BitPosition                     
/*0x0FC*/             ULONG32      SpareFlags0 : 2;         // 6 BitPosition                     
/*0x0FC*/             ULONG32      ActiveGroupsMask : 20;   // 8 BitPosition                     
/*0x0FC*/             LONG32       ReservedFlags : 4;       // 28 BitPosition                    
                  };                                                                             
/*0x0FC*/         LONG32       ProcessFlags;                                                     
              };                                                                                 
/*0x100*/     CHAR         BasePriority;                                                         
/*0x101*/     CHAR         QuantumReset;                                                         
/*0x102*/     UINT8        Visited;                                                              
/*0x103*/     union _KEXECUTE_OPTIONS Flags;                // 10 elements, 0x1 bytes (sizeof)   
/*0x104*/     ULONG32      ThreadSeed[20];                                                       
/*0x154*/     UINT16       IdealNode[20];                                                        
/*0x17C*/     UINT16       IdealGlobalNode;                                                      
/*0x17E*/     UINT16       Spare1;                                                               
/*0x180*/     UINT16       IopmOffset;                                                           
/*0x182*/     UINT8        _PADDING0_[0x2];                                                      
/*0x184*/     struct _KSCHEDULING_GROUP* SchedulingGroup;                                        
/*0x188*/     union _KSTACK_COUNT StackCount;               // 3 elements, 0x4 bytes (sizeof)    
/*0x18C*/     struct _LIST_ENTRY ProcessListEntry;          // 2 elements, 0x8 bytes (sizeof)    
/*0x194*/     UINT8        _PADDING1_[0x4];                                                      
/*0x198*/     UINT64       CycleTime;                                                            
/*0x1A0*/     UINT64       ContextSwitches;                                                      
/*0x1A8*/     ULONG32      FreezeCount;                                                          
/*0x1AC*/     ULONG32      KernelTime;                                                           
/*0x1B0*/     ULONG32      UserTime;                                                             
/*0x1B4*/     VOID*        VdmTrapcHandler;                                                      
          }KPROCESS, *PKPROCESS;                                                                 
                                                                                                 
          typedef struct _EX_RUNDOWN_REF // 2 elements, 0x4 bytes (sizeof) 
          {                                                                
              union                      // 2 elements, 0x4 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      Count;                                      
/*0x000*/         VOID*        Ptr;                                        
              };                                                           
          }EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;                                  
                                                                           
          typedef struct _EX_FAST_REF      // 3 elements, 0x4 bytes (sizeof) 
          {                                                                  
              union                        // 3 elements, 0x4 bytes (sizeof) 
              {                                                              
/*0x000*/         VOID*        Object;                                       
/*0x000*/         ULONG32      RefCnt : 3; // 0 BitPosition                  
/*0x000*/         ULONG32      Value;                                        
              };                                                             
          }EX_FAST_REF, *PEX_FAST_REF;                                       
                                                                             
          typedef struct _RTL_AVL_TREE         // 1 elements, 0x4 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _RTL_BALANCED_NODE* Root;                                   
          }RTL_AVL_TREE, *PRTL_AVL_TREE;                                         
                                                                                 
          typedef struct _SE_AUDIT_PROCESS_CREATION_INFO      // 1 elements, 0x4 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _OBJECT_NAME_INFORMATION* ImageFileName;                                   
          }SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO;                                  
                                                                                                
          typedef struct _MMSUPPORT_FLAGS                 // 16 elements, 0x4 bytes (sizeof) 
          {                                                                                  
              struct                                      // 4 elements, 0x1 bytes (sizeof)  
              {                                                                              
/*0x000*/         UINT8        WorkingSetType : 3;        // 0 BitPosition                   
/*0x000*/         UINT8        Reserved0 : 3;             // 3 BitPosition                   
/*0x000*/         UINT8        MaximumWorkingSetHard : 1; // 6 BitPosition                   
/*0x000*/         UINT8        MinimumWorkingSetHard : 1; // 7 BitPosition                   
              };                                                                             
              struct                                      // 4 elements, 0x1 bytes (sizeof)  
              {                                                                              
/*0x001*/         UINT8        SessionMaster : 1;         // 0 BitPosition                   
/*0x001*/         UINT8        TrimmerState : 2;          // 1 BitPosition                   
/*0x001*/         UINT8        Reserved : 1;              // 3 BitPosition                   
/*0x001*/         UINT8        PageStealers : 4;          // 4 BitPosition                   
              };                                                                             
/*0x002*/     UINT8        MemoryPriority;                                                   
              struct                                      // 7 elements, 0x1 bytes (sizeof)  
              {                                                                              
/*0x003*/         UINT8        WsleDeleted : 1;           // 0 BitPosition                   
/*0x003*/         UINT8        VmExiting : 1;             // 1 BitPosition                   
/*0x003*/         UINT8        ExpansionFailed : 1;       // 2 BitPosition                   
/*0x003*/         UINT8        SvmEnabled : 1;            // 3 BitPosition                   
/*0x003*/         UINT8        ForceAge : 1;              // 4 BitPosition                   
/*0x003*/         UINT8        NewMaximum : 1;            // 5 BitPosition                   
/*0x003*/         UINT8        CommitReleaseState : 2;    // 6 BitPosition                   
              };                                                                             
          }MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS;                                               
                                                                                             
          typedef struct _MMSUPPORT                        // 26 elements, 0x80 bytes (sizeof) 
          {                                                                                    
/*0x000*/     LONG32       WorkingSetLock;                                                     
/*0x004*/     struct _KGATE* ExitOutswapGate;                                                  
/*0x008*/     VOID*        AccessLog;                                                          
/*0x00C*/     struct _LIST_ENTRY WorkingSetExpansionLinks; // 2 elements, 0x8 bytes (sizeof)   
/*0x014*/     ULONG32      AgeDistribution[7];                                                 
/*0x030*/     ULONG32      MinimumWorkingSetSize;                                              
/*0x034*/     ULONG32      WorkingSetLeafSize;                                                 
/*0x038*/     ULONG32      WorkingSetLeafPrivateSize;                                          
/*0x03C*/     ULONG32      WorkingSetSize;                                                     
/*0x040*/     ULONG32      WorkingSetPrivateSize;                                              
/*0x044*/     ULONG32      MaximumWorkingSetSize;                                              
/*0x048*/     ULONG32      ChargedWslePages;                                                   
/*0x04C*/     ULONG32      ActualWslePages;                                                    
/*0x050*/     ULONG32      WorkingSetSizeOverhead;                                             
/*0x054*/     ULONG32      PeakWorkingSetSize;                                                 
/*0x058*/     ULONG32      HardFaultCount;                                                     
/*0x05C*/     struct _MMWSL* VmWorkingSetList;                                                 
/*0x060*/     UINT16       NextPageColor;                                                      
/*0x062*/     UINT16       LastTrimStamp;                                                      
/*0x064*/     ULONG32      PageFaultCount;                                                     
/*0x068*/     ULONG32      TrimmedPageCount;                                                   
/*0x06C*/     ULONG32      Reserved0;                                                          
/*0x070*/     struct _MMSUPPORT_FLAGS Flags;               // 16 elements, 0x4 bytes (sizeof)  
/*0x074*/     ULONG32      ReleasedCommitDebt;                                                 
/*0x078*/     VOID*        WsSwapSupport;                                                      
/*0x07C*/     VOID*        CommitReAcquireFailSupport;                                         
          }MMSUPPORT, *PMMSUPPORT;                                                             
                                                                                               
          typedef struct _PS_PROTECTION        // 4 elements, 0x1 bytes (sizeof) 
          {                                                                      
              union                            // 2 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        Level;                                            
                  struct                       // 3 elements, 0x1 bytes (sizeof) 
                  {                                                              
/*0x000*/             UINT8        Type : 3;   // 0 BitPosition                  
/*0x000*/             UINT8        Audit : 1;  // 3 BitPosition                  
/*0x000*/             UINT8        Signer : 4; // 4 BitPosition                  
                  };                                                             
              };                                                                 
          }PS_PROTECTION, *PPS_PROTECTION;                                       
                                                                                 
          typedef struct _EPROCESS                                               // 194 elements, 0x480 bytes (sizeof) 
          {                                                                                                            
/*0x000*/     struct _KPROCESS Pcb;                                              // 40 elements, 0x1B8 bytes (sizeof)  
/*0x1B8*/     struct _EX_PUSH_LOCK ProcessLock;                                  // 7 elements, 0x4 bytes (sizeof)     
/*0x1BC*/     struct _EX_RUNDOWN_REF RundownProtect;                             // 2 elements, 0x4 bytes (sizeof)     
/*0x1C0*/     VOID*        VdmObjects;                                                                                 
/*0x1C4*/     VOID*        UniqueProcessId;                                                                            
/*0x1C8*/     struct _LIST_ENTRY ActiveProcessLinks;                             // 2 elements, 0x8 bytes (sizeof)     
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x1D0*/         ULONG32      Flags2;                                                                                 
                  struct                                                         // 28 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x1D0*/             ULONG32      JobNotReallyActive : 1;                       // 0 BitPosition                      
/*0x1D0*/             ULONG32      AccountingFolded : 1;                         // 1 BitPosition                      
/*0x1D0*/             ULONG32      NewProcessReported : 1;                       // 2 BitPosition                      
/*0x1D0*/             ULONG32      ExitProcessReported : 1;                      // 3 BitPosition                      
/*0x1D0*/             ULONG32      ReportCommitChanges : 1;                      // 4 BitPosition                      
/*0x1D0*/             ULONG32      LastReportMemory : 1;                         // 5 BitPosition                      
/*0x1D0*/             ULONG32      ForceWakeCharge : 1;                          // 6 BitPosition                      
/*0x1D0*/             ULONG32      CrossSessionCreate : 1;                       // 7 BitPosition                      
/*0x1D0*/             ULONG32      NeedsHandleRundown : 1;                       // 8 BitPosition                      
/*0x1D0*/             ULONG32      RefTraceEnabled : 1;                          // 9 BitPosition                      
/*0x1D0*/             ULONG32      DisableDynamicCode : 1;                       // 10 BitPosition                     
/*0x1D0*/             ULONG32      EmptyJobEvaluated : 1;                        // 11 BitPosition                     
/*0x1D0*/             ULONG32      DefaultPagePriority : 3;                      // 12 BitPosition                     
/*0x1D0*/             ULONG32      PrimaryTokenFrozen : 1;                       // 15 BitPosition                     
/*0x1D0*/             ULONG32      ProcessVerifierTarget : 1;                    // 16 BitPosition                     
/*0x1D0*/             ULONG32      StackRandomizationDisabled : 1;               // 17 BitPosition                     
/*0x1D0*/             ULONG32      AffinityPermanent : 1;                        // 18 BitPosition                     
/*0x1D0*/             ULONG32      AffinityUpdateEnable : 1;                     // 19 BitPosition                     
/*0x1D0*/             ULONG32      PropagateNode : 1;                            // 20 BitPosition                     
/*0x1D0*/             ULONG32      ExplicitAffinity : 1;                         // 21 BitPosition                     
/*0x1D0*/             ULONG32      ProcessExecutionState : 2;                    // 22 BitPosition                     
/*0x1D0*/             ULONG32      DisallowStrippedImages : 1;                   // 24 BitPosition                     
/*0x1D0*/             ULONG32      HighEntropyASLREnabled : 1;                   // 25 BitPosition                     
/*0x1D0*/             ULONG32      ExtensionPointDisable : 1;                    // 26 BitPosition                     
/*0x1D0*/             ULONG32      ForceRelocateImages : 1;                      // 27 BitPosition                     
/*0x1D0*/             ULONG32      ProcessStateChangeRequest : 2;                // 28 BitPosition                     
/*0x1D0*/             ULONG32      ProcessStateChangeInProgress : 1;             // 30 BitPosition                     
/*0x1D0*/             ULONG32      DisallowWin32kSystemCalls : 1;                // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x1D4*/         ULONG32      Flags;                                                                                  
                  struct                                                         // 29 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x1D4*/             ULONG32      CreateReported : 1;                           // 0 BitPosition                      
/*0x1D4*/             ULONG32      NoDebugInherit : 1;                           // 1 BitPosition                      
/*0x1D4*/             ULONG32      ProcessExiting : 1;                           // 2 BitPosition                      
/*0x1D4*/             ULONG32      ProcessDelete : 1;                            // 3 BitPosition                      
/*0x1D4*/             ULONG32      ControlFlowGuardEnabled : 1;                  // 4 BitPosition                      
/*0x1D4*/             ULONG32      VmDeleted : 1;                                // 5 BitPosition                      
/*0x1D4*/             ULONG32      OutswapEnabled : 1;                           // 6 BitPosition                      
/*0x1D4*/             ULONG32      Outswapped : 1;                               // 7 BitPosition                      
/*0x1D4*/             ULONG32      FailFastOnCommitFail : 1;                     // 8 BitPosition                      
/*0x1D4*/             ULONG32      Wow64VaSpace4Gb : 1;                          // 9 BitPosition                      
/*0x1D4*/             ULONG32      AddressSpaceInitialized : 2;                  // 10 BitPosition                     
/*0x1D4*/             ULONG32      SetTimerResolution : 1;                       // 12 BitPosition                     
/*0x1D4*/             ULONG32      BreakOnTermination : 1;                       // 13 BitPosition                     
/*0x1D4*/             ULONG32      DeprioritizeViews : 1;                        // 14 BitPosition                     
/*0x1D4*/             ULONG32      WriteWatch : 1;                               // 15 BitPosition                     
/*0x1D4*/             ULONG32      ProcessInSession : 1;                         // 16 BitPosition                     
/*0x1D4*/             ULONG32      OverrideAddressSpace : 1;                     // 17 BitPosition                     
/*0x1D4*/             ULONG32      HasAddressSpace : 1;                          // 18 BitPosition                     
/*0x1D4*/             ULONG32      LaunchPrefetched : 1;                         // 19 BitPosition                     
/*0x1D4*/             ULONG32      Background : 1;                               // 20 BitPosition                     
/*0x1D4*/             ULONG32      VmTopDown : 1;                                // 21 BitPosition                     
/*0x1D4*/             ULONG32      ImageNotifyDone : 1;                          // 22 BitPosition                     
/*0x1D4*/             ULONG32      PdeUpdateNeeded : 1;                          // 23 BitPosition                     
/*0x1D4*/             ULONG32      VdmAllowed : 1;                               // 24 BitPosition                     
/*0x1D4*/             ULONG32      ProcessRundown : 1;                           // 25 BitPosition                     
/*0x1D4*/             ULONG32      ProcessInserted : 1;                          // 26 BitPosition                     
/*0x1D4*/             ULONG32      DefaultIoPriority : 3;                        // 27 BitPosition                     
/*0x1D4*/             ULONG32      ProcessSelfDelete : 1;                        // 30 BitPosition                     
/*0x1D4*/             ULONG32      SetTimerResolutionLink : 1;                   // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x1D8*/     union _LARGE_INTEGER CreateTime;                                   // 4 elements, 0x8 bytes (sizeof)     
/*0x1E0*/     ULONG32      ProcessQuotaUsage[2];                                                                       
/*0x1E8*/     ULONG32      ProcessQuotaPeak[2];                                                                        
/*0x1F0*/     ULONG32      PeakVirtualSize;                                                                            
/*0x1F4*/     ULONG32      VirtualSize;                                                                                
/*0x1F8*/     struct _LIST_ENTRY SessionProcessLinks;                            // 2 elements, 0x8 bytes (sizeof)     
              union                                                              // 3 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x200*/         VOID*        ExceptionPortData;                                                                      
/*0x200*/         ULONG32      ExceptionPortValue;                                                                     
/*0x200*/         ULONG32      ExceptionPortState : 3;                           // 0 BitPosition                      
              };                                                                                                       
/*0x204*/     struct _EX_FAST_REF Token;                                         // 3 elements, 0x4 bytes (sizeof)     
/*0x208*/     ULONG32      WorkingSetPage;                                                                             
/*0x20C*/     struct _EX_PUSH_LOCK AddressCreationLock;                          // 7 elements, 0x4 bytes (sizeof)     
/*0x210*/     struct _EX_PUSH_LOCK PageTableCommitmentLock;                      // 7 elements, 0x4 bytes (sizeof)     
/*0x214*/     struct _ETHREAD* RotateInProgress;                                                                       
/*0x218*/     struct _ETHREAD* ForkInProgress;                                                                         
/*0x21C*/     struct _EJOB* CommitChargeJob;                                                                           
/*0x220*/     struct _RTL_AVL_TREE CloneRoot;                                    // 1 elements, 0x4 bytes (sizeof)     
/*0x224*/     ULONG32      NumberOfPrivatePages;                                                                       
/*0x228*/     ULONG32      NumberOfLockedPages;                                                                        
/*0x22C*/     VOID*        Win32Process;                                                                               
/*0x230*/     struct _EJOB* Job;                                                                                       
/*0x234*/     VOID*        SectionObject;                                                                              
/*0x238*/     VOID*        SectionBaseAddress;                                                                         
/*0x23C*/     ULONG32      Cookie;                                                                                     
/*0x240*/     struct _PAGEFAULT_HISTORY* WorkingSetWatch;                                                              
/*0x244*/     VOID*        Win32WindowStation;                                                                         
/*0x248*/     VOID*        InheritedFromUniqueProcessId;                                                               
/*0x24C*/     VOID*        LdtInformation;                                                                             
/*0x250*/     ULONG32      OwnerProcessId;                                                                             
/*0x254*/     struct _PEB* Peb;                                                                                        
/*0x258*/     VOID*        Session;                                                                                    
/*0x25C*/     VOID*        AweInfo;                                                                                    
/*0x260*/     struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;                                                                
/*0x264*/     struct _HANDLE_TABLE* ObjectTable;                                                                       
/*0x268*/     VOID*        DebugPort;                                                                                  
/*0x26C*/     VOID*        PaeTop;                                                                                     
/*0x270*/     VOID*        DeviceMap;                                                                                  
/*0x274*/     VOID*        EtwDataSource;                                                                              
/*0x278*/     UINT64       PageDirectoryPte;                                                                           
/*0x280*/     struct _FILE_OBJECT* ImageFilePointer;                                                                   
/*0x284*/     UINT8        ImageFileName[15];                                                                          
/*0x293*/     UINT8        PriorityClass;                                                                              
/*0x294*/     VOID*        SecurityPort;                                                                               
/*0x298*/     struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo; // 1 elements, 0x4 bytes (sizeof)     
/*0x29C*/     struct _LIST_ENTRY JobLinks;                                       // 2 elements, 0x8 bytes (sizeof)     
/*0x2A4*/     VOID*        HighestUserAddress;                                                                         
/*0x2A8*/     struct _LIST_ENTRY ThreadListHead;                                 // 2 elements, 0x8 bytes (sizeof)     
/*0x2B0*/     ULONG32      ActiveThreads;                                                                              
/*0x2B4*/     ULONG32      ImagePathHash;                                                                              
/*0x2B8*/     ULONG32      DefaultHardErrorProcessing;                                                                 
/*0x2BC*/     LONG32       LastThreadExitStatus;                                                                       
/*0x2C0*/     struct _EX_FAST_REF PrefetchTrace;                                 // 3 elements, 0x4 bytes (sizeof)     
/*0x2C4*/     VOID*        LockedPagesList;                                                                            
/*0x2C8*/     union _LARGE_INTEGER ReadOperationCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x2D0*/     union _LARGE_INTEGER WriteOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x2D8*/     union _LARGE_INTEGER OtherOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x2E0*/     union _LARGE_INTEGER ReadTransferCount;                            // 4 elements, 0x8 bytes (sizeof)     
/*0x2E8*/     union _LARGE_INTEGER WriteTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x2F0*/     union _LARGE_INTEGER OtherTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x2F8*/     ULONG32      CommitChargeLimit;                                                                          
/*0x2FC*/     ULONG32      CommitCharge;                                                                               
/*0x300*/     ULONG32      CommitChargePeak;                                                                           
/*0x304*/     struct _MMSUPPORT Vm;                                              // 26 elements, 0x80 bytes (sizeof)   
/*0x384*/     struct _LIST_ENTRY MmProcessLinks;                                 // 2 elements, 0x8 bytes (sizeof)     
/*0x38C*/     ULONG32      ModifiedPageCount;                                                                          
/*0x390*/     LONG32       ExitStatus;                                                                                 
/*0x394*/     struct _RTL_AVL_TREE VadRoot;                                      // 1 elements, 0x4 bytes (sizeof)     
/*0x398*/     VOID*        VadHint;                                                                                    
/*0x39C*/     ULONG32      VadCount;                                                                                   
/*0x3A0*/     ULONG32      VadPhysicalPages;                                                                           
/*0x3A4*/     ULONG32      VadPhysicalPagesLimit;                                                                      
/*0x3A8*/     struct _ALPC_PROCESS_CONTEXT AlpcContext;                          // 3 elements, 0x10 bytes (sizeof)    
/*0x3B8*/     struct _LIST_ENTRY TimerResolutionLink;                            // 2 elements, 0x8 bytes (sizeof)     
/*0x3C0*/     struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;                                                
/*0x3C4*/     ULONG32      RequestedTimerResolution;                                                                   
/*0x3C8*/     ULONG32      SmallestTimerResolution;                                                                    
/*0x3CC*/     UINT8        _PADDING0_[0x4];                                                                            
/*0x3D0*/     union _LARGE_INTEGER ExitTime;                                     // 4 elements, 0x8 bytes (sizeof)     
/*0x3D8*/     ULONG32      ActiveThreadsHighWatermark;                                                                 
/*0x3DC*/     ULONG32      LargePrivateVadCount;                                                                       
/*0x3E0*/     struct _EX_PUSH_LOCK ThreadListLock;                               // 7 elements, 0x4 bytes (sizeof)     
/*0x3E4*/     VOID*        WnfContext;                                                                                 
/*0x3E8*/     ULONG32      Spare0;                                                                                     
/*0x3EC*/     UINT8        SignatureLevel;                                                                             
/*0x3ED*/     UINT8        SectionSignatureLevel;                                                                      
/*0x3EE*/     struct _PS_PROTECTION Protection;                                  // 4 elements, 0x1 bytes (sizeof)     
/*0x3EF*/     UINT8        HangCount;                                                                                  
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x3F0*/         ULONG32      Flags3;                                                                                 
                  struct                                                         // 14 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x3F0*/             ULONG32      Minimal : 1;                                  // 0 BitPosition                      
/*0x3F0*/             ULONG32      ReplacingPageRoot : 1;                        // 1 BitPosition                      
/*0x3F0*/             ULONG32      DisableNonSystemFonts : 1;                    // 2 BitPosition                      
/*0x3F0*/             ULONG32      AuditNonSystemFontLoading : 1;                // 3 BitPosition                      
/*0x3F0*/             ULONG32      Crashed : 1;                                  // 4 BitPosition                      
/*0x3F0*/             ULONG32      JobVadsAreTracked : 1;                        // 5 BitPosition                      
/*0x3F0*/             ULONG32      VadTrackingDisabled : 1;                      // 6 BitPosition                      
/*0x3F0*/             ULONG32      AuxiliaryProcess : 1;                         // 7 BitPosition                      
/*0x3F0*/             ULONG32      SubsystemProcess : 1;                         // 8 BitPosition                      
/*0x3F0*/             ULONG32      IndirectCpuSets : 1;                          // 9 BitPosition                      
/*0x3F0*/             ULONG32      InPrivate : 1;                                // 10 BitPosition                     
/*0x3F0*/             ULONG32      ProhibitRemoteImageMap : 1;                   // 11 BitPosition                     
/*0x3F0*/             ULONG32      ProhibitLowILImageMap : 1;                    // 12 BitPosition                     
/*0x3F0*/             ULONG32      SignatureMitigationOptIn : 1;                 // 13 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x3F4*/     LONG32       DeviceAsid;                                                                                 
/*0x3F8*/     VOID*        SvmData;                                                                                    
/*0x3FC*/     struct _EX_PUSH_LOCK SvmProcessLock;                               // 7 elements, 0x4 bytes (sizeof)     
/*0x400*/     ULONG32      SvmLock;                                                                                    
/*0x404*/     struct _LIST_ENTRY SvmProcessDeviceListHead;                       // 2 elements, 0x8 bytes (sizeof)     
/*0x40C*/     UINT8        _PADDING1_[0x4];                                                                            
/*0x410*/     UINT64       LastFreezeInterruptTime;                                                                    
/*0x418*/     struct _PROCESS_DISK_COUNTERS* DiskCounters;                                                             
/*0x41C*/     VOID*        PicoContext;                                                                                
/*0x420*/     ULONG32      KeepAliveCounter;                                                                           
/*0x424*/     ULONG32      NoWakeKeepAliveCounter;                                                                     
/*0x428*/     ULONG32      HighPriorityFaultsAllowed;                                                                  
/*0x42C*/     VOID*        InstrumentationCallback;                                                                    
/*0x430*/     struct _PROCESS_ENERGY_VALUES* EnergyValues;                                                             
/*0x434*/     VOID*        VmContext;                                                                                  
/*0x438*/     UINT64       SequenceNumber;                                                                             
/*0x440*/     UINT64       CreateInterruptTime;                                                                        
/*0x448*/     UINT64       CreateUnbiasedInterruptTime;                                                                
/*0x450*/     UINT64       TotalUnbiasedFrozenTime;                                                                    
/*0x458*/     UINT64       LastAppStateUpdateTime;                                                                     
              struct                                                             // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
/*0x460*/         UINT64       LastAppStateUptime : 61;                          // 0 BitPosition                      
/*0x460*/         UINT64       LastAppState : 3;                                 // 61 BitPosition                     
              };                                                                                                       
/*0x468*/     ULONG32      SharedCommitCharge;                                                                         
/*0x46C*/     struct _EX_PUSH_LOCK SharedCommitLock;                             // 7 elements, 0x4 bytes (sizeof)     
/*0x470*/     struct _LIST_ENTRY SharedCommitLinks;                              // 2 elements, 0x8 bytes (sizeof)     
              union                                                              // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
                  struct                                                         // 2 elements, 0x8 bytes (sizeof)     
                  {                                                                                                    
/*0x478*/             ULONG32      AllowedCpuSets;                                                                     
/*0x47C*/             ULONG32      DefaultCpuSets;                                                                     
                  };                                                                                                   
                  struct                                                         // 2 elements, 0x8 bytes (sizeof)     
                  {                                                                                                    
/*0x478*/             ULONG32*     AllowedCpuSetsIndirect;                                                             
/*0x47C*/             ULONG32*     DefaultCpuSetsIndirect;                                                             
                  };                                                                                                   
              };                                                                                                       
          }EPROCESS, *PEPROCESS;                                                                                       
                                                                                                                       
typedef struct _EPROCESS_QUOTA_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;                                  
                                                                       
          typedef union _KWAIT_STATUS_REGISTER // 7 elements, 0x1 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Flags;                                                
              struct                           // 6 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        State : 3;      // 0 BitPosition                  
/*0x000*/         UINT8        Affinity : 1;   // 3 BitPosition                  
/*0x000*/         UINT8        Priority : 1;   // 4 BitPosition                  
/*0x000*/         UINT8        Apc : 1;        // 5 BitPosition                  
/*0x000*/         UINT8        UserApc : 1;    // 6 BitPosition                  
/*0x000*/         UINT8        Alert : 1;      // 7 BitPosition                  
              };                                                                 
          }KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER;                                  
                                                                                 
          typedef struct _KAPC_STATE                         // 7 elements, 0x18 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _LIST_ENTRY ApcListHead[2];                                                
/*0x010*/     struct _KPROCESS* Process;                                                        
              union                                          // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                 
/*0x014*/         UINT8        InProgressFlags;                                                 
                  struct                                     // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                             
/*0x014*/             UINT8        KernelApcInProgress : 1;  // 0 BitPosition                   
/*0x014*/             UINT8        SpecialApcInProgress : 1; // 1 BitPosition                   
                  };                                                                            
              };                                                                                
/*0x015*/     UINT8        KernelApcPending;                                                    
/*0x016*/     UINT8        UserApcPending;                                                      
/*0x017*/     UINT8        _PADDING0_[0x1];                                                     
          }KAPC_STATE, *PKAPC_STATE;                                                            
                                                                                                
          typedef struct _KAPC                                        // 17 elements, 0x30 bytes (sizeof) 
          {                                                                                               
/*0x000*/     UINT8        Type;                                                                          
/*0x001*/     UINT8        SpareByte0;                                                                    
/*0x002*/     UINT8        Size;                                                                          
/*0x003*/     UINT8        SpareByte1;                                                                    
/*0x004*/     ULONG32      SpareLong0;                                                                    
/*0x008*/     struct _KTHREAD* Thread;                                                                    
/*0x00C*/     struct _LIST_ENTRY ApcListEntry;                        // 2 elements, 0x8 bytes (sizeof)   
              union                                                   // 2 elements, 0xC bytes (sizeof)   
              {                                                                                           
                  struct                                              // 3 elements, 0xC bytes (sizeof)   
                  {                                                                                       
/*0x014*/             FUNCT_00C6_0685_KernelRoutine* KernelRoutine;                                       
/*0x018*/             FUNCT_00C6_0693_RundownRoutine* RundownRoutine;                                     
/*0x01C*/             FUNCT_00C6_068E_NormalRoutine* NormalRoutine;                                       
                  };                                                                                      
/*0x014*/         VOID*        Reserved[3];                                                               
              };                                                                                          
/*0x020*/     VOID*        NormalContext;                                                                 
/*0x024*/     VOID*        SystemArgument1;                                                               
/*0x028*/     VOID*        SystemArgument2;                                                               
/*0x02C*/     CHAR         ApcStateIndex;                                                                 
/*0x02D*/     CHAR         ApcMode;                                                                       
/*0x02E*/     UINT8        Inserted;                                                                      
/*0x02F*/     UINT8        _PADDING0_[0x1];                                                               
          }KAPC, *PKAPC;                                                                                  
                                                                                                          
          typedef struct _RTL_BALANCED_NODE               // 6 elements, 0xC bytes (sizeof) 
          {                                                                                 
              union                                       // 2 elements, 0x8 bytes (sizeof) 
              {                                                                             
/*0x000*/         struct _RTL_BALANCED_NODE* Children[2];                                   
                  struct                                  // 2 elements, 0x8 bytes (sizeof) 
                  {                                                                         
/*0x000*/             struct _RTL_BALANCED_NODE* Left;                                      
/*0x004*/             struct _RTL_BALANCED_NODE* Right;                                     
                  };                                                                        
              };                                                                            
              union                                       // 2 elements, 0x4 bytes (sizeof) 
              {                                                                             
                  struct                                  // 2 elements, 0x1 bytes (sizeof) 
                  {                                                                         
/*0x008*/             UINT8        Red : 1;               // 0 BitPosition                  
/*0x008*/             UINT8        Balance : 2;           // 0 BitPosition                  
                  };                                                                        
/*0x008*/         ULONG32      ParentValue;                                                 
              };                                                                            
          }RTL_BALANCED_NODE, *PRTL_BALANCED_NODE;                                          
                                                                                            
          typedef struct _KLOCK_ENTRY_LOCK_STATE              // 7 elements, 0x8 bytes (sizeof) 
          {                                                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                 
                  struct                                      // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                             
/*0x000*/             ULONG32      CrossThreadReleasable : 1; // 0 BitPosition                  
/*0x000*/             ULONG32      Busy : 1;                  // 1 BitPosition                  
/*0x000*/             ULONG32      Reserved : 29;             // 2 BitPosition                  
/*0x000*/             ULONG32      InTree : 1;                // 31 BitPosition                 
                  };                                                                            
/*0x000*/         VOID*        LockState;                                                       
              };                                                                                
              union                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                 
/*0x004*/         VOID*        SessionState;                                                    
/*0x004*/         ULONG32      SessionId;                                                       
              };                                                                                
          }KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE;                                    
                                                                                                
          typedef struct _RTL_RB_TREE          // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _RTL_BALANCED_NODE* Root;                                   
/*0x004*/     struct _RTL_BALANCED_NODE* Min;                                    
          }RTL_RB_TREE, *PRTL_RB_TREE;                                           
                                                                                 
          typedef struct _KLOCK_ENTRY                                // 30 elements, 0x30 bytes (sizeof) 
          {                                                                                              
              union                                                  // 2 elements, 0xC bytes (sizeof)   
              {                                                                                          
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;                // 6 elements, 0xC bytes (sizeof)   
/*0x000*/         struct _SINGLE_LIST_ENTRY FreeListEntry;           // 1 elements, 0x4 bytes (sizeof)   
              };                                                                                         
              union                                                  // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                          
/*0x00C*/         ULONG32      EntryFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x00C*/             UINT8        EntryOffset;                                                          
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x00D*/                 UINT8        ThreadLocalFlags;                                                 
                          struct                                     // 2 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x00D*/                     UINT8        WaitingBit : 1;           // 0 BitPosition                    
/*0x00D*/                     UINT8        Spare0 : 7;               // 1 BitPosition                    
                          };                                                                             
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x00E*/                 UINT8        AcquiredByte;                                                     
/*0x00E*/                 UINT8        AcquiredBit : 1;              // 0 BitPosition                    
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x00F*/                 UINT8        CrossThreadFlags;                                                 
                          struct                                     // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x00F*/                     UINT8        HeadNodeBit : 1;          // 0 BitPosition                    
/*0x00F*/                     UINT8        IoPriorityBit : 1;        // 1 BitPosition                    
/*0x00F*/                     UINT8        Spare1 : 6;               // 2 BitPosition                    
                          };                                                                             
                      };                                                                                 
                  };                                                                                     
                  struct                                             // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x00C*/             ULONG32      StaticState : 8;                  // 0 BitPosition                    
/*0x00C*/             ULONG32      AllFlags : 24;                    // 8 BitPosition                    
                  };                                                                                     
              };                                                                                         
              union                                                  // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                          
/*0x010*/         struct _KLOCK_ENTRY_LOCK_STATE LockState;          // 7 elements, 0x8 bytes (sizeof)   
/*0x010*/         VOID*        LockUnsafe;                                                               
                  struct                                             // 4 elements, 0x8 bytes (sizeof)   
                  {                                                                                      
/*0x010*/             UINT8        CrossThreadReleasableAndBusyByte;                                     
/*0x011*/             UINT8        Reserved[2];                                                          
/*0x013*/             UINT8        InTreeByte;                                                           
                      union                                          // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                  
/*0x014*/                 VOID*        SessionState;                                                     
/*0x014*/                 ULONG32      SessionId;                                                        
                      };                                                                                 
                  };                                                                                     
              };                                                                                         
              union                                                  // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                          
                  struct                                             // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                      
/*0x018*/             struct _RTL_RB_TREE OwnerTree;                 // 2 elements, 0x8 bytes (sizeof)   
/*0x020*/             struct _RTL_RB_TREE WaiterTree;                // 2 elements, 0x8 bytes (sizeof)   
                  };                                                                                     
/*0x018*/         CHAR         CpuPriorityKey;                                                           
              };                                                                                         
/*0x028*/     ULONG32      EntryLock;                                                                    
              union                                                  // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                          
/*0x02C*/         UINT16       AllBoosts;                                                                
                  struct                                             // 2 elements, 0x2 bytes (sizeof)   
                  {                                                                                      
/*0x02C*/             UINT16       IoBoost : 1;                      // 0 BitPosition                    
/*0x02C*/             UINT16       CpuBoostsBitmap : 15;             // 1 BitPosition                    
                  };                                                                                     
              };                                                                                         
/*0x02E*/     UINT16       IoNormalPriorityWaiterCount;                                                  
          }KLOCK_ENTRY, *PKLOCK_ENTRY;                                                                   
                                                                                                         
          typedef struct _KTHREAD                                            // 163 elements, 0x348 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     struct _DISPATCHER_HEADER Header;                              // 53 elements, 0x10 bytes (sizeof)   
/*0x010*/     VOID*        SListFaultAddress;                                                                      
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                        
/*0x018*/     UINT64       QuantumTarget;                                                                          
/*0x020*/     VOID*        InitialStack;                                                                           
/*0x024*/     VOID*        StackLimit;                                                                             
/*0x028*/     VOID*        StackBase;                                                                              
/*0x02C*/     ULONG32      ThreadLock;                                                                             
/*0x030*/     UINT64       CycleTime;                                                                              
/*0x038*/     ULONG32      HighCycleTime;                                                                          
/*0x03C*/     VOID*        ServiceTable;                                                                           
/*0x040*/     ULONG32      CurrentRunTime;                                                                         
/*0x044*/     ULONG32      ExpectedRunTime;                                                                        
/*0x048*/     VOID*        KernelStack;                                                                            
/*0x04C*/     struct _XSAVE_FORMAT* StateSaveArea;                                                                 
/*0x050*/     struct _KSCHEDULING_GROUP* SchedulingGroup;                                                          
/*0x054*/     union _KWAIT_STATUS_REGISTER WaitRegister;                     // 7 elements, 0x1 bytes (sizeof)     
/*0x055*/     UINT8        Running;                                                                                
/*0x056*/     UINT8        Alerted[2];                                                                             
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 21 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x058*/             ULONG32      AutoBoostActive : 1;                      // 0 BitPosition                      
/*0x058*/             ULONG32      ReadyTransition : 1;                      // 1 BitPosition                      
/*0x058*/             ULONG32      WaitNext : 1;                             // 2 BitPosition                      
/*0x058*/             ULONG32      SystemAffinityActive : 1;                 // 3 BitPosition                      
/*0x058*/             ULONG32      Alertable : 1;                            // 4 BitPosition                      
/*0x058*/             ULONG32      UserStackWalkActive : 1;                  // 5 BitPosition                      
/*0x058*/             ULONG32      ApcInterruptRequest : 1;                  // 6 BitPosition                      
/*0x058*/             ULONG32      QuantumEndMigrate : 1;                    // 7 BitPosition                      
/*0x058*/             ULONG32      UmsDirectedSwitchEnable : 1;              // 8 BitPosition                      
/*0x058*/             ULONG32      TimerActive : 1;                          // 9 BitPosition                      
/*0x058*/             ULONG32      SystemThread : 1;                         // 10 BitPosition                     
/*0x058*/             ULONG32      ProcessDetachActive : 1;                  // 11 BitPosition                     
/*0x058*/             ULONG32      CalloutActive : 1;                        // 12 BitPosition                     
/*0x058*/             ULONG32      ScbReadyQueue : 1;                        // 13 BitPosition                     
/*0x058*/             ULONG32      ApcQueueable : 1;                         // 14 BitPosition                     
/*0x058*/             ULONG32      ReservedStackInUse : 1;                   // 15 BitPosition                     
/*0x058*/             ULONG32      UmsPerformingSyscall : 1;                 // 16 BitPosition                     
/*0x058*/             ULONG32      TimerSuspended : 1;                       // 17 BitPosition                     
/*0x058*/             ULONG32      SuspendedWaitMode : 1;                    // 18 BitPosition                     
/*0x058*/             ULONG32      SuspendSchedulerApcWait : 1;              // 19 BitPosition                     
/*0x058*/             ULONG32      Reserved : 12;                            // 20 BitPosition                     
                  };                                                                                               
/*0x058*/         LONG32       MiscFlags;                                                                          
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 21 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x05C*/             ULONG32      AutoAlignment : 1;                        // 0 BitPosition                      
/*0x05C*/             ULONG32      DisableBoost : 1;                         // 1 BitPosition                      
/*0x05C*/             ULONG32      ThreadFlagsSpare0 : 1;                    // 2 BitPosition                      
/*0x05C*/             ULONG32      AlertedByThreadId : 1;                    // 3 BitPosition                      
/*0x05C*/             ULONG32      QuantumDonation : 1;                      // 4 BitPosition                      
/*0x05C*/             ULONG32      EnableStackSwap : 1;                      // 5 BitPosition                      
/*0x05C*/             ULONG32      GuiThread : 1;                            // 6 BitPosition                      
/*0x05C*/             ULONG32      DisableQuantum : 1;                       // 7 BitPosition                      
/*0x05C*/             ULONG32      ChargeOnlySchedulingGroup : 1;            // 8 BitPosition                      
/*0x05C*/             ULONG32      DeferPreemption : 1;                      // 9 BitPosition                      
/*0x05C*/             ULONG32      QueueDeferPreemption : 1;                 // 10 BitPosition                     
/*0x05C*/             ULONG32      ForceDeferSchedule : 1;                   // 11 BitPosition                     
/*0x05C*/             ULONG32      SharedReadyQueueAffinity : 1;             // 12 BitPosition                     
/*0x05C*/             ULONG32      FreezeCount : 1;                          // 13 BitPosition                     
/*0x05C*/             ULONG32      TerminationApcRequest : 1;                // 14 BitPosition                     
/*0x05C*/             ULONG32      AutoBoostEntriesExhausted : 1;            // 15 BitPosition                     
/*0x05C*/             ULONG32      KernelStackResident : 1;                  // 16 BitPosition                     
/*0x05C*/             ULONG32      CommitFailTerminateRequest : 1;           // 17 BitPosition                     
/*0x05C*/             ULONG32      ProcessStackCountDecremented : 1;         // 18 BitPosition                     
/*0x05C*/             ULONG32      ThreadFlagsSpare : 5;                     // 19 BitPosition                     
/*0x05C*/             ULONG32      EtwStackTraceApcInserted : 8;             // 24 BitPosition                     
                  };                                                                                               
/*0x05C*/         LONG32       ThreadFlags;                                                                        
              };                                                                                                   
/*0x060*/     UINT8        Tag;                                                                                    
/*0x061*/     UINT8        SystemHeteroCpuPolicy;                                                                  
              struct                                                         // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                                    
/*0x062*/         UINT8        UserHeteroCpuPolicy : 7;                      // 0 BitPosition                      
/*0x062*/         UINT8        ExplicitSystemHeteroCpuPolicy : 1;            // 7 BitPosition                      
              };                                                                                                   
/*0x063*/     UINT8        Spare0;                                                                                 
/*0x064*/     ULONG32      SystemCallNumber;                                                                       
/*0x068*/     VOID*        FirstArgument;                                                                          
/*0x06C*/     struct _KTRAP_FRAME* TrapFrame;                                                                      
              union                                                          // 2 elements, 0x18 bytes (sizeof)    
              {                                                                                                    
/*0x070*/         struct _KAPC_STATE ApcState;                               // 7 elements, 0x18 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x18 bytes (sizeof)    
                  {                                                                                                
/*0x070*/             UINT8        ApcStateFill[23];                                                               
/*0x087*/             CHAR         Priority;                                                                       
                  };                                                                                               
              };                                                                                                   
/*0x088*/     ULONG32      UserIdealProcessor;                                                                     
/*0x08C*/     ULONG32      ContextSwitches;                                                                        
/*0x090*/     UINT8        State;                                                                                  
/*0x091*/     CHAR         Spare12;                                                                                
/*0x092*/     UINT8        WaitIrql;                                                                               
/*0x093*/     CHAR         WaitMode;                                                                               
/*0x094*/     LONG32       WaitStatus;                                                                             
/*0x098*/     struct _KWAIT_BLOCK* WaitBlockList;                                                                  
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x09C*/         struct _LIST_ENTRY WaitListEntry;                          // 2 elements, 0x8 bytes (sizeof)     
/*0x09C*/         struct _SINGLE_LIST_ENTRY SwapListEntry;                   // 1 elements, 0x4 bytes (sizeof)     
              };                                                                                                   
/*0x0A4*/     struct _DISPATCHER_HEADER* Queue;                                                                    
/*0x0A8*/     VOID*        Teb;                                                                                    
/*0x0AC*/     UINT8        _PADDING1_[0x4];                                                                        
/*0x0B0*/     UINT64       RelativeTimerBias;                                                                      
/*0x0B8*/     struct _KTIMER Timer;                                          // 5 elements, 0x28 bytes (sizeof)    
              union                                                          // 5 elements, 0x60 bytes (sizeof)    
              {                                                                                                    
/*0x0E0*/         struct _KWAIT_BLOCK WaitBlock[4];                                                                
                  struct                                                     // 2 elements, 0x60 bytes (sizeof)    
                  {                                                                                                
/*0x0E0*/             UINT8        WaitBlockFill8[20];                                                             
/*0x0F4*/             struct _KTHREAD_COUNTERS* ThreadCounters;                                                    
/*0x0F8*/             UINT8        _PADDING2_[0x48];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x60 bytes (sizeof)    
                  {                                                                                                
/*0x0E0*/             UINT8        WaitBlockFill9[44];                                                             
/*0x10C*/             struct _XSTATE_SAVE* XStateSave;                                                             
/*0x110*/             UINT8        _PADDING3_[0x30];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x60 bytes (sizeof)    
                  {                                                                                                
/*0x0E0*/             UINT8        WaitBlockFill10[68];                                                            
/*0x124*/             VOID*        Win32Thread;                                                                    
/*0x128*/             UINT8        _PADDING4_[0x18];                                                               
                  };                                                                                               
                  struct                                                     // 3 elements, 0x60 bytes (sizeof)    
                  {                                                                                                
/*0x0E0*/             UINT8        WaitBlockFill11[88];                                                            
/*0x138*/             ULONG32      WaitTime;                                                                       
                      union                                                  // 2 elements, 0x4 bytes (sizeof)     
                      {                                                                                            
                          struct                                             // 2 elements, 0x4 bytes (sizeof)     
                          {                                                                                        
/*0x13C*/                     INT16        KernelApcDisable;                                                       
/*0x13E*/                     INT16        SpecialApcDisable;                                                      
                          };                                                                                       
/*0x13C*/                 ULONG32      CombinedApcDisable;                                                         
                      };                                                                                           
                  };                                                                                               
              };                                                                                                   
/*0x140*/     struct _LIST_ENTRY QueueListEntry;                             // 2 elements, 0x8 bytes (sizeof)     
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x148*/         ULONG32      NextProcessor;                                                                      
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x148*/             ULONG32      NextProcessorNumber : 31;                 // 0 BitPosition                      
/*0x148*/             ULONG32      SharedReadyQueue : 1;                     // 31 BitPosition                     
                  };                                                                                               
              };                                                                                                   
/*0x14C*/     LONG32       QueuePriority;                                                                          
/*0x150*/     struct _KPROCESS* Process;                                                                           
              union                                                          // 2 elements, 0xC bytes (sizeof)     
              {                                                                                                    
/*0x154*/         struct _GROUP_AFFINITY UserAffinity;                       // 3 elements, 0xC bytes (sizeof)     
                  struct                                                     // 7 elements, 0xC bytes (sizeof)     
                  {                                                                                                
/*0x154*/             UINT8        UserAffinityFill[6];                                                            
/*0x15A*/             CHAR         PreviousMode;                                                                   
/*0x15B*/             CHAR         BasePriority;                                                                   
                      union                                                  // 2 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x15C*/                 CHAR         PriorityDecrement;                                                          
                          struct                                             // 2 elements, 0x1 bytes (sizeof)     
                          {                                                                                        
/*0x15C*/                     UINT8        ForegroundBoost : 4;              // 0 BitPosition                      
/*0x15C*/                     UINT8        UnusualBoost : 4;                 // 4 BitPosition                      
                          };                                                                                       
                      };                                                                                           
/*0x15D*/             UINT8        Preempted;                                                                      
/*0x15E*/             UINT8        AdjustReason;                                                                   
/*0x15F*/             CHAR         AdjustIncrement;                                                                
                  };                                                                                               
              };                                                                                                   
/*0x160*/     ULONG32      AffinityVersion;                                                                        
              union                                                          // 2 elements, 0xC bytes (sizeof)     
              {                                                                                                    
/*0x164*/         struct _GROUP_AFFINITY Affinity;                           // 3 elements, 0xC bytes (sizeof)     
                  struct                                                     // 4 elements, 0xC bytes (sizeof)     
                  {                                                                                                
/*0x164*/             UINT8        AffinityFill[6];                                                                
/*0x16A*/             UINT8        ApcStateIndex;                                                                  
/*0x16B*/             UINT8        WaitBlockCount;                                                                 
/*0x16C*/             ULONG32      IdealProcessor;                                                                 
                  };                                                                                               
              };                                                                                                   
/*0x170*/     ULONG32      Spare15[1];                                                                             
              union                                                          // 2 elements, 0x18 bytes (sizeof)    
              {                                                                                                    
/*0x174*/         struct _KAPC_STATE SavedApcState;                          // 7 elements, 0x18 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x18 bytes (sizeof)    
                  {                                                                                                
/*0x174*/             UINT8        SavedApcStateFill[23];                                                          
/*0x18B*/             UINT8        WaitReason;                                                                     
                  };                                                                                               
              };                                                                                                   
/*0x18C*/     CHAR         SuspendCount;                                                                           
/*0x18D*/     CHAR         Saturation;                                                                             
/*0x18E*/     UINT16       SListFaultCount;                                                                        
              union                                                          // 7 elements, 0x30 bytes (sizeof)    
              {                                                                                                    
/*0x190*/         struct _KAPC SchedulerApc;                                 // 17 elements, 0x30 bytes (sizeof)   
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill0[1];                                                           
/*0x191*/             UINT8        ResourceIndex;                                                                  
/*0x192*/             UINT8        _PADDING5_[0x2E];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill1[3];                                                           
/*0x193*/             UINT8        QuantumReset;                                                                   
/*0x194*/             UINT8        _PADDING6_[0x2C];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill2[4];                                                           
/*0x194*/             ULONG32      KernelTime;                                                                     
/*0x198*/             UINT8        _PADDING7_[0x28];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill3[36];                                                          
/*0x1B4*/             struct _KPRCB* WaitPrcb;                                                                     
/*0x1B8*/             UINT8        _PADDING8_[0x8];                                                                
                  };                                                                                               
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill4[40];                                                          
/*0x1B8*/             VOID*        LegoData;                                                                       
/*0x1BC*/             UINT8        _PADDING9_[0x4];                                                                
                  };                                                                                               
                  struct                                                     // 2 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x190*/             UINT8        SchedulerApcFill5[47];                                                          
/*0x1BF*/             UINT8        CallbackNestingLevel;                                                           
                  };                                                                                               
              };                                                                                                   
/*0x1C0*/     ULONG32      UserTime;                                                                               
/*0x1C4*/     struct _KEVENT SuspendEvent;                                   // 1 elements, 0x10 bytes (sizeof)    
/*0x1D4*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x8 bytes (sizeof)     
/*0x1DC*/     struct _LIST_ENTRY MutantListHead;                             // 2 elements, 0x8 bytes (sizeof)     
/*0x1E4*/     UINT8        AbEntrySummary;                                                                         
/*0x1E5*/     UINT8        AbWaitEntryCount;                                                                       
/*0x1E6*/     UINT16       Spare20;                                                                                
/*0x1E8*/     struct _KLOCK_ENTRY LockEntries[6];                                                                  
/*0x308*/     struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;                // 1 elements, 0x4 bytes (sizeof)     
/*0x30C*/     struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;                   // 1 elements, 0x4 bytes (sizeof)     
/*0x310*/     UINT8        PriorityFloorCounts[16];                                                                
/*0x320*/     ULONG32      PriorityFloorSummary;                                                                   
/*0x324*/     LONG32       AbCompletedIoBoostCount;                                                                
/*0x328*/     INT16        KeReferenceCount;                                                                       
/*0x32A*/     UINT8        AbOrphanedEntrySummary;                                                                 
/*0x32B*/     UINT8        AbOwnedEntryCount;                                                                      
/*0x32C*/     ULONG32      ForegroundLossTime;                                                                     
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x330*/         struct _LIST_ENTRY GlobalForegroundListEntry;              // 2 elements, 0x8 bytes (sizeof)     
                  struct                                                     // 2 elements, 0x8 bytes (sizeof)     
                  {                                                                                                
/*0x330*/             struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry; // 1 elements, 0x4 bytes (sizeof)     
/*0x334*/             ULONG32      InGlobalForegroundList;                                                         
                  };                                                                                               
              };                                                                                                   
/*0x338*/     struct _KSCB* QueuedScb;                                                                             
/*0x33C*/     UINT8        _PADDING10_[0x4];                                                                       
/*0x340*/     UINT64       NpxState;                                                                               
          }KTHREAD, *PKTHREAD;                                                                                     
                                                                                                                   
          typedef struct _KSEMAPHORE            // 2 elements, 0x14 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 53 elements, 0x10 bytes (sizeof) 
/*0x010*/     LONG32       Limit;                                                   
          }KSEMAPHORE, *PKSEMAPHORE;                                                
                                                                                    
          typedef union _PS_CLIENT_SECURITY_CONTEXT    // 4 elements, 0x4 bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      ImpersonationData;                                            
/*0x000*/     VOID*        ImpersonationToken;                                           
              struct                                   // 2 elements, 0x4 bytes (sizeof) 
              {                                                                          
/*0x000*/         ULONG32      ImpersonationLevel : 2; // 0 BitPosition                  
/*0x000*/         ULONG32      EffectiveOnly : 1;      // 2 BitPosition                  
              };                                                                         
          }PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT;                                  
                                                                                         
          typedef struct _ETHREAD                                            // 96 elements, 0x458 bytes (sizeof)  
          {                                                                                                        
/*0x000*/     struct _KTHREAD Tcb;                                           // 163 elements, 0x348 bytes (sizeof) 
/*0x348*/     union _LARGE_INTEGER CreateTime;                               // 4 elements, 0x8 bytes (sizeof)     
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x350*/         union _LARGE_INTEGER ExitTime;                             // 4 elements, 0x8 bytes (sizeof)     
/*0x350*/         struct _LIST_ENTRY KeyedWaitChain;                         // 2 elements, 0x8 bytes (sizeof)     
              };                                                                                                   
/*0x358*/     VOID*        ChargeOnlySession;                                                                      
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x35C*/         struct _LIST_ENTRY PostBlockList;                          // 2 elements, 0x8 bytes (sizeof)     
                  struct                                                     // 2 elements, 0x8 bytes (sizeof)     
                  {                                                                                                
/*0x35C*/             VOID*        ForwardLinkShadow;                                                              
/*0x360*/             VOID*        StartAddress;                                                                   
                  };                                                                                               
              };                                                                                                   
              union                                                          // 3 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x364*/         struct _TERMINATION_PORT* TerminationPort;                                                       
/*0x364*/         struct _ETHREAD* ReaperLink;                                                                     
/*0x364*/         VOID*        KeyedWaitValue;                                                                     
              };                                                                                                   
/*0x368*/     ULONG32      ActiveTimerListLock;                                                                    
/*0x36C*/     struct _LIST_ENTRY ActiveTimerListHead;                        // 2 elements, 0x8 bytes (sizeof)     
/*0x374*/     struct _CLIENT_ID Cid;                                         // 2 elements, 0x8 bytes (sizeof)     
              union                                                          // 2 elements, 0x14 bytes (sizeof)    
              {                                                                                                    
/*0x37C*/         struct _KSEMAPHORE KeyedWaitSemaphore;                     // 2 elements, 0x14 bytes (sizeof)    
/*0x37C*/         struct _KSEMAPHORE AlpcWaitSemaphore;                      // 2 elements, 0x14 bytes (sizeof)    
              };                                                                                                   
/*0x390*/     union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;              // 4 elements, 0x4 bytes (sizeof)     
/*0x394*/     struct _LIST_ENTRY IrpList;                                    // 2 elements, 0x8 bytes (sizeof)     
/*0x39C*/     ULONG32      TopLevelIrp;                                                                            
/*0x3A0*/     struct _DEVICE_OBJECT* DeviceToVerify;                                                               
/*0x3A4*/     VOID*        Win32StartAddress;                                                                      
/*0x3A8*/     VOID*        LegacyPowerObject;                                                                      
/*0x3AC*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x8 bytes (sizeof)     
/*0x3B4*/     struct _EX_RUNDOWN_REF RundownProtect;                         // 2 elements, 0x4 bytes (sizeof)     
/*0x3B8*/     struct _EX_PUSH_LOCK ThreadLock;                               // 7 elements, 0x4 bytes (sizeof)     
/*0x3BC*/     ULONG32      ReadClusterSize;                                                                        
/*0x3C0*/     LONG32       MmLockOrdering;                                                                         
/*0x3C4*/     LONG32       CmLockOrdering;                                                                         
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x3C8*/         ULONG32      CrossThreadFlags;                                                                   
                  struct                                                     // 15 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x3C8*/             ULONG32      Terminated : 1;                           // 0 BitPosition                      
/*0x3C8*/             ULONG32      ThreadInserted : 1;                       // 1 BitPosition                      
/*0x3C8*/             ULONG32      HideFromDebugger : 1;                     // 2 BitPosition                      
/*0x3C8*/             ULONG32      ActiveImpersonationInfo : 1;              // 3 BitPosition                      
/*0x3C8*/             ULONG32      HardErrorsAreDisabled : 1;                // 4 BitPosition                      
/*0x3C8*/             ULONG32      BreakOnTermination : 1;                   // 5 BitPosition                      
/*0x3C8*/             ULONG32      SkipCreationMsg : 1;                      // 6 BitPosition                      
/*0x3C8*/             ULONG32      SkipTerminationMsg : 1;                   // 7 BitPosition                      
/*0x3C8*/             ULONG32      CopyTokenOnOpen : 1;                      // 8 BitPosition                      
/*0x3C8*/             ULONG32      ThreadIoPriority : 3;                     // 9 BitPosition                      
/*0x3C8*/             ULONG32      ThreadPagePriority : 3;                   // 12 BitPosition                     
/*0x3C8*/             ULONG32      RundownFail : 1;                          // 15 BitPosition                     
/*0x3C8*/             ULONG32      UmsForceQueueTermination : 1;             // 16 BitPosition                     
/*0x3C8*/             ULONG32      IndirectCpuSets : 1;                      // 17 BitPosition                     
/*0x3C8*/             ULONG32      ReservedCrossThreadFlags : 14;            // 18 BitPosition                     
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x3CC*/         ULONG32      SameThreadPassiveFlags;                                                             
                  struct                                                     // 8 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x3CC*/             ULONG32      ActiveExWorker : 1;                       // 0 BitPosition                      
/*0x3CC*/             ULONG32      MemoryMaker : 1;                          // 1 BitPosition                      
/*0x3CC*/             ULONG32      StoreLockThread : 1;                      // 2 BitPosition                      
/*0x3CC*/             ULONG32      ClonedThread : 1;                         // 3 BitPosition                      
/*0x3CC*/             ULONG32      KeyedEventInUse : 1;                      // 4 BitPosition                      
/*0x3CC*/             ULONG32      SelfTerminate : 1;                        // 5 BitPosition                      
/*0x3CC*/             ULONG32      RespectIoPriority : 1;                    // 6 BitPosition                      
/*0x3CC*/             ULONG32      ReservedSameThreadPassiveFlags : 25;      // 7 BitPosition                      
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x3D0*/         ULONG32      SameThreadApcFlags;                                                                 
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
                      struct                                                 // 8 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x3D0*/                 UINT8        OwnsProcessAddressSpaceExclusive : 1; // 0 BitPosition                      
/*0x3D0*/                 UINT8        OwnsProcessAddressSpaceShared : 1;    // 1 BitPosition                      
/*0x3D0*/                 UINT8        HardFaultBehavior : 1;                // 2 BitPosition                      
/*0x3D0*/                 UINT8        StartAddressInvalid : 1;              // 3 BitPosition                      
/*0x3D0*/                 UINT8        EtwCalloutActive : 1;                 // 4 BitPosition                      
/*0x3D0*/                 UINT8        SuppressSymbolLoad : 1;               // 5 BitPosition                      
/*0x3D0*/                 UINT8        Prefetching : 1;                      // 6 BitPosition                      
/*0x3D0*/                 UINT8        OwnsVadExclusive : 1;                 // 7 BitPosition                      
                      };                                                                                           
                      struct                                                 // 2 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x3D1*/                 UINT8        SystemPagePriorityActive : 1;         // 0 BitPosition                      
/*0x3D1*/                 UINT8        SystemPagePriority : 3;               // 1 BitPosition                      
                      };                                                                                           
                  };                                                                                               
              };                                                                                                   
/*0x3D4*/     UINT8        CacheManagerActive;                                                                     
/*0x3D5*/     UINT8        DisablePageFaultClustering;                                                             
/*0x3D6*/     UINT8        ActiveFaultCount;                                                                       
/*0x3D7*/     UINT8        LockOrderState;                                                                         
/*0x3D8*/     ULONG32      AlpcMessageId;                                                                          
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x3DC*/         VOID*        AlpcMessage;                                                                        
/*0x3DC*/         ULONG32      AlpcReceiveAttributeSet;                                                            
              };                                                                                                   
/*0x3E0*/     LONG32       ExitStatus;                                                                             
/*0x3E4*/     struct _LIST_ENTRY AlpcWaitListEntry;                          // 2 elements, 0x8 bytes (sizeof)     
/*0x3EC*/     ULONG32      CacheManagerCount;                                                                      
/*0x3F0*/     ULONG32      IoBoostCount;                                                                           
/*0x3F4*/     struct _LIST_ENTRY BoostList;                                  // 2 elements, 0x8 bytes (sizeof)     
/*0x3FC*/     struct _LIST_ENTRY DeboostList;                                // 2 elements, 0x8 bytes (sizeof)     
/*0x404*/     ULONG32      BoostListLock;                                                                          
/*0x408*/     ULONG32      IrpListLock;                                                                            
/*0x40C*/     VOID*        ReservedForSynchTracking;                                                               
/*0x410*/     struct _SINGLE_LIST_ENTRY CmCallbackListHead;                  // 1 elements, 0x4 bytes (sizeof)     
/*0x414*/     struct _GUID* ActivityId;                                                                            
/*0x418*/     struct _SINGLE_LIST_ENTRY SeLearningModeListHead;              // 1 elements, 0x4 bytes (sizeof)     
/*0x41C*/     VOID*        VerifierContext;                                                                        
/*0x420*/     ULONG32      KernelStackReference;                                                                   
/*0x424*/     VOID*        AdjustedClientToken;                                                                    
/*0x428*/     VOID*        WorkingOnBehalfClient;                                                                  
/*0x42C*/     struct _PS_PROPERTY_SET PropertySet;                           // 2 elements, 0xC bytes (sizeof)     
/*0x438*/     VOID*        PicoContext;                                                                            
/*0x43C*/     ULONG32      UserFsBase;                                                                             
/*0x440*/     ULONG32      UserGsBase;                                                                             
/*0x444*/     struct _THREAD_ENERGY_VALUES* EnergyValues;                                                          
/*0x448*/     ULONG32      CmCellReferences;                                                                       
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x44C*/         ULONG32      SelectedCpuSets;                                                                    
/*0x44C*/         ULONG32*     SelectedCpuSetsIndirect;                                                            
              };                                                                                                   
/*0x450*/     struct _EJOB* Silo;                                                                                  
/*0x454*/     UINT8        _PADDING0_[0x4];                                                                        
          }ETHREAD, *PETHREAD;                                                                                     
                                                                                                                   
          typedef struct _ETW_BUFFER_CONTEXT        // 4 elements, 0x4 bytes (sizeof) 
          {                                                                           
              union                                 // 2 elements, 0x2 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x2 bytes (sizeof) 
                  {                                                                   
/*0x000*/             UINT8        ProcessorNumber;                                   
/*0x001*/             UINT8        Alignment;                                         
                  };                                                                  
/*0x000*/         UINT16       ProcessorIndex;                                        
              };                                                                      
/*0x002*/     UINT16       LoggerId;                                                  
          }ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT;                                  
                                                                                      
          typedef struct _EVENT_DATA_DESCRIPTOR // 6 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       Ptr;                                                    
/*0x008*/     ULONG32      Size;                                                   
              union                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                    
/*0x00C*/         ULONG32      Reserved;                                           
                  struct                        // 3 elements, 0x4 bytes (sizeof)  
                  {                                                                
/*0x00C*/             UINT8        Type;                                           
/*0x00D*/             UINT8        Reserved1;                                      
/*0x00E*/             UINT16       Reserved2;                                      
                  };                                                               
              };                                                                   
          }EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR;                                   
                                                                                   
          typedef struct _EVENT_DESCRIPTOR // 7 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT16       Id;                                                
/*0x002*/     UINT8        Version;                                           
/*0x003*/     UINT8        Channel;                                           
/*0x004*/     UINT8        Level;                                             
/*0x005*/     UINT8        Opcode;                                            
/*0x006*/     UINT16       Task;                                              
/*0x008*/     UINT64       Keyword;                                           
          }EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR;                                   
                                                                              
          typedef struct _EVENT_HEADER                  // 13 elements, 0x50 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT16       Size;                                                            
/*0x002*/     UINT16       HeaderType;                                                      
/*0x004*/     UINT16       Flags;                                                           
/*0x006*/     UINT16       EventProperty;                                                   
/*0x008*/     ULONG32      ThreadId;                                                        
/*0x00C*/     ULONG32      ProcessId;                                                       
/*0x010*/     union _LARGE_INTEGER TimeStamp;           // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _GUID ProviderId;                  // 4 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _EVENT_DESCRIPTOR EventDescriptor; // 7 elements, 0x10 bytes (sizeof)  
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
                  struct                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x038*/             ULONG32      KernelTime;                                              
/*0x03C*/             ULONG32      UserTime;                                                
                  };                                                                        
/*0x038*/         UINT64       ProcessorTime;                                               
              };                                                                            
/*0x040*/     struct _GUID ActivityId;                  // 4 elements, 0x10 bytes (sizeof)  
          }EVENT_HEADER, *PEVENT_HEADER;                                                    
                                                                                            
          typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Reserved1;                                                        
/*0x002*/     UINT16       ExtType;                                                          
              struct                                      // 2 elements, 0x2 bytes (sizeof)  
              {                                                                              
/*0x004*/         UINT16       Linkage : 1;               // 0 BitPosition                   
/*0x004*/         UINT16       Reserved2 : 15;            // 1 BitPosition                   
              };                                                                             
/*0x006*/     UINT16       DataSize;                                                         
/*0x008*/     UINT64       DataPtr;                                                          
          }EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM;                                   
                                                                                             
          typedef struct _EVENT_RECORD                               // 7 elements, 0x68 bytes (sizeof)  
          {                                                                                              
/*0x000*/     struct _EVENT_HEADER EventHeader;                      // 13 elements, 0x50 bytes (sizeof) 
/*0x050*/     struct _ETW_BUFFER_CONTEXT BufferContext;              // 4 elements, 0x4 bytes (sizeof)   
/*0x054*/     UINT16       ExtendedDataCount;                                                            
/*0x056*/     UINT16       UserDataLength;                                                               
/*0x058*/     struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;                                     
/*0x05C*/     VOID*        UserData;                                                                     
/*0x060*/     VOID*        UserContext;                                                                  
/*0x064*/     UINT8        _PADDING0_[0x4];                                                              
          }EVENT_RECORD, *PEVENT_RECORD;                                                                 
                                                                                                         
          typedef struct _EXCEPTION_POINTERS             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _EXCEPTION_RECORD* ExceptionRecord;                                   
/*0x004*/     struct _CONTEXT* ContextRecord;                                              
          }EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;                                       
                                                                                           
          typedef struct _EXCEPTION_RECORD               // 6 elements, 0x50 bytes (sizeof) 
          {                                                                                 
/*0x000*/     LONG32       ExceptionCode;                                                   
/*0x004*/     ULONG32      ExceptionFlags;                                                  
/*0x008*/     struct _EXCEPTION_RECORD* ExceptionRecord;                                    
/*0x00C*/     VOID*        ExceptionAddress;                                                
/*0x010*/     ULONG32      NumberParameters;                                                
/*0x014*/     ULONG32      ExceptionInformation[15];                                        
          }EXCEPTION_RECORD, *PEXCEPTION_RECORD;                                            
                                                                                            
          typedef struct _EXCEPTION_REGISTRATION_RECORD    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _EXCEPTION_REGISTRATION_RECORD* Next;                                   
/*0x004*/     FUNCT_015F_015E_Handler* Handler;                                              
          }EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;                                  
                                                                                             
          typedef struct _EXHANDLE                   // 4 elements, 0x4 bytes (sizeof) 
          {                                                                            
              union                                  // 3 elements, 0x4 bytes (sizeof) 
              {                                                                        
                  struct                             // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                    
/*0x000*/             ULONG32      TagBits : 2;      // 0 BitPosition                  
/*0x000*/             ULONG32      Index : 30;       // 2 BitPosition                  
                  };                                                                   
/*0x000*/         VOID*        GenericHandleOverlay;                                   
/*0x000*/         ULONG32      Value;                                                  
              };                                                                       
          }EXHANDLE, *PEXHANDLE;                                                       
                                                                                       
          typedef struct _EXT_DELETE_PARAMETERS                                                                                                      // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                                                                                                             
/*0x000*/     ULONG32      Version;                                                                                                                                                     
/*0x004*/     ULONG32      Reserved;                                                                                                                                                    
/*0x008*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* DeleteCallback;                                    
/*0x00C*/     VOID*        DeleteContext;                                                                                                                                               
          }EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS;                                                                                                                              
                                                                                                                                                                                        
          typedef struct _EXT_SET_PARAMETERS_V0 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Version;                                                
/*0x004*/     ULONG32      Reserved;                                               
/*0x008*/     INT64        NoWakeTolerance;                                        
          }EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0;                                   
                                                                                   
          typedef struct _FAST_IO_DISPATCH                                                                                // 28 elements, 0x70 bytes (sizeof) 
          {                                                                                                                                                   
/*0x000*/     ULONG32      SizeOfFastIoDispatch;                                                                                                              
/*0x004*/     FUNCT_007F_0CA1_FastIoCheckIfPossible* FastIoCheckIfPossible;                                                                                   
/*0x008*/     FUNCT_007F_0CAC_FastIoRead_FastIoWrite* FastIoRead;                                                                                             
/*0x00C*/     FUNCT_007F_0CAC_FastIoRead_FastIoWrite* FastIoWrite;                                                                                            
/*0x010*/     FUNCT_007F_0CB6_FastIoQueryBasicInfo* FastIoQueryBasicInfo;                                                                                     
/*0x014*/     FUNCT_007F_0CC4_FastIoQueryStandardInfo* FastIoQueryStandardInfo;                                                                               
/*0x018*/     FUNCT_007F_0CD2_FastIoLock* FastIoLock;                                                                                                         
/*0x01C*/     FUNCT_007F_0F01_FastIoUnlockSingle* FastIoUnlockSingle;                                                                                         
/*0x020*/     FUNCT_007F_0F0A_FastIoUnlockAll* FastIoUnlockAll;                                                                                               
/*0x024*/     FUNCT_007F_0F10_FastIoUnlockAllByKey* FastIoUnlockAllByKey;                                                                                     
/*0x028*/     FUNCT_007F_0F17_FastIoDeviceControl* FastIoDeviceControl;                                                                                       
/*0x02C*/     FUNCT_00C6_0F22_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* AcquireFileForNtCreateSection;                                     
/*0x030*/     FUNCT_00C6_0F22_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* ReleaseFileForNtCreateSection;                                     
/*0x034*/     FUNCT_00C6_0F25_FastIoDetachDevice* FastIoDetachDevice;                                                                                         
/*0x038*/     FUNCT_007F_0F29_FastIoQueryNetworkOpenInfo* FastIoQueryNetworkOpenInfo;                                                                         
/*0x03C*/     FUNCT_0076_0F39_AcquireForModWrite* AcquireForModWrite;                                                                                         
/*0x040*/     FUNCT_007F_0F3F_MdlRead_PrepareMdlWrite* MdlRead;                                                                                               
/*0x044*/     FUNCT_007F_0F53_MdlReadComplete_MdlReadCompleteCompressed* MdlReadComplete;                                                                     
/*0x048*/     FUNCT_007F_0F3F_MdlRead_PrepareMdlWrite* PrepareMdlWrite;                                                                                       
/*0x04C*/     FUNCT_007F_0F58_MdlWriteComplete_MdlWriteCompleteCompressed* MdlWriteComplete;                                                                  
/*0x050*/     FUNCT_007F_0F5E_FastIoReadCompressed_FastIoWriteCompressed* FastIoReadCompressed;                                                               
/*0x054*/     FUNCT_007F_0F5E_FastIoReadCompressed_FastIoWriteCompressed* FastIoWriteCompressed;                                                              
/*0x058*/     FUNCT_007F_0F53_MdlReadComplete_MdlReadCompleteCompressed* MdlReadCompleteCompressed;                                                           
/*0x05C*/     FUNCT_007F_0F58_MdlWriteComplete_MdlWriteCompleteCompressed* MdlWriteCompleteCompressed;                                                        
/*0x060*/     FUNCT_007F_0F73_FastIoQueryOpen* FastIoQueryOpen;                                                                                               
/*0x064*/     FUNCT_0076_124D_ReleaseForModWrite* ReleaseForModWrite;                                                                                         
/*0x068*/     FUNCT_0076_1252_AcquireForCcFlush_ReleaseForCcFlush* AcquireForCcFlush;                                                                         
/*0x06C*/     FUNCT_0076_1252_AcquireForCcFlush_ReleaseForCcFlush* ReleaseForCcFlush;                                                                         
          }FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;                                                                                                              
                                                                                                                                                              
          typedef struct _FAST_MUTEX   // 5 elements, 0x20 bytes (sizeof) 
          {                                                               
/*0x000*/     LONG32       Count;                                         
/*0x004*/     VOID*        Owner;                                         
/*0x008*/     ULONG32      Contention;                                    
/*0x00C*/     struct _KEVENT Event;    // 1 elements, 0x10 bytes (sizeof) 
/*0x01C*/     ULONG32      OldIrql;                                       
          }FAST_MUTEX, *PFAST_MUTEX;                                      
                                                                          
          typedef struct _FILE_BASIC_INFORMATION   // 5 elements, 0x28 bytes (sizeof) 
          {                                                                           
/*0x000*/     union _LARGE_INTEGER CreationTime;   // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime; // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;  // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     ULONG32      FileAttributes;                                            
/*0x024*/     UINT8        _PADDING0_[0x4];                                           
          }FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;                                   
                                                                                      
          typedef struct _SID_IDENTIFIER_AUTHORITY // 1 elements, 0x6 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Value[6];                                                 
          }SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;                                  
                                                                                     
          typedef struct _SID                                       // 4 elements, 0xC bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT8        Revision;                                                                  
/*0x001*/     UINT8        SubAuthorityCount;                                                         
/*0x002*/     struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority; // 1 elements, 0x6 bytes (sizeof) 
/*0x008*/     ULONG32      SubAuthority[1];                                                           
          }SID, *PSID;                                                                                
                                                                                                      
          typedef struct _FILE_GET_QUOTA_INFORMATION // 3 elements, 0x14 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      NextEntryOffset;                                             
/*0x004*/     ULONG32      SidLength;                                                   
/*0x008*/     struct _SID  Sid;                      // 4 elements, 0xC bytes (sizeof)  
          }FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION;                                   
                                                                                        
          typedef struct _FILE_NETWORK_OPEN_INFORMATION // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                
/*0x000*/     union _LARGE_INTEGER CreationTime;        // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;       // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;          // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     union _LARGE_INTEGER AllocationSize;      // 4 elements, 0x8 bytes (sizeof)  
/*0x028*/     union _LARGE_INTEGER EndOfFile;           // 4 elements, 0x8 bytes (sizeof)  
/*0x030*/     ULONG32      FileAttributes;                                                 
/*0x034*/     UINT8        _PADDING0_[0x4];                                                
          }FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;                                   
                                                                                           
          typedef struct _FILE_OBJECT                                // 30 elements, 0x80 bytes (sizeof) 
          {                                                                                              
/*0x000*/     INT16        Type;                                                                         
/*0x002*/     INT16        Size;                                                                         
/*0x004*/     struct _DEVICE_OBJECT* DeviceObject;                                                       
/*0x008*/     struct _VPB* Vpb;                                                                          
/*0x00C*/     VOID*        FsContext;                                                                    
/*0x010*/     VOID*        FsContext2;                                                                   
/*0x014*/     struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;                                     
/*0x018*/     VOID*        PrivateCacheMap;                                                              
/*0x01C*/     LONG32       FinalStatus;                                                                  
/*0x020*/     struct _FILE_OBJECT* RelatedFileObject;                                                    
/*0x024*/     UINT8        LockOperation;                                                                
/*0x025*/     UINT8        DeletePending;                                                                
/*0x026*/     UINT8        ReadAccess;                                                                   
/*0x027*/     UINT8        WriteAccess;                                                                  
/*0x028*/     UINT8        DeleteAccess;                                                                 
/*0x029*/     UINT8        SharedRead;                                                                   
/*0x02A*/     UINT8        SharedWrite;                                                                  
/*0x02B*/     UINT8        SharedDelete;                                                                 
/*0x02C*/     ULONG32      Flags;                                                                        
/*0x030*/     struct _UNICODE_STRING FileName;                       // 3 elements, 0x8 bytes (sizeof)   
/*0x038*/     union _LARGE_INTEGER CurrentByteOffset;                // 4 elements, 0x8 bytes (sizeof)   
/*0x040*/     ULONG32      Waiters;                                                                      
/*0x044*/     ULONG32      Busy;                                                                         
/*0x048*/     VOID*        LastLock;                                                                     
/*0x04C*/     struct _KEVENT Lock;                                   // 1 elements, 0x10 bytes (sizeof)  
/*0x05C*/     struct _KEVENT Event;                                  // 1 elements, 0x10 bytes (sizeof)  
/*0x06C*/     struct _IO_COMPLETION_CONTEXT* CompletionContext;                                          
/*0x070*/     ULONG32      IrpListLock;                                                                  
/*0x074*/     struct _LIST_ENTRY IrpList;                            // 2 elements, 0x8 bytes (sizeof)   
/*0x07C*/     VOID*        FileObjectExtension;                                                          
          }FILE_OBJECT, *PFILE_OBJECT;                                                                   
                                                                                                         
          typedef struct _FILE_STANDARD_INFORMATION // 5 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     union _LARGE_INTEGER AllocationSize;  // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER EndOfFile;       // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      NumberOfLinks;                                              
/*0x014*/     UINT8        DeletePending;                                              
/*0x015*/     UINT8        Directory;                                                  
/*0x016*/     UINT8        _PADDING0_[0x2];                                            
          }FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;                                   
                                                                                       
          typedef struct _FILESYSTEM_DISK_COUNTERS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       FsBytesRead;                                               
/*0x008*/     UINT64       FsBytesWritten;                                            
          }FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS;                                   
                                                                                      
typedef struct _FLS_CALLBACK_INFO // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}FLS_CALLBACK_INFO, *PFLS_CALLBACK_INFO;                                  
                                                                    
          typedef union _FS_FILTER_PARAMETERS                                   // 5 elements, 0x14 bytes (sizeof) 
          {                                                                                                        
              struct                                                            // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                                    
/*0x000*/         union _LARGE_INTEGER* EndingOffset;                                                              
/*0x004*/         struct _ERESOURCE** ResourceToRelease;                                                           
              }AcquireForModifiedPageWriter;                                                                       
              struct                                                            // 1 elements, 0x4 bytes (sizeof)  
              {                                                                                                    
/*0x000*/         struct _ERESOURCE* ResourceToRelease;                                                            
              }ReleaseForModifiedPageWriter;                                                                       
              struct                                                            // 3 elements, 0xC bytes (sizeof)  
              {                                                                                                    
/*0x000*/         enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;                                                      
/*0x004*/         ULONG32      PageProtection;                                                                     
/*0x008*/         struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;                                        
              }AcquireForSectionSynchronization;                                                                   
              struct                                                            // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                                    
/*0x000*/         enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;                                    
/*0x004*/         UINT8        SafeToRecurse;                                                                      
/*0x005*/         UINT8        _PADDING0_[0x3];                                                                    
              }NotifyStreamFileObject;                                                                             
              struct                                                            // 5 elements, 0x14 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         VOID*        Argument1;                                                                          
/*0x004*/         VOID*        Argument2;                                                                          
/*0x008*/         VOID*        Argument3;                                                                          
/*0x00C*/         VOID*        Argument4;                                                                          
/*0x010*/         VOID*        Argument5;                                                                          
              }Others;                                                                                             
          }FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS;                                                           
                                                                                                                   
          typedef struct _FS_FILTER_CALLBACK_DATA      // 6 elements, 0x24 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      SizeOfFsFilterCallbackData;                                    
/*0x004*/     UINT8        Operation;                                                     
/*0x005*/     UINT8        Reserved;                                                      
/*0x006*/     UINT8        _PADDING0_[0x2];                                               
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                        
/*0x00C*/     struct _FILE_OBJECT* FileObject;                                            
/*0x010*/     union _FS_FILTER_PARAMETERS Parameters;  // 5 elements, 0x14 bytes (sizeof) 
          }FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA;                                   
                                                                                          
          typedef struct _FS_FILTER_CALLBACKS                                                                                                                                                                                                                // 14 elements, 0x38 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                      
/*0x000*/     ULONG32      SizeOfFsFilterCallbacks;                                                                                                                                                                                                                                              
/*0x004*/     ULONG32      Reserved;                                                                                                                                                                                                                                                             
/*0x008*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreAcquireForSectionSynchronization;                                            
/*0x00C*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostAcquireForSectionSynchronization;                                     
/*0x010*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreReleaseForSectionSynchronization;                                            
/*0x014*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostReleaseForSectionSynchronization;                                     
/*0x018*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreAcquireForCcFlush;                                                           
/*0x01C*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostAcquireForCcFlush;                                                    
/*0x020*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreReleaseForCcFlush;                                                           
/*0x024*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostReleaseForCcFlush;                                                    
/*0x028*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreAcquireForModifiedPageWriter;                                                
/*0x02C*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostAcquireForModifiedPageWriter;                                         
/*0x030*/     FUNCT_0076_0BFB_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter* PreReleaseForModifiedPageWriter;                                                
/*0x034*/     FUNCT_00C6_0C7D_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter* PostReleaseForModifiedPageWriter;                                         
          }FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS;                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                 
          typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      StructureSize;                                                  
/*0x004*/     ULONG32      SizeReturned;                                                   
/*0x008*/     ULONG32      Flags;                                                          
/*0x00C*/     ULONG32      DesiredReadAlignment;                                           
          }FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT;                                   
                                                                                           
          typedef struct _GDI_TEB_BATCH                 // 4 elements, 0x4E0 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x004*/     ULONG32      HDC;                                                             
/*0x008*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH, *PGDI_TEB_BATCH;                                                  
                                                                                            
          typedef struct _GDI_TEB_BATCH32               // 4 elements, 0x4E0 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x004*/     ULONG32      HDC;                                                             
/*0x008*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH32, *PGDI_TEB_BATCH32;                                              
                                                                                            
          typedef struct _GDI_TEB_BATCH64               // 4 elements, 0x4E8 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x008*/     UINT64       HDC;                                                             
/*0x010*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH64, *PGDI_TEB_BATCH64;                                              
                                                                                            
          typedef union _SLIST_HEADER             // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Alignment;                                               
              struct                              // 3 elements, 0x8 bytes (sizeof) 
              {                                                                     
/*0x000*/         struct _SINGLE_LIST_ENTRY Next; // 1 elements, 0x4 bytes (sizeof) 
/*0x004*/         UINT16       Depth;                                               
/*0x006*/         UINT16       CpuId;                                               
              };                                                                    
          }SLIST_HEADER, *PSLIST_HEADER;                                            
                                                                                    
          typedef struct _GENERAL_LOOKASIDE                                                                                                    // 22 elements, 0x80 bytes (sizeof) 
          {                                                                                                                                                                        
              union                                                                                                                            // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x000*/         union _SLIST_HEADER ListHead;                                                                                                // 4 elements, 0x8 bytes (sizeof)   
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead;                                                                                    // 1 elements, 0x4 bytes (sizeof)   
              };                                                                                                                                                                   
/*0x008*/     UINT16       Depth;                                                                                                                                                  
/*0x00A*/     UINT16       MaximumDepth;                                                                                                                                           
/*0x00C*/     ULONG32      TotalAllocates;                                                                                                                                         
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x010*/         ULONG32      AllocateMisses;                                                                                                                                     
/*0x010*/         ULONG32      AllocateHits;                                                                                                                                       
              };                                                                                                                                                                   
/*0x014*/     ULONG32      TotalFrees;                                                                                                                                             
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x018*/         ULONG32      FreeMisses;                                                                                                                                         
/*0x018*/         ULONG32      FreeHits;                                                                                                                                           
              };                                                                                                                                                                   
/*0x01C*/     enum _POOL_TYPE Type;                                                                                                                                                
/*0x020*/     ULONG32      Tag;                                                                                                                                                    
/*0x024*/     ULONG32      Size;                                                                                                                                                   
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x028*/         FUNCT_00C9_0747_AllocateEx* AllocateEx;                                                                                                                          
/*0x028*/         FUNCT_00C9_0751_Allocate* Allocate;                                                                                                                              
              };                                                                                                                                                                   
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x02C*/         FUNCT_00C6_0756_FreeEx* FreeEx;                                                                                                                                  
/*0x02C*/         FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* Free;                                     
              };                                                                                                                                                                   
/*0x030*/     struct _LIST_ENTRY ListEntry;                                                                                                    // 2 elements, 0x8 bytes (sizeof)   
/*0x038*/     ULONG32      LastTotalAllocates;                                                                                                                                     
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x03C*/         ULONG32      LastAllocateMisses;                                                                                                                                 
/*0x03C*/         ULONG32      LastAllocateHits;                                                                                                                                   
              };                                                                                                                                                                   
/*0x040*/     ULONG32      Future[2];                                                                                                                                              
/*0x048*/     UINT8        _PADDING0_[0x38];                                                                                                                                       
          }GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;                                                                                                                                 
                                                                                                                                                                                   
          typedef struct _GENERAL_LOOKASIDE_POOL                                                                                               // 22 elements, 0x48 bytes (sizeof) 
          {                                                                                                                                                                        
              union                                                                                                                            // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x000*/         union _SLIST_HEADER ListHead;                                                                                                // 4 elements, 0x8 bytes (sizeof)   
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead;                                                                                    // 1 elements, 0x4 bytes (sizeof)   
              };                                                                                                                                                                   
/*0x008*/     UINT16       Depth;                                                                                                                                                  
/*0x00A*/     UINT16       MaximumDepth;                                                                                                                                           
/*0x00C*/     ULONG32      TotalAllocates;                                                                                                                                         
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x010*/         ULONG32      AllocateMisses;                                                                                                                                     
/*0x010*/         ULONG32      AllocateHits;                                                                                                                                       
              };                                                                                                                                                                   
/*0x014*/     ULONG32      TotalFrees;                                                                                                                                             
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x018*/         ULONG32      FreeMisses;                                                                                                                                         
/*0x018*/         ULONG32      FreeHits;                                                                                                                                           
              };                                                                                                                                                                   
/*0x01C*/     enum _POOL_TYPE Type;                                                                                                                                                
/*0x020*/     ULONG32      Tag;                                                                                                                                                    
/*0x024*/     ULONG32      Size;                                                                                                                                                   
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x028*/         FUNCT_00C9_0747_AllocateEx* AllocateEx;                                                                                                                          
/*0x028*/         FUNCT_00C9_0751_Allocate* Allocate;                                                                                                                              
              };                                                                                                                                                                   
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x02C*/         FUNCT_00C6_0756_FreeEx* FreeEx;                                                                                                                                  
/*0x02C*/         FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* Free;                                     
              };                                                                                                                                                                   
/*0x030*/     struct _LIST_ENTRY ListEntry;                                                                                                    // 2 elements, 0x8 bytes (sizeof)   
/*0x038*/     ULONG32      LastTotalAllocates;                                                                                                                                     
              union                                                                                                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                    
/*0x03C*/         ULONG32      LastAllocateMisses;                                                                                                                                 
/*0x03C*/         ULONG32      LastAllocateHits;                                                                                                                                   
              };                                                                                                                                                                   
/*0x040*/     ULONG32      Future[2];                                                                                                                                              
          }GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;                                                                                                                       
                                                                                                                                                                                   
          typedef struct _HANDLE_TABLE_FREE_LIST               // 6 elements, 0x34 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _EX_PUSH_LOCK FreeListLock;               // 7 elements, 0x4 bytes (sizeof)  
/*0x004*/     union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;                                    
/*0x008*/     union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;                                     
/*0x00C*/     LONG32       HandleCount;                                                           
/*0x010*/     ULONG32      HighWaterMark;                                                         
/*0x014*/     ULONG32      Reserved[8];                                                           
          }HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST;                                      
                                                                                                  
          typedef struct _HANDLE_TABLE                                       // 17 elements, 0x5C bytes (sizeof) 
          {                                                                                                      
/*0x000*/     ULONG32      NextHandleNeedingPool;                                                                
/*0x004*/     LONG32       ExtraInfoPages;                                                                       
/*0x008*/     ULONG32      TableCode;                                                                            
/*0x00C*/     struct _EPROCESS* QuotaProcess;                                                                    
/*0x010*/     struct _LIST_ENTRY HandleTableList;                            // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     ULONG32      UniqueProcessId;                                                                      
              union                                                          // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                  
/*0x01C*/         ULONG32      Flags;                                                                            
                  struct                                                     // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                                              
/*0x01C*/             UINT8        StrictFIFO : 1;                           // 0 BitPosition                    
/*0x01C*/             UINT8        EnableHandleExceptions : 1;               // 1 BitPosition                    
/*0x01C*/             UINT8        Rundown : 1;                              // 2 BitPosition                    
/*0x01C*/             UINT8        Duplicated : 1;                           // 3 BitPosition                    
/*0x01C*/             UINT8        RaiseUMExceptionOnInvalidHandleClose : 1; // 4 BitPosition                    
                  };                                                                                             
              };                                                                                                 
/*0x020*/     struct _EX_PUSH_LOCK HandleContentionEvent;                    // 7 elements, 0x4 bytes (sizeof)   
/*0x024*/     struct _EX_PUSH_LOCK HandleTableLock;                          // 7 elements, 0x4 bytes (sizeof)   
              union                                                          // 2 elements, 0x34 bytes (sizeof)  
              {                                                                                                  
/*0x028*/         struct _HANDLE_TABLE_FREE_LIST FreeLists[1];                                                   
                  struct                                                     // 2 elements, 0x34 bytes (sizeof)  
                  {                                                                                              
/*0x028*/             UINT8        ActualEntry[20];                                                              
/*0x03C*/             struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;                                                
/*0x040*/             UINT8        _PADDING0_[0x1C];                                                             
                  };                                                                                             
              };                                                                                                 
          }HANDLE_TABLE, *PHANDLE_TABLE;                                                                         
                                                                                                                 
          typedef union _HANDLE_TABLE_ENTRY                           // 14 elements, 0x8 bytes (sizeof) 
          {                                                                                              
/*0x000*/     LONG32       VolatileLowValue;                                                             
/*0x000*/     LONG32       LowValue;                                                                     
              struct                                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                          
/*0x000*/         struct _HANDLE_TABLE_ENTRY_INFO* InfoTable;                                            
                  union                                               // 3 elements, 0x4 bytes (sizeof)  
                  {                                                                                      
/*0x004*/             LONG32       HighValue;                                                            
/*0x004*/             union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;                                    
/*0x004*/             struct _EXHANDLE LeafHandleValue;               // 4 elements, 0x4 bytes (sizeof)  
                  };                                                                                     
              };                                                                                         
              struct                                                  // 3 elements, 0x4 bytes (sizeof)  
              {                                                                                          
/*0x000*/         ULONG32      Unlocked : 1;                          // 0 BitPosition                   
/*0x000*/         ULONG32      Attributes : 2;                        // 1 BitPosition                   
/*0x000*/         ULONG32      ObjectPointerBits : 29;                // 3 BitPosition                   
              };                                                                                         
/*0x004*/     LONG32       RefCountField;                                                                
              struct                                                  // 4 elements, 0x4 bytes (sizeof)  
              {                                                                                          
/*0x004*/         ULONG32      GrantedAccessBits : 25;                // 0 BitPosition                   
/*0x004*/         ULONG32      ProtectFromClose : 1;                  // 25 BitPosition                  
/*0x004*/         ULONG32      NoRightsUpgrade : 1;                   // 26 BitPosition                  
/*0x004*/         ULONG32      RefCnt : 5;                            // 27 BitPosition                  
              };                                                                                         
          }HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY;                                                     
                                                                                                         
          typedef struct _HANDLE_TABLE_ENTRY_INFO // 1 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      AuditMask;                                               
          }HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO;                                  
                                                                                    
          typedef struct _HANDLE_TRACE_DB_ENTRY // 4 elements, 0x50 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _CLIENT_ID ClientId;       // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     VOID*        Handle;                                                 
/*0x00C*/     ULONG32      Type;                                                   
/*0x010*/     VOID*        StackTrace[16];                                         
          }HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY;                                   
                                                                                   
          typedef struct _HANDLE_TRACE_DEBUG_INFO       // 6 elements, 0x80 bytes (sizeof) 
          {                                                                                
/*0x000*/     LONG32       RefCount;                                                       
/*0x004*/     ULONG32      TableSize;                                                      
/*0x008*/     ULONG32      BitMaskFlags;                                                   
/*0x00C*/     struct _FAST_MUTEX CloseCompactionLock;   // 5 elements, 0x20 bytes (sizeof) 
/*0x02C*/     ULONG32      CurrentStackIndex;                                              
/*0x030*/     struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];                                    
          }HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO;                                   
                                                                                           
          typedef struct _HEAP_UNPACKED_ENTRY     // 8 elements, 0x8 bytes (sizeof) 
          {                                                                         
              union                               // 2 elements, 0x4 bytes (sizeof) 
              {                                                                     
                  struct                          // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                 
/*0x000*/             UINT16       Size;                                            
/*0x002*/             UINT8        Flags;                                           
/*0x003*/             UINT8        SmallTagIndex;                                   
                  };                                                                
/*0x000*/         ULONG32      SubSegmentCode;                                      
              };                                                                    
/*0x004*/     UINT16       PreviousSize;                                            
              union                               // 2 elements, 0x1 bytes (sizeof) 
              {                                                                     
/*0x006*/         UINT8        SegmentOffset;                                       
/*0x006*/         UINT8        LFHFlags;                                            
              };                                                                    
/*0x007*/     UINT8        UnusedBytes;                                             
          }HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY;                                  
                                                                                    
          typedef struct _HEAP_EXTENDED_ENTRY      // 6 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 2 elements, 0x4 bytes (sizeof) 
              {                                                                      
                  struct                           // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT16       FunctionIndex;                                    
/*0x002*/             UINT16       ContextValue;                                     
                  };                                                                 
/*0x000*/         ULONG32      InterceptorValue;                                     
              };                                                                     
/*0x004*/     UINT16       UnusedBytesLength;                                        
/*0x006*/     UINT8        EntryOffset;                                              
/*0x007*/     UINT8        ExtendedBlockSignature;                                   
          }HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY;                                  
                                                                                     
          typedef struct _HEAP_ENTRY                         // 22 elements, 0x8 bytes (sizeof) 
          {                                                                                     
              union                                          // 8 elements, 0x8 bytes (sizeof)  
              {                                                                                 
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry; // 8 elements, 0x8 bytes (sizeof)  
                  struct                                     // 3 elements, 0x8 bytes (sizeof)  
                  {                                                                             
/*0x000*/             UINT16       Size;                                                        
/*0x002*/             UINT8        Flags;                                                       
/*0x003*/             UINT8        SmallTagIndex;                                               
/*0x004*/             UINT8        _PADDING0_[0x4];                                             
                  };                                                                            
                  struct                                     // 4 elements, 0x8 bytes (sizeof)  
                  {                                                                             
/*0x000*/             ULONG32      SubSegmentCode;                                              
/*0x004*/             UINT16       PreviousSize;                                                
                      union                                  // 2 elements, 0x1 bytes (sizeof)  
                      {                                                                         
/*0x006*/                 UINT8        SegmentOffset;                                           
/*0x006*/                 UINT8        LFHFlags;                                                
                      };                                                                        
/*0x007*/             UINT8        UnusedBytes;                                                 
                  };                                                                            
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry; // 6 elements, 0x8 bytes (sizeof)  
                  struct                                     // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                             
/*0x000*/             UINT16       FunctionIndex;                                               
/*0x002*/             UINT16       ContextValue;                                                
/*0x004*/             UINT8        _PADDING1_[0x4];                                             
                  };                                                                            
                  struct                                     // 4 elements, 0x8 bytes (sizeof)  
                  {                                                                             
/*0x000*/             ULONG32      InterceptorValue;                                            
/*0x004*/             UINT16       UnusedBytesLength;                                           
/*0x006*/             UINT8        EntryOffset;                                                 
/*0x007*/             UINT8        ExtendedBlockSignature;                                      
                  };                                                                            
                  struct                                     // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                             
/*0x000*/             ULONG32      Code1;                                                       
                      union                                  // 2 elements, 0x4 bytes (sizeof)  
                      {                                                                         
                          struct                             // 3 elements, 0x4 bytes (sizeof)  
                          {                                                                     
/*0x004*/                     UINT16       Code2;                                               
/*0x006*/                     UINT8        Code3;                                               
/*0x007*/                     UINT8        Code4;                                               
                          };                                                                    
/*0x004*/                 ULONG32      Code234;                                                 
                      };                                                                        
                  };                                                                            
/*0x000*/         UINT64       AgregateCode;                                                    
              };                                                                                
          }HEAP_ENTRY, *PHEAP_ENTRY;                                                            
                                                                                                
          typedef struct _HEAP_SEGMENT                     // 14 elements, 0x40 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _HEAP_ENTRY Entry;                    // 22 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      SegmentSignature;                                                   
/*0x00C*/     ULONG32      SegmentFlags;                                                       
/*0x010*/     struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _HEAP* Heap;                                                              
/*0x01C*/     VOID*        BaseAddress;                                                        
/*0x020*/     ULONG32      NumberOfPages;                                                      
/*0x024*/     struct _HEAP_ENTRY* FirstEntry;                                                  
/*0x028*/     struct _HEAP_ENTRY* LastValidEntry;                                              
/*0x02C*/     ULONG32      NumberOfUnCommittedPages;                                           
/*0x030*/     ULONG32      NumberOfUnCommittedRanges;                                          
/*0x034*/     UINT16       SegmentAllocatorBackTraceIndex;                                     
/*0x036*/     UINT16       Reserved;                                                           
/*0x038*/     struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x8 bytes (sizeof)   
          }HEAP_SEGMENT, *PHEAP_SEGMENT;                                                       
                                                                                               
          typedef struct _HEAP_COUNTERS              // 23 elements, 0x5C bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      TotalMemoryReserved;                                          
/*0x004*/     ULONG32      TotalMemoryCommitted;                                         
/*0x008*/     ULONG32      TotalMemoryLargeUCR;                                          
/*0x00C*/     ULONG32      TotalSizeInVirtualBlocks;                                     
/*0x010*/     ULONG32      TotalSegments;                                                
/*0x014*/     ULONG32      TotalUCRs;                                                    
/*0x018*/     ULONG32      CommittOps;                                                   
/*0x01C*/     ULONG32      DeCommitOps;                                                  
/*0x020*/     ULONG32      LockAcquires;                                                 
/*0x024*/     ULONG32      LockCollisions;                                               
/*0x028*/     ULONG32      CommitRate;                                                   
/*0x02C*/     ULONG32      DecommittRate;                                                
/*0x030*/     ULONG32      CommitFailures;                                               
/*0x034*/     ULONG32      InBlockCommitFailures;                                        
/*0x038*/     ULONG32      PollIntervalCounter;                                          
/*0x03C*/     ULONG32      DecommitsSinceLastCheck;                                      
/*0x040*/     ULONG32      HeapPollInterval;                                             
/*0x044*/     ULONG32      AllocAndFreeOps;                                              
/*0x048*/     ULONG32      AllocationIndicesActive;                                      
/*0x04C*/     ULONG32      InBlockDeccommits;                                            
/*0x050*/     ULONG32      InBlockDeccomitSize;                                          
/*0x054*/     ULONG32      HighWatermarkSize;                                            
/*0x058*/     ULONG32      LastPolledSize;                                               
          }HEAP_COUNTERS, *PHEAP_COUNTERS;                                               
                                                                                         
          typedef struct _HEAP_TUNING_PARAMETERS   // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      CommittThresholdShift;                                    
/*0x004*/     ULONG32      MaxPreCommittThreshold;                                   
          }HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS;                                  
                                                                                     
          typedef struct _HEAP                                     // 57 elements, 0x248 bytes (sizeof) 
          {                                                                                             
              union                                                // 2 elements, 0x40 bytes (sizeof)   
              {                                                                                         
/*0x000*/         struct _HEAP_SEGMENT Segment;                    // 14 elements, 0x40 bytes (sizeof)  
                  struct                                           // 14 elements, 0x40 bytes (sizeof)  
                  {                                                                                     
/*0x000*/             struct _HEAP_ENTRY Entry;                    // 22 elements, 0x8 bytes (sizeof)   
/*0x008*/             ULONG32      SegmentSignature;                                                    
/*0x00C*/             ULONG32      SegmentFlags;                                                        
/*0x010*/             struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x8 bytes (sizeof)    
/*0x018*/             struct _HEAP* Heap;                                                               
/*0x01C*/             VOID*        BaseAddress;                                                         
/*0x020*/             ULONG32      NumberOfPages;                                                       
/*0x024*/             struct _HEAP_ENTRY* FirstEntry;                                                   
/*0x028*/             struct _HEAP_ENTRY* LastValidEntry;                                               
/*0x02C*/             ULONG32      NumberOfUnCommittedPages;                                            
/*0x030*/             ULONG32      NumberOfUnCommittedRanges;                                           
/*0x034*/             UINT16       SegmentAllocatorBackTraceIndex;                                      
/*0x036*/             UINT16       Reserved;                                                            
/*0x038*/             struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x8 bytes (sizeof)    
                  };                                                                                    
              };                                                                                        
/*0x040*/     ULONG32      Flags;                                                                       
/*0x044*/     ULONG32      ForceFlags;                                                                  
/*0x048*/     ULONG32      CompatibilityFlags;                                                          
/*0x04C*/     ULONG32      EncodeFlagMask;                                                              
/*0x050*/     struct _HEAP_ENTRY Encoding;                         // 22 elements, 0x8 bytes (sizeof)   
/*0x058*/     ULONG32      Interceptor;                                                                 
/*0x05C*/     ULONG32      VirtualMemoryThreshold;                                                      
/*0x060*/     ULONG32      Signature;                                                                   
/*0x064*/     ULONG32      SegmentReserve;                                                              
/*0x068*/     ULONG32      SegmentCommit;                                                               
/*0x06C*/     ULONG32      DeCommitFreeBlockThreshold;                                                  
/*0x070*/     ULONG32      DeCommitTotalFreeThreshold;                                                  
/*0x074*/     ULONG32      TotalFreeSize;                                                               
/*0x078*/     ULONG32      MaximumAllocationSize;                                                       
/*0x07C*/     UINT16       ProcessHeapsListIndex;                                                       
/*0x07E*/     UINT16       HeaderValidateLength;                                                        
/*0x080*/     VOID*        HeaderValidateCopy;                                                          
/*0x084*/     UINT16       NextAvailableTagIndex;                                                       
/*0x086*/     UINT16       MaximumTagIndex;                                                             
/*0x088*/     struct _HEAP_TAG_ENTRY* TagEntries;                                                       
/*0x08C*/     struct _LIST_ENTRY UCRList;                          // 2 elements, 0x8 bytes (sizeof)    
/*0x094*/     ULONG32      AlignRound;                                                                  
/*0x098*/     ULONG32      AlignMask;                                                                   
/*0x09C*/     struct _LIST_ENTRY VirtualAllocdBlocks;              // 2 elements, 0x8 bytes (sizeof)    
/*0x0A4*/     struct _LIST_ENTRY SegmentList;                      // 2 elements, 0x8 bytes (sizeof)    
/*0x0AC*/     UINT16       AllocatorBackTraceIndex;                                                     
/*0x0AE*/     UINT8        _PADDING0_[0x2];                                                             
/*0x0B0*/     ULONG32      NonDedicatedListLength;                                                      
/*0x0B4*/     VOID*        BlocksIndex;                                                                 
/*0x0B8*/     VOID*        UCRIndex;                                                                    
/*0x0BC*/     struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;                                          
/*0x0C0*/     struct _LIST_ENTRY FreeLists;                        // 2 elements, 0x8 bytes (sizeof)    
/*0x0C8*/     struct _HEAP_LOCK* LockVariable;                                                          
/*0x0CC*/     FUNCT_0076_14FE_CommitRoutine* CommitRoutine;                                             
/*0x0D0*/     VOID*        FrontEndHeap;                                                                
/*0x0D4*/     UINT16       FrontHeapLockCount;                                                          
/*0x0D6*/     UINT8        FrontEndHeapType;                                                            
/*0x0D7*/     UINT8        RequestedFrontEndHeapType;                                                   
/*0x0D8*/     UINT16*      FrontEndHeapUsageData;                                                       
/*0x0DC*/     UINT16       FrontEndHeapMaximumIndex;                                                    
/*0x0DE*/     UINT8        FrontEndHeapStatusBitmap[257];                                               
/*0x1DF*/     UINT8        _PADDING1_[0x1];                                                             
/*0x1E0*/     struct _HEAP_COUNTERS Counters;                      // 23 elements, 0x5C bytes (sizeof)  
/*0x23C*/     struct _HEAP_TUNING_PARAMETERS TuningParameters;     // 2 elements, 0x8 bytes (sizeof)    
/*0x244*/     UINT8        _PADDING2_[0x4];                                                             
          }HEAP, *PHEAP;                                                                                
                                                                                                        
          typedef struct _HEAP_BUCKET               // 5 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT16       BlockUnits;                                                
/*0x002*/     UINT8        SizeIndex;                                                 
              union                                 // 2 elements, 0x1 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x1 bytes (sizeof) 
                  {                                                                   
/*0x003*/             UINT8        UseAffinity : 1; // 0 BitPosition                  
/*0x003*/             UINT8        DebugFlags : 2;  // 1 BitPosition                  
                  };                                                                  
/*0x003*/         UINT8        Flags;                                                 
              };                                                                      
          }HEAP_BUCKET, *PHEAP_BUCKET;                                                
                                                                                      
          typedef union _HEAP_BUCKET_COUNTERS    // 3 elements, 0x8 bytes (sizeof) 
          {                                                                        
              struct                             // 2 elements, 0x8 bytes (sizeof) 
              {                                                                    
/*0x000*/         ULONG32      TotalBlocks;                                        
/*0x004*/         ULONG32      SubSegmentCounts;                                   
              };                                                                   
/*0x000*/     INT64        Aggregate64;                                            
          }HEAP_BUCKET_COUNTERS, *PHEAP_BUCKET_COUNTERS;                                  
                                                                                   
          typedef union _HEAP_BUCKET_RUN_INFO // 3 elements, 0x8 bytes (sizeof) 
          {                                                                     
              struct                          // 2 elements, 0x8 bytes (sizeof) 
              {                                                                 
/*0x000*/         ULONG32      Bucket;                                          
/*0x004*/         ULONG32      RunLength;                                       
              };                                                                
/*0x000*/     INT64        Aggregate64;                                         
          }HEAP_BUCKET_RUN_INFO, *PHEAP_BUCKET_RUN_INFO;                                  
                                                                                
          typedef struct _HEAP_DESCRIPTOR_KEY          // 3 elements, 0x2 bytes (sizeof) 
          {                                                                              
              union                                    // 2 elements, 0x2 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT16       Key;                                                      
                  struct                               // 2 elements, 0x2 bytes (sizeof) 
                  {                                                                      
/*0x000*/             UINT8        EncodedCommitCount;                                   
/*0x001*/             UINT8        PageCount;                                            
                  };                                                                     
              };                                                                         
          }HEAP_DESCRIPTOR_KEY, *PHEAP_DESCRIPTOR_KEY;                                   
                                                                                         
          typedef struct _HEAP_ENTRY_EXTRA                  // 4 elements, 0x8 bytes (sizeof) 
          {                                                                                   
              union                                         // 2 elements, 0x8 bytes (sizeof) 
              {                                                                               
                  struct                                    // 3 elements, 0x8 bytes (sizeof) 
                  {                                                                           
/*0x000*/             UINT16       AllocatorBackTraceIndex;                                   
/*0x002*/             UINT16       TagIndex;                                                  
/*0x004*/             ULONG32      Settable;                                                  
                  };                                                                          
/*0x000*/         UINT64       ZeroInit;                                                      
              };                                                                              
          }HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA;                                              
                                                                                              
          typedef struct _HEAP_FAILURE_INFORMATION      // 17 elements, 0x3D8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      Version;                                                          
/*0x004*/     ULONG32      StructureSize;                                                    
/*0x008*/     enum _HEAP_FAILURE_TYPE FailureType;                                           
/*0x00C*/     VOID*        HeapAddress;                                                      
/*0x010*/     VOID*        Address;                                                          
/*0x014*/     VOID*        Param1;                                                           
/*0x018*/     VOID*        Param2;                                                           
/*0x01C*/     VOID*        Param3;                                                           
/*0x020*/     struct _HEAP_ENTRY* PreviousBlock;                                             
/*0x024*/     struct _HEAP_ENTRY* NextBlock;                                                 
/*0x028*/     struct _HEAP_ENTRY ExpectedEncodedEntry;  // 22 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _HEAP_ENTRY ExpectedDecodedEntry;  // 22 elements, 0x8 bytes (sizeof)   
/*0x038*/     VOID*        StackTrace[32];                                                   
/*0x0B8*/     UINT8        HeapMajorVersion;                                                 
/*0x0B9*/     UINT8        HeapMinorVersion;                                                 
/*0x0BA*/     UINT8        _PADDING0_[0x2];                                                  
/*0x0BC*/     struct _EXCEPTION_RECORD ExceptionRecord; // 6 elements, 0x50 bytes (sizeof)   
/*0x10C*/     struct _CONTEXT ContextRecord;            // 25 elements, 0x2CC bytes (sizeof) 
          }HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION;                                     
                                                                                             
          typedef struct _HEAP_FREE_ENTRY                    // 24 elements, 0x10 bytes (sizeof) 
          {                                                                                      
              union                                          // 9 elements, 0x8 bytes (sizeof)   
              {                                                                                  
/*0x000*/         struct _HEAP_ENTRY HeapEntry;              // 22 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry; // 8 elements, 0x8 bytes (sizeof)   
                  struct                                     // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                              
/*0x000*/             UINT16       Size;                                                         
/*0x002*/             UINT8        Flags;                                                        
/*0x003*/             UINT8        SmallTagIndex;                                                
/*0x004*/             UINT8        _PADDING0_[0x4];                                              
                  };                                                                             
                  struct                                     // 4 elements, 0x8 bytes (sizeof)   
                  {                                                                              
/*0x000*/             ULONG32      SubSegmentCode;                                               
/*0x004*/             UINT16       PreviousSize;                                                 
                      union                                  // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                          
/*0x006*/                 UINT8        SegmentOffset;                                            
/*0x006*/                 UINT8        LFHFlags;                                                 
                      };                                                                         
/*0x007*/             UINT8        UnusedBytes;                                                  
                  };                                                                             
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry; // 6 elements, 0x8 bytes (sizeof)   
                  struct                                     // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                              
/*0x000*/             UINT16       FunctionIndex;                                                
/*0x002*/             UINT16       ContextValue;                                                 
/*0x004*/             UINT8        _PADDING1_[0x4];                                              
                  };                                                                             
                  struct                                     // 4 elements, 0x8 bytes (sizeof)   
                  {                                                                              
/*0x000*/             ULONG32      InterceptorValue;                                             
/*0x004*/             UINT16       UnusedBytesLength;                                            
/*0x006*/             UINT8        EntryOffset;                                                  
/*0x007*/             UINT8        ExtendedBlockSignature;                                       
                  };                                                                             
                  struct                                     // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                              
/*0x000*/             ULONG32      Code1;                                                        
                      union                                  // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                          
                          struct                             // 3 elements, 0x4 bytes (sizeof)   
                          {                                                                      
/*0x004*/                     UINT16       Code2;                                                
/*0x006*/                     UINT8        Code3;                                                
/*0x007*/                     UINT8        Code4;                                                
                          };                                                                     
/*0x004*/                 ULONG32      Code234;                                                  
                      };                                                                         
                  };                                                                             
/*0x000*/         UINT64       AgregateCode;                                                     
              };                                                                                 
/*0x008*/     struct _LIST_ENTRY FreeList;                   // 2 elements, 0x8 bytes (sizeof)   
          }HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY;                                                   
                                                                                                 
          typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS // 3 elements, 0x4 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      SafeInputValidation : 1;   // 0 BitPosition                  
/*0x000*/     ULONG32      Padding : 1;               // 1 BitPosition                  
/*0x000*/     ULONG32      CommitLFHSubsegments : 1;  // 2 BitPosition                  
          }HEAP_GLOBAL_APPCOMPAT_FLAGS, *PHEAP_GLOBAL_APPCOMPAT_FLAGS;                                  
                                                                                        
          typedef struct _HEAP_LARGE_ALLOC_DATA     // 6 elements, 0x14 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _RTL_BALANCED_NODE TreeNode;   // 6 elements, 0xC bytes (sizeof)  
              union                                 // 2 elements, 0x4 bytes (sizeof)  
              {                                                                        
/*0x00C*/         ULONG32      VirtualAddress;                                         
/*0x00C*/         ULONG32      UnusedBytes : 16;    // 0 BitPosition                   
              };                                                                       
              struct                                // 3 elements, 0x4 bytes (sizeof)  
              {                                                                        
/*0x010*/         ULONG32      ExtraPresent : 1;    // 0 BitPosition                   
/*0x010*/         ULONG32      Spare : 11;          // 1 BitPosition                   
/*0x010*/         ULONG32      AllocatedPages : 20; // 12 BitPosition                  
              };                                                                       
          }HEAP_LARGE_ALLOC_DATA, *PHEAP_LARGE_ALLOC_DATA;                                   
                                                                                       
          typedef struct _RTL_SRWLOCK                  // 7 elements, 0x4 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x4 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x4 bytes (sizeof) 
                  {                                                                      
/*0x000*/             ULONG32      Locked : 1;         // 0 BitPosition                  
/*0x000*/             ULONG32      Waiting : 1;        // 1 BitPosition                  
/*0x000*/             ULONG32      Waking : 1;         // 2 BitPosition                  
/*0x000*/             ULONG32      MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             ULONG32      Shared : 28;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         ULONG32      Value;                                                    
/*0x000*/         VOID*        Ptr;                                                      
              };                                                                         
          }RTL_SRWLOCK, *PRTL_SRWLOCK;                                                   
                                                                                         
          typedef struct _HEAP_LFH_SUBSEGMENT_OWNER       // 10 elements, 0x1C bytes (sizeof) 
          {                                                                                   
              struct                                      // 2 elements, 0x1 bytes (sizeof)   
              {                                                                               
/*0x000*/         UINT8        IsBucket : 1;              // 0 BitPosition                    
/*0x000*/         UINT8        Spare0 : 7;                // 1 BitPosition                    
              };                                                                              
/*0x001*/     UINT8        BucketIndex;                                                       
              union                                       // 2 elements, 0x1 bytes (sizeof)   
              {                                                                               
/*0x002*/         UINT8        SlotCount;                                                     
/*0x002*/         UINT8        SlotIndex;                                                     
              };                                                                              
/*0x003*/     UINT8        Spare1;                                                            
/*0x004*/     ULONG32      AvailableSubsegmentCount;                                          
/*0x008*/     struct _RTL_SRWLOCK Lock;                   // 7 elements, 0x4 bytes (sizeof)   
/*0x00C*/     struct _LIST_ENTRY AvailableSubsegmentList; // 2 elements, 0x8 bytes (sizeof)   
/*0x014*/     struct _LIST_ENTRY FullSubsegmentList;      // 2 elements, 0x8 bytes (sizeof)   
          }HEAP_LFH_SUBSEGMENT_OWNER, *PHEAP_LFH_SUBSEGMENT_OWNER;                                    
                                                                                              
          typedef struct _HEAP_LFH_AFFINITY_SLOT       // 1 elements, 0x1C bytes (sizeof)  
          {                                                                                
/*0x000*/     struct _HEAP_LFH_SUBSEGMENT_OWNER State; // 10 elements, 0x1C bytes (sizeof) 
          }HEAP_LFH_AFFINITY_SLOT, *PHEAP_LFH_AFFINITY_SLOT;                                    
                                                                                           
          typedef struct _HEAP_LFH_BUCKET                     // 9 elements, 0x3C bytes (sizeof)  
          {                                                                                       
/*0x000*/     struct _HEAP_LFH_SUBSEGMENT_OWNER State;        // 10 elements, 0x1C bytes (sizeof) 
/*0x01C*/     ULONG32      TotalBlockCount;                                                       
/*0x020*/     ULONG32      TotalSubsegmentCount;                                                  
/*0x024*/     ULONG32      ReciprocalBlockSize;                                                   
/*0x028*/     UINT8        Shift;                                                                 
/*0x029*/     UINT8        _PADDING0_[0x3];                                                       
/*0x02C*/     struct _RTL_SRWLOCK AffinityMappingLock;        // 7 elements, 0x4 bytes (sizeof)   
/*0x030*/     ULONG32      ContentionCount;                                                       
/*0x034*/     UINT8*       ProcAffinityMapping;                                                   
/*0x038*/     struct _HEAP_LFH_AFFINITY_SLOT** AffinitySlots;                                     
          }HEAP_LFH_BUCKET, *PHEAP_LFH_BUCKET;                                                    
                                                                                                  
          typedef struct _HEAP_SUBALLOCATOR_CALLBACKS // 5 elements, 0x14 bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      Allocate;                                                     
/*0x004*/     ULONG32      Free;                                                         
/*0x008*/     ULONG32      Commit;                                                       
/*0x00C*/     ULONG32      Decommit;                                                     
/*0x010*/     ULONG32      ExtendContext;                                                
          }HEAP_SUBALLOCATOR_CALLBACKS, *PHEAP_SUBALLOCATOR_CALLBACKS;                                   
                                                                                         
          typedef struct _HEAP_LFH_SUBSEGMENT_CACHE // 1 elements, 0x38 bytes (sizeof) 
          {                                                                            
/*0x000*/     union _SLIST_HEADER SLists[7];                                           
          }HEAP_LFH_SUBSEGMENT_CACHE, *PHEAP_LFH_SUBSEGMENT_CACHE;                                   
                                                                                       
          typedef struct _HEAP_LFH_CONTEXT                       // 7 elements, 0x268 bytes (sizeof) 
          {                                                                                          
/*0x000*/     VOID*        BackendCtx;                                                               
/*0x004*/     struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;     // 5 elements, 0x14 bytes (sizeof)  
/*0x018*/     struct _RTL_SRWLOCK SubsegmentCreationLock;        // 7 elements, 0x4 bytes (sizeof)   
/*0x01C*/     UINT8        MaxAffinity;                                                              
/*0x01D*/     UINT8        _PADDING0_[0x3];                                                          
/*0x020*/     UINT8*       AffinityModArray;                                                         
/*0x024*/     UINT8        _PADDING1_[0x4];                                                          
/*0x028*/     struct _HEAP_LFH_SUBSEGMENT_CACHE SubsegmentCache; // 1 elements, 0x38 bytes (sizeof)  
/*0x060*/     struct _HEAP_LFH_BUCKET* Buckets[129];                                                 
/*0x264*/     UINT8        _PADDING2_[0x4];                                                          
          }HEAP_LFH_CONTEXT, *PHEAP_LFH_CONTEXT;                                                     
                                                                                                     
          typedef struct _HEAP_LFH_MEM_POLICIES              // 4 elements, 0x4 bytes (sizeof) 
          {                                                                                    
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x000*/             ULONG32      DisableAffinity : 1;      // 0 BitPosition                  
/*0x000*/             ULONG32      SlowSubsegmentGrowth : 1; // 1 BitPosition                  
/*0x000*/             ULONG32      Spare : 30;               // 2 BitPosition                  
                  };                                                                           
/*0x000*/         ULONG32      AllPolicies;                                                    
              };                                                                               
          }HEAP_LFH_MEM_POLICIES, *PHEAP_LFH_MEM_POLICIES;                                     
                                                                                               
          typedef union _HEAP_LFH_ONDEMAND_POINTER       // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                
              struct                                     // 3 elements, 0x2 bytes (sizeof) 
              {                                                                            
/*0x000*/         UINT16       Invalid : 1;              // 0 BitPosition                  
/*0x000*/         UINT16       AllocationInProgress : 1; // 1 BitPosition                  
/*0x000*/         UINT16       Spare0 : 14;              // 2 BitPosition                  
              };                                                                           
/*0x002*/     UINT16       UsageData;                                                      
/*0x000*/     VOID*        AllBits;                                                        
          }HEAP_LFH_ONDEMAND_POINTER, *PHEAP_LFH_ONDEMAND_POINTER;                                  
                                                                                           
          typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE // 3 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 2 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      DelayFree : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      Count : 31;              // 1 BitPosition                  
              };                                                                          
/*0x000*/     VOID*        AllBits;                                                       
          }HEAP_LFH_SUBSEGMENT_DELAY_FREE, *PHEAP_LFH_SUBSEGMENT_DELAY_FREE;                                  
                                                                                          
          typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS // 3 elements, 0x4 bytes (sizeof) 
          {                                                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                 
                  struct                                      // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                             
/*0x000*/             UINT16       BlockSize;                                                   
/*0x002*/             UINT16       FirstBlockOffset;                                            
                  };                                                                            
/*0x000*/         ULONG32      EncodedData;                                                     
              };                                                                                
          }HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, *PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;                                  
                                                                                                
          typedef struct _HEAP_LFH_SUBSEGMENT                           // 17 elements, 0x24 bytes (sizeof) 
          {                                                                                                 
              union                                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                             
/*0x000*/         struct _LIST_ENTRY ListEntry;                         // 2 elements, 0x8 bytes (sizeof)   
/*0x000*/         struct _SINGLE_LIST_ENTRY Link;                       // 1 elements, 0x4 bytes (sizeof)   
              };                                                                                            
              union                                                     // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                             
/*0x008*/         struct _HEAP_LFH_SUBSEGMENT_OWNER* Owner;                                                 
/*0x008*/         union _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;      // 3 elements, 0x4 bytes (sizeof)   
              };                                                                                            
/*0x00C*/     struct _RTL_SRWLOCK CommitLock;                           // 7 elements, 0x4 bytes (sizeof)   
              union                                                     // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                             
                  struct                                                // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                         
/*0x010*/             UINT16       FreeCount;                                                               
/*0x012*/             UINT16       BlockCount;                                                              
                  };                                                                                        
/*0x010*/         INT16        InterlockedShort;                                                            
/*0x010*/         LONG32       InterlockedLong;                                                             
              };                                                                                            
/*0x014*/     UINT16       FreeHint;                                                                        
/*0x016*/     UINT8        Location;                                                                        
/*0x017*/     UINT8        Spare;                                                                           
/*0x018*/     struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets; // 3 elements, 0x4 bytes (sizeof)   
/*0x01C*/     UINT8        CommitUnitShift;                                                                 
/*0x01D*/     UINT8        CommitUnitCount;                                                                 
/*0x01E*/     UINT16       CommitStateOffset;                                                               
/*0x020*/     ULONG32      BlockBitmap[1];                                                                  
          }HEAP_LFH_SUBSEGMENT, *PHEAP_LFH_SUBSEGMENT;                                                      
                                                                                                            
          typedef struct _HEAP_LFH_UNUSED_BYTES_INFO  // 4 elements, 0x2 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x2 bytes (sizeof) 
              {                                                                         
                  struct                              // 3 elements, 0x2 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       UnusedBytes : 14;  // 0 BitPosition                  
/*0x000*/             UINT16       ExtraPresent : 1;  // 14 BitPosition                 
/*0x000*/             UINT16       OneByteUnused : 1; // 15 BitPosition                 
                  };                                                                    
/*0x000*/         UINT8        Bytes[2];                                                
              };                                                                        
          }HEAP_LFH_UNUSED_BYTES_INFO, *PHEAP_LFH_UNUSED_BYTES_INFO;                                  
                                                                                        
          typedef struct _HEAP_LIST_LOOKUP              // 9 elements, 0x24 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _HEAP_LIST_LOOKUP* ExtendedLookup;                                    
/*0x004*/     ULONG32      ArraySize;                                                      
/*0x008*/     ULONG32      ExtraItem;                                                      
/*0x00C*/     ULONG32      ItemCount;                                                      
/*0x010*/     ULONG32      OutOfRangeItems;                                                
/*0x014*/     ULONG32      BaseIndex;                                                      
/*0x018*/     struct _LIST_ENTRY* ListHead;                                                
/*0x01C*/     ULONG32*     ListsInUseUlong;                                                
/*0x020*/     struct _LIST_ENTRY** ListHints;                                              
          }HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP;                                           
                                                                                           
          typedef struct _HEAP_LOCAL_DATA             // 5 elements, 0x18 bytes (sizeof) 
          {                                                                              
/*0x000*/     union _SLIST_HEADER DeletedSubSegments; // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LFH_BLOCK_ZONE* CrtZone;                                           
/*0x00C*/     struct _LFH_HEAP* LowFragHeap;                                             
/*0x010*/     ULONG32      Sequence;                                                     
/*0x014*/     ULONG32      DeleteRateThreshold;                                          
          }HEAP_LOCAL_DATA, *PHEAP_LOCAL_DATA;                                           
                                                                                         
          typedef struct _HEAP_LOCAL_SEGMENT_INFO        // 9 elements, 0x68 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _HEAP_LOCAL_DATA* LocalData;                                           
/*0x004*/     struct _HEAP_SUBSEGMENT* ActiveSubsegment;                                    
/*0x008*/     struct _HEAP_SUBSEGMENT* CachedItems[16];                                     
/*0x048*/     union _SLIST_HEADER SListHeader;           // 4 elements, 0x8 bytes (sizeof)  
/*0x050*/     union _HEAP_BUCKET_COUNTERS Counters;      // 3 elements, 0x8 bytes (sizeof)  
/*0x058*/     ULONG32      LastOpSequence;                                                  
/*0x05C*/     UINT16       BucketIndex;                                                     
/*0x05E*/     UINT16       LastUsed;                                                        
/*0x060*/     UINT16       NoThrashCount;                                                   
/*0x062*/     UINT8        _PADDING0_[0x6];                                                 
          }HEAP_LOCAL_SEGMENT_INFO, *PHEAP_LOCAL_SEGMENT_INFO;                                   
                                                                                            
          typedef struct _RTL_CRITICAL_SECTION               // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;                                    
/*0x004*/     LONG32       LockCount;                                                           
/*0x008*/     LONG32       RecursionCount;                                                      
/*0x00C*/     VOID*        OwningThread;                                                        
/*0x010*/     VOID*        LockSemaphore;                                                       
/*0x014*/     ULONG32      SpinCount;                                                           
          }RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;                                        
                                                                                                
          typedef struct _HEAP_LOCK                             // 1 elements, 0x18 bytes (sizeof) 
          {                                                                                        
              union                                             // 1 elements, 0x18 bytes (sizeof) 
              {                                                                                    
/*0x000*/         struct _RTL_CRITICAL_SECTION CriticalSection; // 6 elements, 0x18 bytes (sizeof) 
              }Lock;                                                                               
          }HEAP_LOCK, *PHEAP_LOCK;                                                                 
                                                                                                   
          typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR     // 11 elements, 0x10 bytes (sizeof) 
          {                                                                                  
              union                                      // 2 elements, 0xC bytes (sizeof)   
              {                                                                              
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;    // 6 elements, 0xC bytes (sizeof)   
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x000*/             ULONG32      TreeSignature;                                            
                      struct                             // 2 elements, 0x2 bytes (sizeof)   
                      {                                                                      
/*0x004*/                 UINT16       ExtraPresent : 1; // 0 BitPosition                    
/*0x004*/                 UINT16       Spare0 : 15;      // 1 BitPosition                    
                      };                                                                     
/*0x006*/             UINT16       UnusedBytes;                                              
/*0x008*/             UINT8        _PADDING0_[0x4];                                          
                  };                                                                         
              };                                                                             
/*0x00C*/     UINT8        RangeFlags;                                                       
/*0x00D*/     UINT8        Spare1;                                                           
              union                                      // 2 elements, 0x2 bytes (sizeof)   
              {                                                                              
/*0x00E*/         struct _HEAP_DESCRIPTOR_KEY Key;       // 3 elements, 0x2 bytes (sizeof)   
                  struct                                 // 2 elements, 0x2 bytes (sizeof)   
                  {                                                                          
/*0x00E*/             UINT8        Align;                                                    
                      union                              // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                      
/*0x00F*/                 UINT8        Offset;                                               
/*0x00F*/                 UINT8        Size;                                                 
                      };                                                                     
                  };                                                                         
              };                                                                             
          }HEAP_PAGE_RANGE_DESCRIPTOR, *PHEAP_PAGE_RANGE_DESCRIPTOR;                                    
                                                                                             
          typedef struct _HEAP_PAGE_SEGMENT // 2 elements, 0xC bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _LIST_ENTRY ListEntry; // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Signature;                                         
          }HEAP_PAGE_SEGMENT, *PHEAP_PAGE_SEGMENT;                                  
                                                                              
          typedef struct _HEAP_PSEUDO_TAG_ENTRY // 3 elements, 0xC bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      Allocs;                                                
/*0x004*/     ULONG32      Frees;                                                 
/*0x008*/     ULONG32      Size;                                                  
          }HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY;                                  
                                                                                  
          typedef struct _INTERLOCK_SEQ               // 5 elements, 0x4 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x4 bytes (sizeof) 
              {                                                                         
                  struct                              // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       Depth;                                               
                      union                           // 2 elements, 0x2 bytes (sizeof) 
                      {                                                                 
                          struct                      // 2 elements, 0x2 bytes (sizeof) 
                          {                                                             
/*0x002*/                     UINT16       Hint : 15; // 0 BitPosition                  
/*0x002*/                     UINT16       Lock : 1;  // 15 BitPosition                 
                          };                                                            
/*0x002*/                 UINT16       Hint16;                                          
                      };                                                                
                  };                                                                    
/*0x000*/         LONG32       Exchg;                                                   
              };                                                                        
          }INTERLOCK_SEQ, *PINTERLOCK_SEQ;                                              
                                                                                        
          typedef struct _HEAP_SUBSEGMENT                 // 12 elements, 0x28 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _HEAP_LOCAL_SEGMENT_INFO* LocalInfo;                                     
/*0x004*/     struct _HEAP_USERDATA_HEADER* UserBlocks;                                       
/*0x008*/     union _SLIST_HEADER DelayFreeList;          // 4 elements, 0x8 bytes (sizeof)   
/*0x010*/     struct _INTERLOCK_SEQ AggregateExchg;       // 5 elements, 0x4 bytes (sizeof)   
              union                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                               
                  struct                                  // 5 elements, 0x8 bytes (sizeof)   
                  {                                                                           
/*0x014*/             UINT16       BlockSize;                                                 
/*0x016*/             UINT16       Flags;                                                     
/*0x018*/             UINT16       BlockCount;                                                
/*0x01A*/             UINT8        SizeIndex;                                                 
/*0x01B*/             UINT8        AffinityIndex;                                             
                  };                                                                          
/*0x014*/         ULONG32      Alignment[2];                                                  
              };                                                                              
/*0x01C*/     ULONG32      Lock;                                                              
/*0x020*/     struct _SINGLE_LIST_ENTRY SFreeListEntry;   // 1 elements, 0x4 bytes (sizeof)   
/*0x024*/     UINT8        _PADDING0_[0x4];                                                   
          }HEAP_SUBSEGMENT, *PHEAP_SUBSEGMENT;                                                
                                                                                              
          typedef struct _HEAP_TAG_ENTRY          // 6 elements, 0x40 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Allocs;                                                   
/*0x004*/     ULONG32      Frees;                                                    
/*0x008*/     ULONG32      Size;                                                     
/*0x00C*/     UINT16       TagIndex;                                                 
/*0x00E*/     UINT16       CreatorBackTraceIndex;                                    
/*0x010*/     WCHAR        TagName[24];                                              
          }HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY;                                         
                                                                                     
          typedef struct _HEAP_UCR_DESCRIPTOR  // 4 elements, 0x18 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;    // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LIST_ENTRY SegmentEntry; // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/     VOID*        Address;                                               
/*0x014*/     ULONG32      Size;                                                  
          }HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR;                                   
                                                                                  
          typedef struct _HEAP_USERDATA_OFFSETS           // 3 elements, 0x4 bytes (sizeof) 
          {                                                                                 
              union                                       // 2 elements, 0x4 bytes (sizeof) 
              {                                                                             
                  struct                                  // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                         
/*0x000*/             UINT16       FirstAllocationOffset;                                   
/*0x002*/             UINT16       BlockStride;                                             
                  };                                                                        
/*0x000*/         ULONG32      StrideAndOffset;                                             
              };                                                                            
          }HEAP_USERDATA_OFFSETS, *PHEAP_USERDATA_OFFSETS;                                  
                                                                                            
          typedef struct _RTL_BITMAP     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      SizeOfBitMap;                                   
/*0x004*/     ULONG32*     Buffer;                                         
          }RTL_BITMAP, *PRTL_BITMAP;                                       
                                                                           
          typedef struct _HEAP_USERDATA_HEADER              // 11 elements, 0x20 bytes (sizeof) 
          {                                                                                     
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x000*/         struct _SINGLE_LIST_ENTRY SFreeListEntry; // 1 elements, 0x4 bytes (sizeof)   
/*0x000*/         struct _HEAP_SUBSEGMENT* SubSegment;                                          
              };                                                                                
/*0x004*/     VOID*        Reserved;                                                            
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x008*/         ULONG32      SizeIndexAndPadding;                                             
                  struct                                    // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                             
/*0x008*/             UINT8        SizeIndex;                                                   
/*0x009*/             UINT8        GuardPagePresent;                                            
/*0x00A*/             UINT16       PaddingBytes;                                                
                  };                                                                            
              };                                                                                
/*0x00C*/     ULONG32      Signature;                                                           
/*0x010*/     struct _HEAP_USERDATA_OFFSETS EncodedOffsets; // 3 elements, 0x4 bytes (sizeof)   
/*0x014*/     struct _RTL_BITMAP BusyBitmap;                // 2 elements, 0x8 bytes (sizeof)   
/*0x01C*/     ULONG32      BitmapData[1];                                                       
          }HEAP_USERDATA_HEADER, *PHEAP_USERDATA_HEADER;                                        
                                                                                                
          typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY // 5 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _LIST_ENTRY Entry;            // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _HEAP_ENTRY_EXTRA ExtraStuff; // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      CommitSize;                                                
/*0x014*/     ULONG32      ReserveSize;                                               
/*0x018*/     struct _HEAP_ENTRY BusyBlock;        // 22 elements, 0x8 bytes (sizeof) 
          }HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY;                                   
                                                                                      
          typedef union _HEAP_VS_CHUNK_HEADER_SIZE  // 7 elements, 0x4 bytes (sizeof) 
          {                                                                           
              struct                                // 4 elements, 0x4 bytes (sizeof) 
              {                                                                       
/*0x000*/         ULONG32      MemoryCost : 1;      // 0 BitPosition                  
/*0x000*/         ULONG32      UnsafeSize : 15;     // 1 BitPosition                  
/*0x000*/         ULONG32      UnsafePrevSize : 15; // 16 BitPosition                 
/*0x000*/         ULONG32      Allocated : 1;       // 31 BitPosition                 
              };                                                                      
/*0x000*/     UINT16       KeyUShort;                                                 
/*0x000*/     ULONG32      KeyULong;                                                  
/*0x000*/     ULONG32      HeaderBits;                                                
          }HEAP_VS_CHUNK_HEADER_SIZE, *PHEAP_VS_CHUNK_HEADER_SIZE;                                  
                                                                                      
          typedef struct _HEAP_VS_CHUNK_HEADER                   // 6 elements, 0x8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     union _HEAP_VS_CHUNK_HEADER_SIZE Sizes;            // 7 elements, 0x4 bytes (sizeof) 
              union                                              // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                    
                  struct                                         // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                                
/*0x004*/             ULONG32      EncodedSegmentPageOffset : 8; // 0 BitPosition                  
/*0x004*/             ULONG32      UnusedBytes : 1;              // 8 BitPosition                  
/*0x004*/             ULONG32      SkipDuringWalk : 1;           // 9 BitPosition                  
/*0x004*/             ULONG32      Spare : 22;                   // 10 BitPosition                 
                  };                                                                               
/*0x004*/         ULONG32      AllocatedChunkBits;                                                 
              };                                                                                   
          }HEAP_VS_CHUNK_HEADER, *PHEAP_VS_CHUNK_HEADER;                                           
                                                                                                   
          typedef struct _HEAP_VS_CHUNK_FREE_HEADER    // 3 elements, 0x10 bytes (sizeof) 
          {                                                                               
              union                                    // 3 elements, 0x8 bytes (sizeof)  
              {                                                                           
/*0x000*/         struct _HEAP_VS_CHUNK_HEADER Header; // 6 elements, 0x8 bytes (sizeof)  
/*0x000*/         ULONG32      OverlapsHeader;                                            
/*0x004*/         struct _RTL_BALANCED_NODE Node;      // 6 elements, 0xC bytes (sizeof)  
              };                                                                          
          }HEAP_VS_CHUNK_FREE_HEADER, *PHEAP_VS_CHUNK_FREE_HEADER;                                   
                                                                                          
          typedef struct _HEAP_VS_CONTEXT                    // 7 elements, 0x34 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _RTL_SRWLOCK Lock;                      // 7 elements, 0x4 bytes (sizeof)  
/*0x004*/     struct _RTL_RB_TREE FreeChunkTree;             // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     struct _LIST_ENTRY SubsegmentList;             // 2 elements, 0x8 bytes (sizeof)  
/*0x014*/     ULONG32      TotalCommittedUnits;                                                 
/*0x018*/     ULONG32      FreeCommittedUnits;                                                  
/*0x01C*/     VOID*        BackendCtx;                                                          
/*0x020*/     struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks; // 5 elements, 0x14 bytes (sizeof) 
          }HEAP_VS_CONTEXT, *PHEAP_VS_CONTEXT;                                                  
                                                                                                
          typedef struct _HEAP_VS_SUBSEGMENT  // 5 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _LIST_ENTRY ListEntry;   // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       CommitBitmap;                                         
/*0x010*/     struct _RTL_SRWLOCK CommitLock; // 7 elements, 0x4 bytes (sizeof)  
/*0x014*/     UINT16       Size;                                                 
/*0x016*/     UINT16       Signature;                                            
          }HEAP_VS_SUBSEGMENT, *PHEAP_VS_SUBSEGMENT;                                   
                                                                                 
          typedef struct _HEAP_VS_UNUSED_BYTES_INFO   // 5 elements, 0x2 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x2 bytes (sizeof) 
              {                                                                         
                  struct                              // 4 elements, 0x2 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       UnusedBytes : 13;  // 0 BitPosition                  
/*0x000*/             UINT16       LfhSubsegment : 1; // 13 BitPosition                 
/*0x000*/             UINT16       ExtraPresent : 1;  // 14 BitPosition                 
/*0x000*/             UINT16       OneByteUnused : 1; // 15 BitPosition                 
                  };                                                                    
/*0x000*/         UINT8        Bytes[2];                                                
              };                                                                        
          }HEAP_VS_UNUSED_BYTES_INFO, *PHEAP_VS_UNUSED_BYTES_INFO;                                  
                                                                                        
          typedef struct _IMAGE_DATA_DIRECTORY // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      VirtualAddress;                                       
/*0x004*/     ULONG32      Size;                                                 
          }IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;                                  
                                                                                 
          typedef struct _IMAGE_DOS_HEADER // 19 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       e_magic;                                            
/*0x002*/     UINT16       e_cblp;                                             
/*0x004*/     UINT16       e_cp;                                               
/*0x006*/     UINT16       e_crlc;                                             
/*0x008*/     UINT16       e_cparhdr;                                          
/*0x00A*/     UINT16       e_minalloc;                                         
/*0x00C*/     UINT16       e_maxalloc;                                         
/*0x00E*/     UINT16       e_ss;                                               
/*0x010*/     UINT16       e_sp;                                               
/*0x012*/     UINT16       e_csum;                                             
/*0x014*/     UINT16       e_ip;                                               
/*0x016*/     UINT16       e_cs;                                               
/*0x018*/     UINT16       e_lfarlc;                                           
/*0x01A*/     UINT16       e_ovno;                                             
/*0x01C*/     UINT16       e_res[4];                                           
/*0x024*/     UINT16       e_oemid;                                            
/*0x026*/     UINT16       e_oeminfo;                                          
/*0x028*/     UINT16       e_res2[10];                                         
/*0x03C*/     LONG32       e_lfanew;                                           
          }IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;                                    
                                                                               
          typedef struct _IMAGE_FILE_HEADER      // 7 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Machine;                                                 
/*0x002*/     UINT16       NumberOfSections;                                        
/*0x004*/     ULONG32      TimeDateStamp;                                           
/*0x008*/     ULONG32      PointerToSymbolTable;                                    
/*0x00C*/     ULONG32      NumberOfSymbols;                                         
/*0x010*/     UINT16       SizeOfOptionalHeader;                                    
/*0x012*/     UINT16       Characteristics;                                         
          }IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;                                   
                                                                                    
          typedef struct _IMAGE_OPTIONAL_HEADER               // 31 elements, 0xE0 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT16       Magic;                                                                 
/*0x002*/     UINT8        MajorLinkerVersion;                                                    
/*0x003*/     UINT8        MinorLinkerVersion;                                                    
/*0x004*/     ULONG32      SizeOfCode;                                                            
/*0x008*/     ULONG32      SizeOfInitializedData;                                                 
/*0x00C*/     ULONG32      SizeOfUninitializedData;                                               
/*0x010*/     ULONG32      AddressOfEntryPoint;                                                   
/*0x014*/     ULONG32      BaseOfCode;                                                            
/*0x018*/     ULONG32      BaseOfData;                                                            
/*0x01C*/     ULONG32      ImageBase;                                                             
/*0x020*/     ULONG32      SectionAlignment;                                                      
/*0x024*/     ULONG32      FileAlignment;                                                         
/*0x028*/     UINT16       MajorOperatingSystemVersion;                                           
/*0x02A*/     UINT16       MinorOperatingSystemVersion;                                           
/*0x02C*/     UINT16       MajorImageVersion;                                                     
/*0x02E*/     UINT16       MinorImageVersion;                                                     
/*0x030*/     UINT16       MajorSubsystemVersion;                                                 
/*0x032*/     UINT16       MinorSubsystemVersion;                                                 
/*0x034*/     ULONG32      Win32VersionValue;                                                     
/*0x038*/     ULONG32      SizeOfImage;                                                           
/*0x03C*/     ULONG32      SizeOfHeaders;                                                         
/*0x040*/     ULONG32      CheckSum;                                                              
/*0x044*/     UINT16       Subsystem;                                                             
/*0x046*/     UINT16       DllCharacteristics;                                                    
/*0x048*/     ULONG32      SizeOfStackReserve;                                                    
/*0x04C*/     ULONG32      SizeOfStackCommit;                                                     
/*0x050*/     ULONG32      SizeOfHeapReserve;                                                     
/*0x054*/     ULONG32      SizeOfHeapCommit;                                                      
/*0x058*/     ULONG32      LoaderFlags;                                                           
/*0x05C*/     ULONG32      NumberOfRvaAndSizes;                                                   
/*0x060*/     struct _IMAGE_DATA_DIRECTORY DataDirectory[16];                                     
          }IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;                                        
                                                                                                  
          typedef struct _IMAGE_NT_HEADERS                  // 3 elements, 0xF8 bytes (sizeof)  
          {                                                                                     
/*0x000*/     ULONG32      Signature;                                                           
/*0x004*/     struct _IMAGE_FILE_HEADER FileHeader;         // 7 elements, 0x14 bytes (sizeof)  
/*0x018*/     struct _IMAGE_OPTIONAL_HEADER OptionalHeader; // 31 elements, 0xE0 bytes (sizeof) 
          }IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;                                                
                                                                                                
          typedef struct _INTERFACE                                                                                                                        // 5 elements, 0x10 bytes (sizeof) 
          {                                                                                                                                                                                   
/*0x000*/     UINT16       Size;                                                                                                                                                              
/*0x002*/     UINT16       Version;                                                                                                                                                           
/*0x004*/     VOID*        Context;                                                                                                                                                           
/*0x008*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* InterfaceReference;                                      
/*0x00C*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* InterfaceDereference;                                    
          }INTERFACE, *PINTERFACE;                                                                                                                                                            
                                                                                                                                                                                              
          typedef struct _INTERRUPT_REMAPPING_INFO      // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                
              struct                                    // 3 elements, 0x4 bytes (sizeof)  
              {                                                                            
/*0x000*/         ULONG32      IrtIndex : 30;           // 0 BitPosition                   
/*0x000*/         ULONG32      FlagHalInternal : 1;     // 30 BitPosition                  
/*0x000*/         ULONG32      FlagTranslated : 1;      // 31 BitPosition                  
              };                                                                           
              union                                     // 2 elements, 0x8 bytes (sizeof)  
              {                                                                            
/*0x008*/         union _ULARGE_INTEGER RemappedFormat; // 4 elements, 0x8 bytes (sizeof)  
                  struct                                // 3 elements, 0x8 bytes (sizeof)  
                  {                                                                        
/*0x008*/             ULONG32      MessageAddressLow;                                      
/*0x00C*/             UINT16       MessageData;                                            
/*0x00E*/             UINT16       Reserved;                                               
                  }Msi;                                                                    
              }u;                                                                          
          }INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO;                                   
                                                                                           
          typedef struct _INTERRUPT_HT_INTR_INFO             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                    
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 9 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x000*/             ULONG32      Mask : 1;                 // 0 BitPosition                  
/*0x000*/             ULONG32      Polarity : 1;             // 1 BitPosition                  
/*0x000*/             ULONG32      MessageType : 3;          // 2 BitPosition                  
/*0x000*/             ULONG32      RequestEOI : 1;           // 5 BitPosition                  
/*0x000*/             ULONG32      DestinationMode : 1;      // 6 BitPosition                  
/*0x000*/             ULONG32      MessageType3 : 1;         // 7 BitPosition                  
/*0x000*/             ULONG32      Destination : 8;          // 8 BitPosition                  
/*0x000*/             ULONG32      Vector : 8;               // 16 BitPosition                 
/*0x000*/             ULONG32      ExtendedAddress : 8;      // 24 BitPosition                 
                  }bits;                                                                       
/*0x000*/         ULONG32      AsULONG;                                                        
              }LowPart;                                                                        
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x004*/             ULONG32      ExtendedDestination : 24; // 0 BitPosition                  
/*0x004*/             ULONG32      Reserved : 6;             // 24 BitPosition                 
/*0x004*/             ULONG32      PassPW : 1;               // 30 BitPosition                 
/*0x004*/             ULONG32      WaitingForEOI : 1;        // 31 BitPosition                 
                  }bits;                                                                       
/*0x004*/         ULONG32      AsULONG;                                                        
              }HighPart;                                                                       
          }INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO;                                   
                                                                                               
          typedef struct _INTERRUPT_VECTOR_DATA                        // 13 elements, 0x50 bytes (sizeof) 
          {                                                                                                
/*0x000*/     enum _INTERRUPT_CONNECTION_TYPE Type;                                                        
/*0x004*/     ULONG32      Vector;                                                                         
/*0x008*/     UINT8        Irql;                                                                           
/*0x009*/     UINT8        _PADDING0_[0x3];                                                                
/*0x00C*/     enum _KINTERRUPT_POLARITY Polarity;                                                          
/*0x010*/     enum _KINTERRUPT_MODE Mode;                                                                  
/*0x014*/     struct _GROUP_AFFINITY TargetProcessors;                 // 3 elements, 0xC bytes (sizeof)   
/*0x020*/     struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;           // 4 elements, 0x10 bytes (sizeof)  
              struct                                                   // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                            
/*0x030*/         ULONG32      Gsiv;                                                                       
                  struct                                               // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                        
/*0x034*/             ULONG32      WakeInterrupt : 1;                  // 0 BitPosition                    
/*0x034*/             ULONG32      ReservedFlags : 31;                 // 1 BitPosition                    
                  };                                                                                       
              }ControllerInput;                                                                            
/*0x038*/     UINT64       HvDeviceId;                                                                     
              union                                                    // 4 elements, 0x10 bytes (sizeof)  
              {                                                                                            
                  struct                                               // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                        
/*0x040*/             union _LARGE_INTEGER Address;                    // 4 elements, 0x8 bytes (sizeof)   
/*0x048*/             ULONG32      DataPayload;                                                            
/*0x04C*/             UINT8        _PADDING1_[0x4];                                                        
                  }XapicMessage;                                                                           
                  struct                                               // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                        
/*0x040*/             struct _INTERRUPT_HT_INTR_INFO IntrInfo;         // 2 elements, 0x8 bytes (sizeof)   
                  }Hypertransport;                                                                         
                  struct                                               // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                        
/*0x040*/             union _LARGE_INTEGER Address;                    // 4 elements, 0x8 bytes (sizeof)   
/*0x048*/             ULONG32      DataPayload;                                                            
/*0x04C*/             UINT8        _PADDING1_[0x4];                                                        
                  }GenericMessage;                                                                         
                  struct                                               // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                        
/*0x040*/             enum _HAL_APIC_DESTINATION_MODE DestinationMode;                                     
                  }MessageRequest;                                                                         
              };                                                                                           
          }INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA;                                                 
                                                                                                           
          typedef struct _INTERRUPT_CONNECTION_DATA     // 2 elements, 0x58 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Count;                                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                                
/*0x008*/     struct _INTERRUPT_VECTOR_DATA Vectors[1];                                    
          }INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA;                                   
                                                                                           
          typedef struct _IO_CLIENT_EXTENSION             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _IO_CLIENT_EXTENSION* NextExtension;                                   
/*0x004*/     VOID*        ClientIdentificationAddress;                                     
          }IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION;                                      
                                                                                            
          typedef struct _IO_COMPLETION_CONTEXT // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     VOID*        Port;                                                  
/*0x004*/     VOID*        Key;                                                   
          }IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;                                  
                                                                                  
          typedef struct _IO_DRIVER_CREATE_CONTEXT        // 5 elements, 0x14 bytes (sizeof) 
          {                                                                                  
/*0x000*/     INT16        Size;                                                             
/*0x002*/     UINT8        _PADDING0_[0x2];                                                  
/*0x004*/     struct _ECP_LIST* ExtraCreateParameter;                                        
/*0x008*/     VOID*        DeviceObjectHint;                                                 
/*0x00C*/     struct _TXN_PARAMETER_BLOCK* TxnParameters;                                    
/*0x010*/     struct _EJOB* SiloContext;                                                     
          }IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;                                   
                                                                                             
          typedef struct _IO_MINI_COMPLETION_PACKET_USER              // 9 elements, 0x28 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _LIST_ENTRY ListEntry;                           // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      PacketType;                                                                   
/*0x00C*/     VOID*        KeyContext;                                                                   
/*0x010*/     VOID*        ApcContext;                                                                   
/*0x014*/     LONG32       IoStatus;                                                                     
/*0x018*/     ULONG32      IoStatusInformation;                                                          
/*0x01C*/     FUNCT_00C6_0E4D_MiniPacketCallback* MiniPacketCallback;                                    
/*0x020*/     VOID*        Context;                                                                      
/*0x024*/     UINT8        Allocated;                                                                    
/*0x025*/     UINT8        _PADDING0_[0x3];                                                              
          }IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER;                                   
                                                                                                         
          typedef struct _IO_PRIORITY_INFO       // 4 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Size;                                                    
/*0x004*/     ULONG32      ThreadPriority;                                          
/*0x008*/     ULONG32      PagePriority;                                            
/*0x00C*/     enum _IO_PRIORITY_HINT IoPriority;                                    
          }IO_PRIORITY_INFO, *PIO_PRIORITY_INFO;                                    
                                                                                    
          typedef struct _IO_RESOURCE_DESCRIPTOR           // 7 elements, 0x20 bytes (sizeof)  
          {                                                                                    
/*0x000*/     UINT8        Option;                                                             
/*0x001*/     UINT8        Type;                                                               
/*0x002*/     UINT8        ShareDisposition;                                                   
/*0x003*/     UINT8        Spare1;                                                             
/*0x004*/     UINT16       Flags;                                                              
/*0x006*/     UINT16       Spare2;                                                             
              union                                        // 13 elements, 0x18 bytes (sizeof) 
              {                                                                                
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Port;                                                                       
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory;                                                                     
                  struct                                   // 6 elements, 0x14 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      MinimumVector;                                              
/*0x00C*/             ULONG32      MaximumVector;                                              
/*0x010*/             UINT16       AffinityPolicy;                                             
/*0x012*/             UINT16       Group;                                                      
/*0x014*/             enum _IRQ_PRIORITY PriorityPolicy;                                       
/*0x018*/             ULONG32      TargetedProcessors;                                         
                  }Interrupt;                                                                  
                  struct                                   // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      MinimumChannel;                                             
/*0x00C*/             ULONG32      MaximumChannel;                                             
                  }Dma;                                                                        
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      RequestLine;                                                
/*0x00C*/             ULONG32      Reserved;                                                   
/*0x010*/             ULONG32      Channel;                                                    
/*0x014*/             ULONG32      TransferWidth;                                              
                  }DmaV3;                                                                      
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Generic;                                                                    
                  struct                                   // 1 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Data[3];                                                    
                  }DevicePrivate;                                                              
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      MinBusNumber;                                               
/*0x010*/             ULONG32      MaxBusNumber;                                               
/*0x014*/             ULONG32      Reserved;                                                   
                  }BusNumber;                                                                  
                  struct                                   // 3 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Priority;                                                   
/*0x00C*/             ULONG32      Reserved1;                                                  
/*0x010*/             ULONG32      Reserved2;                                                  
                  }ConfigData;                                                                 
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length40;                                                   
/*0x00C*/             ULONG32      Alignment40;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory40;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length48;                                                   
/*0x00C*/             ULONG32      Alignment48;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory48;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length64;                                                   
/*0x00C*/             ULONG32      Alignment64;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory64;                                                                   
                  struct                                   // 6 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             UINT8        Class;                                                      
/*0x009*/             UINT8        Type;                                                       
/*0x00A*/             UINT8        Reserved1;                                                  
/*0x00B*/             UINT8        Reserved2;                                                  
/*0x00C*/             ULONG32      IdLowPart;                                                  
/*0x010*/             ULONG32      IdHighPart;                                                 
                  }Connection;                                                                 
              }u;                                                                              
          }IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;                                    
                                                                                               
          typedef struct _IO_RESOURCE_LIST                   // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Version;                                                             
/*0x002*/     UINT16       Revision;                                                            
/*0x004*/     ULONG32      Count;                                                               
/*0x008*/     struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];                                    
          }IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;                                                
                                                                                                
          typedef struct _IO_RESOURCE_REQUIREMENTS_LIST // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      ListSize;                                                       
/*0x004*/     enum _INTERFACE_TYPE InterfaceType;                                          
/*0x008*/     ULONG32      BusNumber;                                                      
/*0x00C*/     ULONG32      SlotNumber;                                                     
/*0x010*/     ULONG32      Reserved[3];                                                    
/*0x01C*/     ULONG32      AlternativeLists;                                               
/*0x020*/     struct _IO_RESOURCE_LIST List[1];                                            
          }IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;                                   
                                                                                           
          typedef struct _IO_SECURITY_CONTEXT                   // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;                                    
/*0x004*/     struct _ACCESS_STATE* AccessState;                                                   
/*0x008*/     ULONG32      DesiredAccess;                                                          
/*0x00C*/     ULONG32      FullCreateOptions;                                                      
          }IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;                                             
                                                                                                   
          typedef struct _SYSTEM_POWER_STATE_CONTEXT          // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                 
                  struct                                      // 7 elements, 0x4 bytes (sizeof) 
                  {                                                                             
/*0x000*/             ULONG32      Reserved1 : 8;             // 0 BitPosition                  
/*0x000*/             ULONG32      TargetSystemState : 4;     // 8 BitPosition                  
/*0x000*/             ULONG32      EffectiveSystemState : 4;  // 12 BitPosition                 
/*0x000*/             ULONG32      CurrentSystemState : 4;    // 16 BitPosition                 
/*0x000*/             ULONG32      IgnoreHibernationPath : 1; // 20 BitPosition                 
/*0x000*/             ULONG32      PseudoTransition : 1;      // 21 BitPosition                 
/*0x000*/             ULONG32      Reserved2 : 10;            // 22 BitPosition                 
                  };                                                                            
/*0x000*/         ULONG32      ContextAsUlong;                                                  
              };                                                                                
          }SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT;                                  
                                                                                                
          typedef union _POWER_STATE                // 2 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     enum _SYSTEM_POWER_STATE SystemState;                                   
/*0x000*/     enum _DEVICE_POWER_STATE DeviceState;                                   
          }POWER_STATE, *PPOWER_STATE;                                                
                                                                                      
          typedef struct _IO_STACK_LOCATION                                             // 9 elements, 0x24 bytes (sizeof)  
          {                                                                                                                 
/*0x000*/     UINT8        MajorFunction;                                                                                   
/*0x001*/     UINT8        MinorFunction;                                                                                   
/*0x002*/     UINT8        Flags;                                                                                           
/*0x003*/     UINT8        Control;                                                                                         
              union                                                                     // 38 elements, 0x10 bytes (sizeof) 
              {                                                                                                             
                  struct                                                                // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                         
/*0x008*/             ULONG32      Options;                                                                                 
/*0x00C*/             UINT16       FileAttributes;                                                                          
/*0x00E*/             UINT16       ShareAccess;                                                                             
/*0x010*/             ULONG32      EaLength;                                                                                
                  }Create;                                                                                                  
                  struct                                                                // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                         
/*0x008*/             ULONG32      Options;                                                                                 
/*0x00C*/             UINT16       Reserved;                                                                                
/*0x00E*/             UINT16       ShareAccess;                                                                             
/*0x010*/             struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;                                                     
                  }CreatePipe;                                                                                              
                  struct                                                                // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                         
/*0x008*/             ULONG32      Options;                                                                                 
/*0x00C*/             UINT16       Reserved;                                                                                
/*0x00E*/             UINT16       ShareAccess;                                                                             
/*0x010*/             struct _MAILSLOT_CREATE_PARAMETERS* Parameters;                                                       
                  }CreateMailslot;                                                                                          
                  struct                                                                // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             ULONG32      Key;                                                                                     
/*0x00C*/             union _LARGE_INTEGER ByteOffset;                                  // 4 elements, 0x8 bytes (sizeof)   
                  }Read;                                                                                                    
                  struct                                                                // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             ULONG32      Key;                                                                                     
/*0x00C*/             union _LARGE_INTEGER ByteOffset;                                  // 4 elements, 0x8 bytes (sizeof)   
                  }Write;                                                                                                   
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             struct _UNICODE_STRING* FileName;                                                                     
/*0x00C*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                    
/*0x010*/             ULONG32      FileIndex;                                                                               
                  }QueryDirectory;                                                                                          
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             ULONG32      CompletionFilter;                                                                        
                  }NotifyDirectory;                                                                                         
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                    
                  }QueryFile;                                                                                               
                  struct                                                                // 7 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                    
/*0x00C*/             struct _FILE_OBJECT* FileObject;                                                                      
                      union                                                             // 3 elements, 0x4 bytes (sizeof)   
                      {                                                                                                     
                          struct                                                        // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                                                 
/*0x010*/                     UINT8        ReplaceIfExists;                                                                 
/*0x011*/                     UINT8        AdvanceOnly;                                                                     
/*0x012*/                     UINT8        _PADDING0_[0x2];                                                                 
                          };                                                                                                
/*0x010*/                 ULONG32      ClusterCount;                                                                        
/*0x010*/                 VOID*        DeleteHandle;                                                                        
                      };                                                                                                    
                  }SetFile;                                                                                                 
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             VOID*        EaList;                                                                                  
/*0x00C*/             ULONG32      EaListLength;                                                                            
/*0x010*/             ULONG32      EaIndex;                                                                                 
                  }QueryEa;                                                                                                 
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
                  }SetEa;                                                                                                   
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             enum _FSINFOCLASS FsInformationClass;                                                                 
                  }QueryVolume;                                                                                             
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             enum _FSINFOCLASS FsInformationClass;                                                                 
                  }SetVolume;                                                                                               
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      OutputBufferLength;                                                                      
/*0x008*/             ULONG32      InputBufferLength;                                                                       
/*0x00C*/             ULONG32      FsControlCode;                                                                           
/*0x010*/             VOID*        Type3InputBuffer;                                                                        
                  }FileSystemControl;                                                                                       
                  struct                                                                // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             union _LARGE_INTEGER* Length;                                                                         
/*0x008*/             ULONG32      Key;                                                                                     
/*0x00C*/             union _LARGE_INTEGER ByteOffset;                                  // 4 elements, 0x8 bytes (sizeof)   
                  }LockControl;                                                                                             
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      OutputBufferLength;                                                                      
/*0x008*/             ULONG32      InputBufferLength;                                                                       
/*0x00C*/             ULONG32      IoControlCode;                                                                           
/*0x010*/             VOID*        Type3InputBuffer;                                                                        
                  }DeviceIoControl;                                                                                         
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      SecurityInformation;                                                                     
/*0x008*/             ULONG32      Length;                                                                                  
                  }QuerySecurity;                                                                                           
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      SecurityInformation;                                                                     
/*0x008*/             VOID*        SecurityDescriptor;                                                                      
                  }SetSecurity;                                                                                             
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _VPB* Vpb;                                                                                     
/*0x008*/             struct _DEVICE_OBJECT* DeviceObject;                                                                  
                  }MountVolume;                                                                                             
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _VPB* Vpb;                                                                                     
/*0x008*/             struct _DEVICE_OBJECT* DeviceObject;                                                                  
                  }VerifyVolume;                                                                                            
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _SCSI_REQUEST_BLOCK* Srb;                                                                      
                  }Scsi;                                                                                                    
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
/*0x008*/             VOID*        StartSid;                                                                                
/*0x00C*/             struct _FILE_GET_QUOTA_INFORMATION* SidList;                                                          
/*0x010*/             ULONG32      SidListLength;                                                                           
                  }QueryQuota;                                                                                              
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             ULONG32      Length;                                                                                  
                  }SetQuota;                                                                                                
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             enum _DEVICE_RELATION_TYPE Type;                                                                      
                  }QueryDeviceRelations;                                                                                    
                  struct                                                                // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             struct _GUID* InterfaceType;                                                                          
/*0x008*/             UINT16       Size;                                                                                    
/*0x00A*/             UINT16       Version;                                                                                 
/*0x00C*/             struct _INTERFACE* Interface;                                                                         
/*0x010*/             VOID*        InterfaceSpecificData;                                                                   
                  }QueryInterface;                                                                                          
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _DEVICE_CAPABILITIES* Capabilities;                                                            
                  }DeviceCapabilities;                                                                                      
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;                                     
                  }FilterResourceRequirements;                                                                              
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      WhichSpace;                                                                              
/*0x008*/             VOID*        Buffer;                                                                                  
/*0x00C*/             ULONG32      Offset;                                                                                  
/*0x010*/             ULONG32      Length;                                                                                  
                  }ReadWriteConfig;                                                                                         
                  struct                                                                // 1 elements, 0x1 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             UINT8        Lock;                                                                                    
                  }SetLock;                                                                                                 
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             enum _BUS_QUERY_ID_TYPE IdType;                                                                       
                  }QueryId;                                                                                                 
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             enum _DEVICE_TEXT_TYPE DeviceTextType;                                                                
/*0x008*/             ULONG32      LocaleId;                                                                                
                  }QueryDeviceText;                                                                                         
                  struct                                                                // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             UINT8        InPath;                                                                                  
/*0x005*/             UINT8        Reserved[3];                                                                             
/*0x008*/             enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;                                                            
                  }UsageNotification;                                                                                       
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             enum _SYSTEM_POWER_STATE PowerState;                                                                  
                  }WaitWake;                                                                                                
                  struct                                                                // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _POWER_SEQUENCE* PowerSequence;                                                                
                  }PowerSequence;                                                                                           
                  struct                                                                // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
                      union                                                             // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                                     
/*0x004*/                 ULONG32      SystemContext;                                                                       
/*0x004*/                 struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;   // 8 elements, 0x4 bytes (sizeof)   
                      };                                                                                                    
/*0x008*/             enum _POWER_STATE_TYPE Type;                                                                          
/*0x00C*/             union _POWER_STATE State;                                         // 2 elements, 0x4 bytes (sizeof)   
/*0x010*/             enum _POWER_ACTION ShutdownType;                                                                      
                  }Power;                                                                                                   
                  struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                                         
/*0x004*/             struct _CM_RESOURCE_LIST* AllocatedResources;                                                         
/*0x008*/             struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;                                               
                  }StartDevice;                                                                                             
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             ULONG32      ProviderId;                                                                              
/*0x008*/             VOID*        DataPath;                                                                                
/*0x00C*/             ULONG32      BufferSize;                                                                              
/*0x010*/             VOID*        Buffer;                                                                                  
                  }WMI;                                                                                                     
                  struct                                                                // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                                         
/*0x004*/             VOID*        Argument1;                                                                               
/*0x008*/             VOID*        Argument2;                                                                               
/*0x00C*/             VOID*        Argument3;                                                                               
/*0x010*/             VOID*        Argument4;                                                                               
                  }Others;                                                                                                  
              }Parameters;                                                                                                  
/*0x014*/     struct _DEVICE_OBJECT* DeviceObject;                                                                          
/*0x018*/     struct _FILE_OBJECT* FileObject;                                                                              
/*0x01C*/     FUNCT_0076_1248_CompletionRoutine* CompletionRoutine;                                                         
/*0x020*/     VOID*        Context;                                                                                         
          }IO_STACK_LOCATION, *PIO_STACK_LOCATION;                                                                          
                                                                                                                            
          typedef struct _IO_STATUS_BLOCK // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
              union                       // 2 elements, 0x4 bytes (sizeof) 
              {                                                             
/*0x000*/         LONG32       Status;                                      
/*0x000*/         VOID*        Pointer;                                     
              };                                                            
/*0x004*/     ULONG32      Information;                                     
          }IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;                                  
                                                                            
          typedef struct _IO_TIMER                        // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                  
/*0x000*/     INT16        Type;                                                             
/*0x002*/     INT16        TimerFlag;                                                        
/*0x004*/     struct _LIST_ENTRY TimerList;               // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     FUNCT_00C6_1268_TimerRoutine* TimerRoutine;                                    
/*0x010*/     VOID*        Context;                                                          
/*0x014*/     struct _DEVICE_OBJECT* DeviceObject;                                           
          }IO_TIMER, *PIO_TIMER;                                                             
                                                                                             
          typedef struct _IOP_IRP_STACK_PROFILER // 2 elements, 0x54 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Profile[20];                                             
/*0x050*/     ULONG32      TotalIrps;                                               
          }IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER;                                   
                                                                                    
          typedef struct _IRP                                              // 21 elements, 0x70 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     INT16        Type;                                                                               
/*0x002*/     UINT16       Size;                                                                               
/*0x004*/     struct _MDL* MdlAddress;                                                                         
/*0x008*/     ULONG32      Flags;                                                                              
              union                                                        // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                                
/*0x00C*/         struct _IRP* MasterIrp;                                                                      
/*0x00C*/         LONG32       IrpCount;                                                                       
/*0x00C*/         VOID*        SystemBuffer;                                                                   
              }AssociatedIrp;                                                                                  
/*0x010*/     struct _LIST_ENTRY ThreadListEntry;                          // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _IO_STATUS_BLOCK IoStatus;                            // 3 elements, 0x8 bytes (sizeof)   
/*0x020*/     CHAR         RequestorMode;                                                                      
/*0x021*/     UINT8        PendingReturned;                                                                    
/*0x022*/     CHAR         StackCount;                                                                         
/*0x023*/     CHAR         CurrentLocation;                                                                    
/*0x024*/     UINT8        Cancel;                                                                             
/*0x025*/     UINT8        CancelIrql;                                                                         
/*0x026*/     CHAR         ApcEnvironment;                                                                     
/*0x027*/     UINT8        AllocationFlags;                                                                    
/*0x028*/     struct _IO_STATUS_BLOCK* UserIosb;                                                               
/*0x02C*/     struct _KEVENT* UserEvent;                                                                       
              union                                                        // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                
                  struct                                                   // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                                            
                      union                                                // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                        
/*0x030*/                 FUNCT_00C6_0F9A_UserApcRoutine* UserApcRoutine;                                      
/*0x030*/                 VOID*        IssuingProcess;                                                         
                      };                                                                                       
/*0x034*/             VOID*        UserApcContext;                                                             
                  }AsynchronousParameters;                                                                     
/*0x030*/         union _LARGE_INTEGER AllocationSize;                     // 4 elements, 0x8 bytes (sizeof)   
              }Overlay;                                                                                        
/*0x038*/     FUNCT_00C6_0F9F_DriverStartIo_CancelRoutine* CancelRoutine;                                      
/*0x03C*/     VOID*        UserBuffer;                                                                         
              union                                                        // 3 elements, 0x30 bytes (sizeof)  
              {                                                                                                
                  struct                                                   // 9 elements, 0x2C bytes (sizeof)  
                  {                                                                                            
                      union                                                // 2 elements, 0x10 bytes (sizeof)  
                      {                                                                                        
/*0x040*/                 struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;    // 3 elements, 0x10 bytes (sizeof)  
/*0x040*/                 VOID*        DriverContext[4];                                                       
                      };                                                                                       
/*0x050*/             struct _ETHREAD* Thread;                                                                 
/*0x054*/             CHAR*        AuxiliaryBuffer;                                                            
/*0x058*/             struct _LIST_ENTRY ListEntry;                        // 2 elements, 0x8 bytes (sizeof)   
                      union                                                // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                        
/*0x060*/                 struct _IO_STACK_LOCATION* CurrentStackLocation;                                     
/*0x060*/                 ULONG32      PacketType;                                                             
                      };                                                                                       
/*0x064*/             struct _FILE_OBJECT* OriginalFileObject;                                                 
/*0x068*/             VOID*        IrpExtension;                                                               
                  }Overlay;                                                                                    
/*0x040*/         struct _KAPC Apc;                                        // 17 elements, 0x30 bytes (sizeof) 
/*0x040*/         VOID*        CompletionKey;                                                                  
              }Tail;                                                                                           
          }IRP, *PIRP;                                                                                         
                                                                                                               
          typedef struct _ISRDPCSTATS    // 8 elements, 0x40 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       IsrTime;                                         
/*0x008*/     UINT64       IsrTimeStart;                                    
/*0x010*/     UINT64       IsrCount;                                        
/*0x018*/     UINT64       DpcTime;                                         
/*0x020*/     UINT64       DpcTimeStart;                                    
/*0x028*/     UINT64       DpcCount;                                        
/*0x030*/     UINT8        IsrActive;                                       
/*0x031*/     UINT8        Reserved[15];                                    
          }ISRDPCSTATS, *PISRDPCSTATS;                                      
                                                                            
typedef struct _JOB_ACCESS_STATE // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}JOB_ACCESS_STATE, *PJOB_ACCESS_STATE;                                  
                                                                   
typedef struct _JOB_CPU_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_CPU_RATE_CONTROL, *PJOB_CPU_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_IO_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                     
}JOB_IO_RATE_CONTROL, *PJOB_IO_RATE_CONTROL;                                  
                                                                      
typedef struct _JOB_NET_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_NET_RATE_CONTROL, *PJOB_NET_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_NOTIFICATION_INFORMATION // 0 elements, 0x0 bytes (sizeof) 
{                                                                              
}JOB_NOTIFICATION_INFORMATION, *PJOB_NOTIFICATION_INFORMATION;                                  
                                                                               
          typedef struct _KDPC_LIST                 // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _SINGLE_LIST_ENTRY ListHead;   // 1 elements, 0x4 bytes (sizeof) 
/*0x004*/     struct _SINGLE_LIST_ENTRY* LastEntry;                                   
          }KDPC_LIST, *PKDPC_LIST;                                                    
                                                                                      
          typedef struct _KDPC_DATA       // 5 elements, 0x18 bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _KDPC_LIST DpcList;  // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      DpcLock;                                          
/*0x00C*/     LONG32       DpcQueueDepth;                                    
/*0x010*/     ULONG32      DpcCount;                                         
/*0x014*/     struct _KDPC* ActiveDpc;                                       
          }KDPC_DATA, *PKDPC_DATA;                                           
                                                                             
          typedef struct _KENTROPY_TIMING_STATE // 4 elements, 0x128 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      EntropyCount;                                            
/*0x004*/     ULONG32      Buffer[64];                                              
/*0x104*/     struct _KDPC Dpc;                 // 11 elements, 0x20 bytes (sizeof) 
/*0x124*/     ULONG32      LastDeliveredBuffer;                                     
          }KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE;                                    
                                                                                    
          typedef struct _KERNEL_STACK_SEGMENT // 4 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      StackBase;                                             
/*0x004*/     ULONG32      StackLimit;                                            
/*0x008*/     ULONG32      KernelStack;                                           
/*0x00C*/     ULONG32      InitialStack;                                          
          }KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT;                                   
                                                                                  
          typedef struct _KGATE                 // 1 elements, 0x10 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 53 elements, 0x10 bytes (sizeof) 
          }KGATE, *PKGATE;                                                          
                                                                                    
          typedef struct _KiIoAccessMap      // 2 elements, 0x2024 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        DirectionMap[32];                                      
/*0x020*/     UINT8        IoMap[8196];                                           
          }KiIoAccessMap, *PKiIoAccessMap;                                        
                                                                                  
          typedef struct _KINTERRUPT                                                   // 32 elements, 0xB0 bytes (sizeof) 
          {                                                                                                                
/*0x000*/     INT16        Type;                                                                                           
/*0x002*/     INT16        Size;                                                                                           
/*0x004*/     struct _LIST_ENTRY InterruptListEntry;                                   // 2 elements, 0x8 bytes (sizeof)   
/*0x00C*/     FUNCT_007F_09CB_ServiceRoutine* ServiceRoutine;                                                              
/*0x010*/     FUNCT_007F_09CF_MessageServiceRoutine* MessageServiceRoutine;                                                
/*0x014*/     ULONG32      MessageIndex;                                                                                   
/*0x018*/     VOID*        ServiceContext;                                                                                 
/*0x01C*/     ULONG32      SpinLock;                                                                                       
/*0x020*/     ULONG32      TickCount;                                                                                      
/*0x024*/     ULONG32*     ActualLock;                                                                                     
/*0x028*/     FUNCT_00C6_025D_PostProcessInitRoutine_DispatchAddress* DispatchAddress;                                     
/*0x02C*/     ULONG32      Vector;                                                                                         
/*0x030*/     UINT8        Irql;                                                                                           
/*0x031*/     UINT8        SynchronizeIrql;                                                                                
/*0x032*/     UINT8        FloatingSave;                                                                                   
/*0x033*/     UINT8        Connected;                                                                                      
/*0x034*/     ULONG32      Number;                                                                                         
/*0x038*/     UINT8        ShareVector;                                                                                    
/*0x039*/     UINT8        EmulateActiveBoth;                                                                              
/*0x03A*/     UINT16       ActiveCount;                                                                                    
/*0x03C*/     LONG32       InternalState;                                                                                  
/*0x040*/     enum _KINTERRUPT_MODE Mode;                                                                                  
/*0x044*/     enum _KINTERRUPT_POLARITY Polarity;                                                                          
/*0x048*/     ULONG32      ServiceCount;                                                                                   
/*0x04C*/     ULONG32      DispatchCount;                                                                                  
/*0x050*/     struct _KEVENT* PassiveEvent;                                                                                
/*0x054*/     VOID*        DisconnectData;                                                                                 
/*0x058*/     struct _KTHREAD* ServiceThread;                                                                              
/*0x05C*/     struct _INTERRUPT_CONNECTION_DATA* ConnectionData;                                                           
/*0x060*/     VOID*        IntTrackEntry;                                                                                  
/*0x064*/     UINT8        _PADDING0_[0x4];                                                                                
/*0x068*/     struct _ISRDPCSTATS IsrDpcStats;                                         // 8 elements, 0x40 bytes (sizeof)  
/*0x0A8*/     VOID*        RedirectObject;                                                                                 
/*0x0AC*/     UINT8        _PADDING1_[0x4];                                                                                
          }KINTERRUPT, *PKINTERRUPT;                                                                                       
                                                                                                                           
          typedef struct _NT_TIB                                    // 8 elements, 0x1C bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;                                    
/*0x004*/     VOID*        StackBase;                                                                  
/*0x008*/     VOID*        StackLimit;                                                                 
/*0x00C*/     VOID*        SubSystemTib;                                                               
              union                                                 // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                        
/*0x010*/         VOID*        FiberData;                                                              
/*0x010*/         ULONG32      Version;                                                                
              };                                                                                       
/*0x014*/     VOID*        ArbitraryUserPointer;                                                       
/*0x018*/     struct _NT_TIB* Self;                                                                    
          }NT_TIB, *PNT_TIB;                                                                           
                                                                                                       
          typedef struct _KSPECIAL_REGISTERS // 17 elements, 0x54 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Cr0;                                                  
/*0x004*/     ULONG32      Cr2;                                                  
/*0x008*/     ULONG32      Cr3;                                                  
/*0x00C*/     ULONG32      Cr4;                                                  
/*0x010*/     ULONG32      KernelDr0;                                            
/*0x014*/     ULONG32      KernelDr1;                                            
/*0x018*/     ULONG32      KernelDr2;                                            
/*0x01C*/     ULONG32      KernelDr3;                                            
/*0x020*/     ULONG32      KernelDr6;                                            
/*0x024*/     ULONG32      KernelDr7;                                            
/*0x028*/     struct _DESCRIPTOR Gdtr;       // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _DESCRIPTOR Idtr;       // 3 elements, 0x8 bytes (sizeof)   
/*0x038*/     UINT16       Tr;                                                   
/*0x03A*/     UINT16       Ldtr;                                                 
/*0x03C*/     UINT64       Xcr0;                                                 
/*0x044*/     ULONG32      ExceptionList;                                        
/*0x048*/     ULONG32      Reserved[3];                                          
          }KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS;                                    
                                                                                 
          typedef struct _KPROCESSOR_STATE                 // 2 elements, 0x320 bytes (sizeof)  
          {                                                                                     
/*0x000*/     struct _CONTEXT ContextFrame;                // 25 elements, 0x2CC bytes (sizeof) 
/*0x2CC*/     struct _KSPECIAL_REGISTERS SpecialRegisters; // 17 elements, 0x54 bytes (sizeof)  
          }KPROCESSOR_STATE, *PKPROCESSOR_STATE;                                                
                                                                                                
          typedef struct _KSPIN_LOCK_QUEUE    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _KSPIN_LOCK_QUEUE* Next;                                   
/*0x004*/     ULONG32*     Lock;                                                
          }KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;                                  
                                                                                
          typedef struct _PP_LOOKASIDE_LIST // 2 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _GENERAL_LOOKASIDE* P;                                   
/*0x004*/     struct _GENERAL_LOOKASIDE* L;                                   
          }PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST;                                  
                                                                              
          typedef struct _KTIMER_TABLE_ENTRY // 3 elements, 0x18 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Lock;                                                
/*0x004*/     struct _LIST_ENTRY Entry;      // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                     
/*0x010*/     union _ULARGE_INTEGER Time;    // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY;                                   
                                                                                
          typedef struct _KTIMER_TABLE                      // 2 elements, 0x1840 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _KTIMER* TimerExpiry[16];                                                   
/*0x040*/     struct _KTIMER_TABLE_ENTRY TimerEntries[256];                                      
          }KTIMER_TABLE, *PKTIMER_TABLE;                                                         
                                                                                                 
          typedef struct _PROC_IDLE_POLICY     // 6 elements, 0x6 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        PromotePercent;                                       
/*0x001*/     UINT8        DemotePercent;                                        
/*0x002*/     UINT8        PromotePercentBase;                                   
/*0x003*/     UINT8        DemotePercentBase;                                    
/*0x004*/     UINT8        AllowScaling;                                         
/*0x005*/     UINT8        ForceLightIdle;                                       
          }PROC_IDLE_POLICY, *PPROC_IDLE_POLICY;                                  
                                                                                 
          typedef union _PPM_IDLE_SYNCHRONIZATION_STATE // 3 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       AsLong;                                                        
/*0x000*/     LONG32       RefCount : 24;               // 0 BitPosition                  
/*0x000*/     ULONG32      State : 8;                   // 24 BitPosition                 
          }PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE;                                  
                                                                                          
          typedef struct _PROC_FEEDBACK                   // 17 elements, 0x88 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Lock;                                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                                   
/*0x008*/     UINT64       CyclesLast;                                                        
/*0x010*/     UINT64       CyclesActive;                                                      
/*0x018*/     struct _PROC_FEEDBACK_COUNTER* Counters[2];                                     
/*0x020*/     UINT64       LastUpdateTime;                                                    
/*0x028*/     UINT64       UnscaledTime;                                                      
/*0x030*/     INT64        UnaccountedTime;                                                   
/*0x038*/     UINT64       ScaledTime[2];                                                     
/*0x048*/     UINT64       UnaccountedKernelTime;                                             
/*0x050*/     UINT64       PerformanceScaledKernelTime;                                       
/*0x058*/     ULONG32      UserTimeLast;                                                      
/*0x05C*/     ULONG32      KernelTimeLast;                                                    
/*0x060*/     UINT64       IdleGenerationNumberLast;                                          
/*0x068*/     UINT64       HvActiveTimeLast;                                                  
/*0x070*/     UINT64       StallCyclesLast;                                                   
/*0x078*/     UINT64       StallTime;                                                         
/*0x080*/     UINT8        KernelTimesIndex;                                                  
/*0x081*/     UINT8        _PADDING1_[0x7];                                                   
          }PROC_FEEDBACK, *PPROC_FEEDBACK;                                                    
                                                                                              
          typedef struct _PPM_FFH_THROTTLE_STATE_INFO // 5 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT8        EnableLogging;                                                
/*0x001*/     UINT8        _PADDING0_[0x3];                                              
/*0x004*/     ULONG32      MismatchCount;                                                
/*0x008*/     UINT8        Initialized;                                                  
/*0x009*/     UINT8        _PADDING1_[0x7];                                              
/*0x010*/     UINT64       LastValue;                                                    
/*0x018*/     union _LARGE_INTEGER LastLogTickCount;  // 4 elements, 0x8 bytes (sizeof)  
          }PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO;                                   
                                                                                         
          typedef struct _PROC_IDLE_SNAP // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Time;                                            
/*0x008*/     UINT64       Idle;                                            
          }PROC_IDLE_SNAP, *PPROC_IDLE_SNAP;                                   
                                                                            
          typedef struct _PROCESSOR_POWER_STATE                         // 40 elements, 0x180 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     struct _PPM_IDLE_STATES* IdleStates;                                                           
/*0x004*/     struct _PROC_IDLE_ACCOUNTING* IdleAccounting;                                                  
/*0x008*/     UINT64       IdleTimeLast;                                                                     
/*0x010*/     UINT64       IdleTimeTotal;                                                                    
/*0x018*/     UINT64       IdleTimeEntry;                                                                    
/*0x020*/     UINT64       IdleTimeExpiration;                                                               
/*0x028*/     UINT8        NonInterruptibleTransition;                                                       
/*0x029*/     UINT8        PepWokenTransition;                                                               
/*0x02A*/     UINT8        Class;                                                                            
/*0x02B*/     UINT8        _PADDING0_[0x1];                                                                  
/*0x02C*/     ULONG32      TargetIdleState;                                                                  
/*0x030*/     struct _PROC_IDLE_POLICY IdlePolicy;                      // 6 elements, 0x6 bytes (sizeof)    
/*0x036*/     UINT8        _PADDING1_[0x2];                                                                  
/*0x038*/     union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;    // 3 elements, 0x4 bytes (sizeof)    
/*0x03C*/     UINT8        _PADDING2_[0x4];                                                                  
/*0x040*/     struct _PROC_FEEDBACK PerfFeedback;                       // 17 elements, 0x88 bytes (sizeof)  
/*0x0C8*/     enum _PROC_HYPERVISOR_STATE Hypervisor;                                                        
/*0x0CC*/     ULONG32      LastSysTime;                                                                      
/*0x0D0*/     ULONG32      WmiDispatchPtr;                                                                   
/*0x0D4*/     LONG32       WmiInterfaceEnabled;                                                              
/*0x0D8*/     struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo; // 5 elements, 0x20 bytes (sizeof)   
/*0x0F8*/     struct _KDPC PerfActionDpc;                               // 11 elements, 0x20 bytes (sizeof)  
/*0x118*/     LONG32       PerfActionMask;                                                                   
/*0x11C*/     UINT8        _PADDING3_[0x4];                                                                  
/*0x120*/     struct _PROC_IDLE_SNAP HvIdleCheck;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x130*/     struct _PROC_PERF_CHECK* PerfCheck;                                                            
/*0x134*/     struct _PROC_PERF_DOMAIN* Domain;                                                              
/*0x138*/     struct _PROC_PERF_CONSTRAINT* PerfConstraint;                                                  
/*0x13C*/     struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;                                               
/*0x140*/     struct _PROC_PERF_LOAD* Load;                                                                  
/*0x144*/     struct _PROC_PERF_HISTORY* PerfHistory;                                                        
/*0x148*/     UINT8        GuaranteedPerformancePercent;                                                     
/*0x149*/     UINT8        HvTargetState;                                                                    
/*0x14A*/     UINT8        Parked;                                                                           
/*0x14B*/     UINT8        _PADDING4_[0x1];                                                                  
/*0x14C*/     ULONG32      LatestPerformancePercent;                                                         
/*0x150*/     ULONG32      AveragePerformancePercent;                                                        
/*0x154*/     ULONG32      LatestAffinitizedPercent;                                                         
/*0x158*/     ULONG32      RelativePerformance;                                                              
/*0x15C*/     ULONG32      Utility;                                                                          
/*0x160*/     ULONG32      AffinitizedUtility;                                                               
/*0x164*/     UINT8        _PADDING5_[0x4];                                                                  
              union                                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                              
/*0x168*/         UINT64       SnapTimeLast;                                                                 
/*0x168*/         UINT64       EnergyConsumed;                                                               
              };                                                                                             
/*0x170*/     UINT64       ActiveTime;                                                                       
/*0x178*/     UINT64       TotalTime;                                                                        
          }PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE;                                                   
                                                                                                             
          typedef struct _SYNCH_COUNTERS                                          // 46 elements, 0xB8 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     ULONG32      SpinLockAcquireCount;                                                                      
/*0x004*/     ULONG32      SpinLockContentionCount;                                                                   
/*0x008*/     ULONG32      SpinLockSpinCount;                                                                         
/*0x00C*/     ULONG32      IpiSendRequestBroadcastCount;                                                              
/*0x010*/     ULONG32      IpiSendRequestRoutineCount;                                                                
/*0x014*/     ULONG32      IpiSendSoftwareInterruptCount;                                                             
/*0x018*/     ULONG32      ExInitializeResourceCount;                                                                 
/*0x01C*/     ULONG32      ExReInitializeResourceCount;                                                               
/*0x020*/     ULONG32      ExDeleteResourceCount;                                                                     
/*0x024*/     ULONG32      ExecutiveResourceAcquiresCount;                                                            
/*0x028*/     ULONG32      ExecutiveResourceContentionsCount;                                                         
/*0x02C*/     ULONG32      ExecutiveResourceReleaseExclusiveCount;                                                    
/*0x030*/     ULONG32      ExecutiveResourceReleaseSharedCount;                                                       
/*0x034*/     ULONG32      ExecutiveResourceConvertsCount;                                                            
/*0x038*/     ULONG32      ExAcqResExclusiveAttempts;                                                                 
/*0x03C*/     ULONG32      ExAcqResExclusiveAcquiresExclusive;                                                        
/*0x040*/     ULONG32      ExAcqResExclusiveAcquiresExclusiveRecursive;                                               
/*0x044*/     ULONG32      ExAcqResExclusiveWaits;                                                                    
/*0x048*/     ULONG32      ExAcqResExclusiveNotAcquires;                                                              
/*0x04C*/     ULONG32      ExAcqResSharedAttempts;                                                                    
/*0x050*/     ULONG32      ExAcqResSharedAcquiresExclusive;                                                           
/*0x054*/     ULONG32      ExAcqResSharedAcquiresShared;                                                              
/*0x058*/     ULONG32      ExAcqResSharedAcquiresSharedRecursive;                                                     
/*0x05C*/     ULONG32      ExAcqResSharedWaits;                                                                       
/*0x060*/     ULONG32      ExAcqResSharedNotAcquires;                                                                 
/*0x064*/     ULONG32      ExAcqResSharedStarveExclusiveAttempts;                                                     
/*0x068*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresExclusive;                                            
/*0x06C*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresShared;                                               
/*0x070*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;                                      
/*0x074*/     ULONG32      ExAcqResSharedStarveExclusiveWaits;                                                        
/*0x078*/     ULONG32      ExAcqResSharedStarveExclusiveNotAcquires;                                                  
/*0x07C*/     ULONG32      ExAcqResSharedWaitForExclusiveAttempts;                                                    
/*0x080*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresExclusive;                                           
/*0x084*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresShared;                                              
/*0x088*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;                                     
/*0x08C*/     ULONG32      ExAcqResSharedWaitForExclusiveWaits;                                                       
/*0x090*/     ULONG32      ExAcqResSharedWaitForExclusiveNotAcquires;                                                 
/*0x094*/     ULONG32      ExSetResOwnerPointerExclusive;                                                             
/*0x098*/     ULONG32      ExSetResOwnerPointerSharedNew;                                                             
/*0x09C*/     ULONG32      ExSetResOwnerPointerSharedOld;                                                             
/*0x0A0*/     ULONG32      ExTryToAcqExclusiveAttempts;                                                               
/*0x0A4*/     ULONG32      ExTryToAcqExclusiveAcquires;                                                               
/*0x0A8*/     ULONG32      ExBoostExclusiveOwner;                                                                     
/*0x0AC*/     ULONG32      ExBoostSharedOwners;                                                                       
/*0x0B0*/     ULONG32      ExEtwSynchTrackingNotificationsCount;                                                      
/*0x0B4*/     ULONG32      ExEtwSynchTrackingNotificationsAccountedCount;                                             
          }SYNCH_COUNTERS, *PSYNCH_COUNTERS;                                                                          
                                                                                                                      
          typedef struct _KTIMER_EXPIRATION_TRACE      // 2 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       InterruptTime;                                                 
/*0x008*/     union _LARGE_INTEGER PerformanceCounter; // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE;                                   
                                                                                          
          typedef struct _KSHARED_READY_QUEUE       // 11 elements, 0x134 bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      Lock;                                                         
/*0x004*/     ULONG32      ReadySummary;                                                 
/*0x008*/     struct _LIST_ENTRY ReadyListHead[32];                                      
/*0x108*/     CHAR         RunningSummary[32];                                           
/*0x128*/     UINT8        Span;                                                         
/*0x129*/     UINT8        LowProcIndex;                                                 
/*0x12A*/     UINT8        QueueIndex;                                                   
/*0x12B*/     UINT8        ProcCount;                                                    
/*0x12C*/     UINT8        ScanOwner;                                                    
/*0x12D*/     UINT8        Spare[3];                                                     
/*0x130*/     ULONG32      Affinity;                                                     
          }KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE;                                     
                                                                                         
          typedef struct _KREQUEST_PACKET                   // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                    
/*0x000*/     VOID*        CurrentPacket[3];                                                   
/*0x00C*/     FUNCT_00C6_0760_WorkerRoutine* WorkerRoutine;                                    
          }KREQUEST_PACKET, *PKREQUEST_PACKET;                                                 
                                                                                               
          typedef struct _REQUEST_MAILBOX            // 5 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _REQUEST_MAILBOX* Next;                                            
/*0x004*/     ULONG32      RequestSummary;                                              
/*0x008*/     struct _KREQUEST_PACKET RequestPacket; // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     LONG32*      NodeTargetCountAddr;                                         
/*0x01C*/     LONG32       NodeTargetCount;                                             
          }REQUEST_MAILBOX, *PREQUEST_MAILBOX;                                          
                                                                                        
           typedef struct _KPRCB                                                    // 255 elements, 0x4950 bytes (sizeof) 
           {                                                                                                               
/*0x000*/      UINT16       MinorVersion;                                                                                  
/*0x002*/      UINT16       MajorVersion;                                                                                  
/*0x004*/      struct _KTHREAD* CurrentThread;                                                                             
/*0x008*/      struct _KTHREAD* NextThread;                                                                                
/*0x00C*/      struct _KTHREAD* IdleThread;                                                                                
/*0x010*/      UINT8        LegacyNumber;                                                                                  
/*0x011*/      UINT8        NestingLevel;                                                                                  
/*0x012*/      UINT16       BuildType;                                                                                     
/*0x014*/      CHAR         CpuType;                                                                                       
/*0x015*/      CHAR         CpuID;                                                                                         
               union                                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                                           
/*0x016*/          UINT16       CpuStep;                                                                                   
                   struct                                                           // 2 elements, 0x2 bytes (sizeof)      
                   {                                                                                                       
/*0x016*/              UINT8        CpuStepping;                                                                           
/*0x017*/              UINT8        CpuModel;                                                                              
                   };                                                                                                      
               };                                                                                                          
/*0x018*/      struct _KPROCESSOR_STATE ProcessorState;                             // 2 elements, 0x320 bytes (sizeof)    
/*0x338*/      struct _KNODE* ParentNode;                                                                                  
/*0x33C*/      CHAR*        PriorityState;                                                                                 
/*0x340*/      ULONG32      KernelReserved[14];                                                                            
/*0x378*/      ULONG32      HalReserved[16];                                                                               
/*0x3B8*/      ULONG32      CFlushSize;                                                                                    
/*0x3BC*/      UINT8        CoresPerPhysicalProcessor;                                                                     
/*0x3BD*/      UINT8        LogicalProcessorsPerCore;                                                                      
/*0x3BE*/      UINT8        CpuVendor;                                                                                     
/*0x3BF*/      UINT8        PrcbPad0[1];                                                                                   
/*0x3C0*/      ULONG32      MHz;                                                                                           
/*0x3C4*/      UINT8        GroupIndex;                                                                                    
/*0x3C5*/      UINT8        Group;                                                                                         
/*0x3C6*/      UINT8        PrcbPad05[2];                                                                                  
/*0x3C8*/      ULONG32      GroupSetMember;                                                                                
/*0x3CC*/      ULONG32      Number;                                                                                        
/*0x3D0*/      UINT8        ClockOwner;                                                                                    
               union                                                                // 2 elements, 0x1 bytes (sizeof)      
               {                                                                                                           
/*0x3D1*/          UINT8        PendingTickFlags;                                                                          
                   struct                                                           // 2 elements, 0x1 bytes (sizeof)      
                   {                                                                                                       
/*0x3D1*/              UINT8        PendingTick : 1;                                // 0 BitPosition                       
/*0x3D1*/              UINT8        PendingBackupTick : 1;                          // 1 BitPosition                       
                   };                                                                                                      
               };                                                                                                          
/*0x3D2*/      UINT8        PrcbPad10[70];                                                                                 
/*0x418*/      struct _KSPIN_LOCK_QUEUE LockQueue[17];                                                                     
/*0x4A0*/      ULONG32      InterruptCount;                                                                                
/*0x4A4*/      ULONG32      KernelTime;                                                                                    
/*0x4A8*/      ULONG32      UserTime;                                                                                      
/*0x4AC*/      ULONG32      DpcTime;                                                                                       
/*0x4B0*/      ULONG32      DpcTimeCount;                                                                                  
/*0x4B4*/      ULONG32      InterruptTime;                                                                                 
/*0x4B8*/      ULONG32      AdjustDpcThreshold;                                                                            
/*0x4BC*/      ULONG32      PageColor;                                                                                     
/*0x4C0*/      UINT8        DebuggerSavedIRQL;                                                                             
/*0x4C1*/      UINT8        NodeColor;                                                                                     
/*0x4C2*/      UINT8        DeepSleep;                                                                                     
/*0x4C3*/      UINT8        PrcbPad20[5];                                                                                  
/*0x4C8*/      ULONG32      NodeShiftedColor;                                                                              
/*0x4CC*/      ULONG32      SecondaryColorMask;                                                                            
/*0x4D0*/      ULONG32      DpcTimeLimit;                                                                                  
/*0x4D4*/      ULONG32      PrcbPad21[3];                                                                                  
/*0x4E0*/      ULONG32      CcFastReadNoWait;                                                                              
/*0x4E4*/      ULONG32      CcFastReadWait;                                                                                
/*0x4E8*/      ULONG32      CcFastReadNotPossible;                                                                         
/*0x4EC*/      ULONG32      CcCopyReadNoWait;                                                                              
/*0x4F0*/      ULONG32      CcCopyReadWait;                                                                                
/*0x4F4*/      ULONG32      CcCopyReadNoWaitMiss;                                                                          
/*0x4F8*/      LONG32       MmSpinLockOrdering;                                                                            
/*0x4FC*/      LONG32       IoReadOperationCount;                                                                          
/*0x500*/      LONG32       IoWriteOperationCount;                                                                         
/*0x504*/      LONG32       IoOtherOperationCount;                                                                         
/*0x508*/      union _LARGE_INTEGER IoReadTransferCount;                            // 4 elements, 0x8 bytes (sizeof)      
/*0x510*/      union _LARGE_INTEGER IoWriteTransferCount;                           // 4 elements, 0x8 bytes (sizeof)      
/*0x518*/      union _LARGE_INTEGER IoOtherTransferCount;                           // 4 elements, 0x8 bytes (sizeof)      
/*0x520*/      ULONG32      CcFastMdlReadNoWait;                                                                           
/*0x524*/      ULONG32      CcFastMdlReadWait;                                                                             
/*0x528*/      ULONG32      CcFastMdlReadNotPossible;                                                                      
/*0x52C*/      ULONG32      CcMapDataNoWait;                                                                               
/*0x530*/      ULONG32      CcMapDataWait;                                                                                 
/*0x534*/      ULONG32      CcPinMappedDataCount;                                                                          
/*0x538*/      ULONG32      CcPinReadNoWait;                                                                               
/*0x53C*/      ULONG32      CcPinReadWait;                                                                                 
/*0x540*/      ULONG32      CcMdlReadNoWait;                                                                               
/*0x544*/      ULONG32      CcMdlReadWait;                                                                                 
/*0x548*/      ULONG32      CcLazyWriteHotSpots;                                                                           
/*0x54C*/      ULONG32      CcLazyWriteIos;                                                                                
/*0x550*/      ULONG32      CcLazyWritePages;                                                                              
/*0x554*/      ULONG32      CcDataFlushes;                                                                                 
/*0x558*/      ULONG32      CcDataPages;                                                                                   
/*0x55C*/      ULONG32      CcLostDelayedWrites;                                                                           
/*0x560*/      ULONG32      CcFastReadResourceMiss;                                                                        
/*0x564*/      ULONG32      CcCopyReadWaitMiss;                                                                            
/*0x568*/      ULONG32      CcFastMdlReadResourceMiss;                                                                     
/*0x56C*/      ULONG32      CcMapDataNoWaitMiss;                                                                           
/*0x570*/      ULONG32      CcMapDataWaitMiss;                                                                             
/*0x574*/      ULONG32      CcPinReadNoWaitMiss;                                                                           
/*0x578*/      ULONG32      CcPinReadWaitMiss;                                                                             
/*0x57C*/      ULONG32      CcMdlReadNoWaitMiss;                                                                           
/*0x580*/      ULONG32      CcMdlReadWaitMiss;                                                                             
/*0x584*/      ULONG32      CcReadAheadIos;                                                                                
/*0x588*/      ULONG32      KeAlignmentFixupCount;                                                                         
/*0x58C*/      ULONG32      KeExceptionDispatchCount;                                                                      
/*0x590*/      ULONG32      KeSystemCalls;                                                                                 
/*0x594*/      ULONG32      AvailableTime;                                                                                 
/*0x598*/      ULONG32      PrcbPad22[2];                                                                                  
/*0x5A0*/      struct _PP_LOOKASIDE_LIST PPLookasideList[16];                                                              
/*0x620*/      struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];                                                  
/*0xF20*/      struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];                                                   
/*0x1820*/     struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                                                    
/*0x2120*/     LONG32       PacketBarrier;                                                                                 
/*0x2124*/     LONG32       ReverseStall;                                                                                  
/*0x2128*/     VOID*        IpiFrame;                                                                                      
/*0x212C*/     UINT8        PrcbPad3[52];                                                                                  
/*0x2160*/     VOID*        CurrentPacket[3];                                                                              
/*0x216C*/     ULONG32      TargetSet;                                                                                     
/*0x2170*/     FUNCT_00C6_0760_WorkerRoutine* WorkerRoutine;                                                               
/*0x2174*/     ULONG32      IpiFrozen;                                                                                     
/*0x2178*/     UINT8        PrcbPad4[40];                                                                                  
/*0x21A0*/     ULONG32      RequestSummary;                                                                                
/*0x21A4*/     LONG32       TargetCount;                                                                                   
/*0x21A8*/     UINT8        PrcbPad50[40];                                                                                 
/*0x21D0*/     ULONG32      InterruptLastCount;                                                                            
/*0x21D4*/     ULONG32      InterruptRate;                                                                                 
/*0x21D8*/     ULONG32      DeviceInterrupts;                                                                              
/*0x21DC*/     VOID*        IsrDpcStats;                                                                                   
/*0x21E0*/     struct _KDPC_DATA DpcData[2];                                                                               
/*0x2210*/     VOID*        DpcStack;                                                                                      
/*0x2214*/     LONG32       MaximumDpcQueueDepth;                                                                          
/*0x2218*/     ULONG32      DpcRequestRate;                                                                                
/*0x221C*/     ULONG32      MinimumDpcRate;                                                                                
/*0x2220*/     ULONG32      DpcLastCount;                                                                                  
/*0x2224*/     ULONG32      PrcbLock;                                                                                      
/*0x2228*/     struct _KGATE DpcGate;                                               // 1 elements, 0x10 bytes (sizeof)     
/*0x2238*/     UINT8        IdleState;                                                                                     
/*0x2239*/     UINT8        QuantumEnd;                                                                                    
/*0x223A*/     UINT8        DpcRoutineActive;                                                                              
/*0x223B*/     UINT8        IdleSchedule;                                                                                  
               union                                                                // 4 elements, 0x4 bytes (sizeof)      
               {                                                                                                           
/*0x223C*/         LONG32       DpcRequestSummary;                                                                         
/*0x223C*/         INT16        DpcRequestSlot[2];                                                                         
                   struct                                                           // 2 elements, 0x4 bytes (sizeof)      
                   {                                                                                                       
/*0x223C*/             INT16        NormalDpcState;                                                                        
/*0x223E*/             INT16        ThreadDpcState;                                                                        
                   };                                                                                                      
                   struct                                                           // 10 elements, 0x4 bytes (sizeof)     
                   {                                                                                                       
/*0x223C*/             ULONG32      DpcNormalProcessingActive : 1;                  // 0 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalProcessingRequested : 1;               // 1 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalThreadSignal : 1;                      // 2 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalTimerExpiration : 1;                   // 3 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalDpcPresent : 1;                        // 4 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalLocalInterrupt : 1;                    // 5 BitPosition                       
/*0x223C*/             ULONG32      DpcNormalSpare : 10;                            // 6 BitPosition                       
/*0x223C*/             ULONG32      DpcThreadActive : 1;                            // 16 BitPosition                      
/*0x223C*/             ULONG32      DpcThreadRequested : 1;                         // 17 BitPosition                      
/*0x223C*/             ULONG32      DpcThreadSpare : 14;                            // 18 BitPosition                      
                   };                                                                                                      
               };                                                                                                          
/*0x2240*/     ULONG32      LastTimerHand;                                                                                 
/*0x2244*/     ULONG32      LastTick;                                                                                      
/*0x2248*/     ULONG32      PeriodicCount;                                                                                 
/*0x224C*/     ULONG32      PeriodicBias;                                                                                  
/*0x2250*/     ULONG32      ClockInterrupts;                                                                               
/*0x2254*/     ULONG32      ReadyScanTick;                                                                                 
/*0x2258*/     UINT8        GroupSchedulingOverQuota;                                                                      
/*0x2259*/     UINT8        ThreadDpcEnable;                                                                               
/*0x225A*/     UINT8        PrcbPad41[2];                                                                                  
/*0x225C*/     UINT8        _PADDING0_[0x4];                                                                               
/*0x2260*/     struct _KTIMER_TABLE TimerTable;                                     // 2 elements, 0x1840 bytes (sizeof)   
/*0x3AA0*/     struct _KDPC CallDpc;                                                // 11 elements, 0x20 bytes (sizeof)    
/*0x3AC0*/     LONG32       ClockKeepAlive;                                                                                
/*0x3AC4*/     UINT8        PrcbPad6[4];                                                                                   
/*0x3AC8*/     LONG32       DpcWatchdogPeriod;                                                                             
/*0x3ACC*/     LONG32       DpcWatchdogCount;                                                                              
/*0x3AD0*/     LONG32       KeSpinLockOrdering;                                                                            
/*0x3AD4*/     ULONG32      PrcbPad70[1];                                                                                  
/*0x3AD8*/     ULONG32      QueueIndex;                                                                                    
/*0x3ADC*/     struct _SINGLE_LIST_ENTRY DeferredReadyListHead;                     // 1 elements, 0x4 bytes (sizeof)      
/*0x3AE0*/     ULONG32      ReadySummary;                                                                                  
/*0x3AE4*/     LONG32       AffinitizedSelectionMask;                                                                      
/*0x3AE8*/     ULONG32      WaitLock;                                                                                      
/*0x3AEC*/     struct _LIST_ENTRY WaitListHead;                                     // 2 elements, 0x8 bytes (sizeof)      
/*0x3AF4*/     ULONG32      ScbOffset;                                                                                     
/*0x3AF8*/     UINT64       StartCycles;                                                                                   
/*0x3B00*/     UINT64       TaggedCyclesStart;                                                                             
/*0x3B08*/     UINT64       TaggedCycles[2];                                                                               
/*0x3B18*/     UINT64       GenerationTarget;                                                                              
/*0x3B20*/     UINT64       CycleTime;                                                                                     
/*0x3B28*/     UINT64       AffinitizedCycles;                                                                             
/*0x3B30*/     ULONG32      HighCycleTime;                                                                                 
/*0x3B34*/     UINT8        _PADDING1_[0x4];                                                                               
/*0x3B38*/     UINT64       Cycles[2][4];                                                                                  
/*0x3B78*/     ULONG32      PrcbPad71[10];                                                                                 
/*0x3BA0*/     struct _LIST_ENTRY DispatcherReadyListHead[32];                                                             
/*0x3CA0*/     VOID*        ChainedInterruptList;                                                                          
/*0x3CA4*/     LONG32       LookasideIrpFloat;                                                                             
/*0x3CA8*/     struct _RTL_RB_TREE ScbQueue;                                        // 2 elements, 0x8 bytes (sizeof)      
/*0x3CB0*/     struct _LIST_ENTRY ScbList;                                          // 2 elements, 0x8 bytes (sizeof)      
/*0x3CB8*/     LONG32       MmPageFaultCount;                                                                              
/*0x3CBC*/     LONG32       MmCopyOnWriteCount;                                                                            
/*0x3CC0*/     LONG32       MmTransitionCount;                                                                             
/*0x3CC4*/     LONG32       MmCacheTransitionCount;                                                                        
/*0x3CC8*/     LONG32       MmDemandZeroCount;                                                                             
/*0x3CCC*/     LONG32       MmPageReadCount;                                                                               
/*0x3CD0*/     LONG32       MmPageReadIoCount;                                                                             
/*0x3CD4*/     LONG32       MmCacheReadCount;                                                                              
/*0x3CD8*/     LONG32       MmCacheIoCount;                                                                                
/*0x3CDC*/     LONG32       MmDirtyPagesWriteCount;                                                                        
/*0x3CE0*/     LONG32       MmDirtyWriteIoCount;                                                                           
/*0x3CE4*/     LONG32       MmMappedPagesWriteCount;                                                                       
/*0x3CE8*/     LONG32       MmMappedWriteIoCount;                                                                          
/*0x3CEC*/     ULONG32      CachedCommit;                                                                                  
/*0x3CF0*/     ULONG32      CachedResidentAvailable;                                                                       
/*0x3CF4*/     VOID*        HyperPte;                                                                                      
/*0x3CF8*/     UINT8        PrcbPad8[4];                                                                                   
/*0x3CFC*/     UINT8        VendorString[13];                                                                              
/*0x3D09*/     UINT8        InitialApicId;                                                                                 
/*0x3D0A*/     UINT8        LogicalProcessorsPerPhysicalProcessor;                                                         
/*0x3D0B*/     UINT8        PrcbPad9[1];                                                                                   
/*0x3D0C*/     UINT8        _PADDING2_[0x4];                                                                               
/*0x3D10*/     UINT64       FeatureBits;                                                                                   
/*0x3D18*/     union _LARGE_INTEGER UpdateSignature;                                // 4 elements, 0x8 bytes (sizeof)      
/*0x3D20*/     UINT64       IsrTime;                                                                                       
/*0x3D28*/     ULONG32      PrcbPad90[2];                                                                                  
/*0x3D30*/     struct _PROCESSOR_POWER_STATE PowerState;                            // 40 elements, 0x180 bytes (sizeof)   
/*0x3EB0*/     ULONG32      PrcbPad91[17];                                                                                 
/*0x3EF4*/     struct _KDPC DpcWatchdogDpc;                                         // 11 elements, 0x20 bytes (sizeof)    
/*0x3F14*/     UINT8        _PADDING3_[0x4];                                                                               
/*0x3F18*/     struct _KTIMER DpcWatchdogTimer;                                     // 5 elements, 0x28 bytes (sizeof)     
/*0x3F40*/     union _SLIST_HEADER HypercallPageList;                               // 4 elements, 0x8 bytes (sizeof)      
/*0x3F48*/     VOID*        HypercallCachedPages;                                                                          
/*0x3F4C*/     VOID*        VirtualApicAssist;                                                                             
/*0x3F50*/     UINT64*      StatisticsPage;                                                                                
/*0x3F54*/     struct _CACHE_DESCRIPTOR Cache[5];                                                                          
/*0x3F90*/     ULONG32      CacheCount;                                                                                    
/*0x3F94*/     struct _KAFFINITY_EX PackageProcessorSet;                            // 4 elements, 0x58 bytes (sizeof)     
/*0x3FEC*/     ULONG32      SharedReadyQueueMask;                                                                          
/*0x3FF0*/     struct _KSHARED_READY_QUEUE* SharedReadyQueue;                                                              
/*0x3FF4*/     ULONG32      SharedQueueScanOwner;                                                                          
/*0x3FF8*/     ULONG32      CoreProcessorSet;                                                                              
/*0x3FFC*/     ULONG32      ScanSiblingMask;                                                                               
/*0x4000*/     ULONG32      LLCMask;                                                                                       
/*0x4004*/     ULONG32      CacheProcessorMask[5];                                                                         
/*0x4018*/     ULONG32      ScanSiblingIndex;                                                                              
/*0x401C*/     VOID*        WheaInfo;                                                                                      
/*0x4020*/     VOID*        EtwSupport;                                                                                    
/*0x4024*/     UINT8        _PADDING4_[0x4];                                                                               
/*0x4028*/     union _SLIST_HEADER InterruptObjectPool;                             // 4 elements, 0x8 bytes (sizeof)      
/*0x4030*/     ULONG32      PrcbPad92[3];                                                                                  
/*0x403C*/     ULONG32      PteBitCache;                                                                                   
/*0x4040*/     ULONG32      PteBitOffset;                                                                                  
/*0x4044*/     ULONG32      PrcbPad93;                                                                                     
/*0x4048*/     struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;                                        
/*0x404C*/     VOID*        ProfileEventIndexAddress;                                                                      
/*0x4050*/     struct _KDPC TimerExpirationDpc;                                     // 11 elements, 0x20 bytes (sizeof)    
/*0x4070*/     struct _SYNCH_COUNTERS SynchCounters;                                // 46 elements, 0xB8 bytes (sizeof)    
/*0x4128*/     struct _FILESYSTEM_DISK_COUNTERS FsCounters;                         // 2 elements, 0x10 bytes (sizeof)     
/*0x4138*/     struct _CONTEXT* Context;                                                                                   
/*0x413C*/     ULONG32      ContextFlagsInit;                                                                              
/*0x4140*/     struct _XSAVE_AREA* ExtendedState;                                                                          
/*0x4144*/     struct _KENTROPY_TIMING_STATE EntropyTimingState;                    // 4 elements, 0x128 bytes (sizeof)    
/*0x426C*/     VOID*        IsrStack;                                                                                      
/*0x4270*/     struct _KINTERRUPT* VectorToInterruptObject[208];                                                           
/*0x45B0*/     struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;                        // 1 elements, 0x4 bytes (sizeof)      
/*0x45B4*/     struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;                     // 1 elements, 0x4 bytes (sizeof)      
/*0x45B8*/     struct _KDPC AbDpc;                                                  // 11 elements, 0x20 bytes (sizeof)    
/*0x45D8*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;            // 2 elements, 0x54 bytes (sizeof)     
/*0x462C*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;           // 2 elements, 0x54 bytes (sizeof)     
/*0x4680*/     struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];                                                   
/*0x4780*/     ULONG32      TimerExpirationTraceCount;                                                                     
/*0x4784*/     VOID*        ExSaPageArray;                                                                                 
/*0x4788*/     ULONG32      PrcbPad100[10];                                                                                
/*0x47B0*/     struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;                   // 11 elements, 0x134 bytes (sizeof)   
/*0x48E4*/     UINT8        PrcbPad95[12];                                                                                 
/*0x48F0*/     struct _REQUEST_MAILBOX* Mailbox;                                                                           
/*0x48F4*/     UINT8        PrcbPad[60];                                                                                   
/*0x4930*/     struct _REQUEST_MAILBOX RequestMailbox[1];                                                                  
           }KPRCB, *PKPRCB;                                                                                                
                                                                                                                           
          typedef struct _KPCR                                                   // 34 elements, 0x4A70 bytes (sizeof)  
          {                                                                                                             
              union                                                              // 2 elements, 0x1C bytes (sizeof)     
              {                                                                                                         
/*0x000*/         struct _NT_TIB NtTib;                                          // 8 elements, 0x1C bytes (sizeof)     
                  struct                                                         // 7 elements, 0x1C bytes (sizeof)     
                  {                                                                                                     
/*0x000*/             struct _EXCEPTION_REGISTRATION_RECORD* Used_ExceptionList;                                        
/*0x004*/             VOID*        Used_StackBase;                                                                      
/*0x008*/             ULONG32      MxCsr;                                                                               
/*0x00C*/             VOID*        TssCopy;                                                                             
/*0x010*/             ULONG32      ContextSwitches;                                                                     
/*0x014*/             ULONG32      SetMemberCopy;                                                                       
/*0x018*/             VOID*        Used_Self;                                                                           
                  };                                                                                                    
              };                                                                                                        
/*0x01C*/     struct _KPCR* SelfPcr;                                                                                    
/*0x020*/     struct _KPRCB* Prcb;                                                                                      
/*0x024*/     UINT8        Irql;                                                                                        
/*0x025*/     UINT8        _PADDING0_[0x3];                                                                             
/*0x028*/     ULONG32      IRR;                                                                                         
/*0x02C*/     ULONG32      IrrActive;                                                                                   
/*0x030*/     ULONG32      IDR;                                                                                         
/*0x034*/     VOID*        KdVersionBlock;                                                                              
/*0x038*/     struct _KIDTENTRY* IDT;                                                                                   
/*0x03C*/     struct _KGDTENTRY* GDT;                                                                                   
/*0x040*/     struct _KTSS* TSS;                                                                                        
/*0x044*/     UINT16       MajorVersion;                                                                                
/*0x046*/     UINT16       MinorVersion;                                                                                
/*0x048*/     ULONG32      SetMember;                                                                                   
/*0x04C*/     ULONG32      StallScaleFactor;                                                                            
/*0x050*/     UINT8        SpareUnused;                                                                                 
/*0x051*/     UINT8        Number;                                                                                      
/*0x052*/     UINT8        Spare0;                                                                                      
/*0x053*/     UINT8        SecondLevelCacheAssociativity;                                                               
/*0x054*/     ULONG32      VdmAlert;                                                                                    
/*0x058*/     ULONG32      KernelReserved[14];                                                                          
/*0x090*/     ULONG32      SecondLevelCacheSize;                                                                        
/*0x094*/     ULONG32      HalReserved[16];                                                                             
/*0x0D4*/     ULONG32      InterruptMode;                                                                               
/*0x0D8*/     UINT8        Spare1;                                                                                      
/*0x0D9*/     UINT8        _PADDING1_[0x3];                                                                             
/*0x0DC*/     ULONG32      KernelReserved2[17];                                                                         
/*0x120*/     struct _KPRCB PrcbData;                                            // 255 elements, 0x4950 bytes (sizeof) 
          }KPCR, *PKPCR;                                                                                                
                                                                                                                        
          typedef struct _KQUEUE                 // 5 elements, 0x28 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 53 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY EntryListHead;  // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     ULONG32      CurrentCount;                                             
/*0x01C*/     ULONG32      MaximumCount;                                             
/*0x020*/     struct _LIST_ENTRY ThreadListHead; // 2 elements, 0x8 bytes (sizeof)   
          }KQUEUE, *PKQUEUE;                                                         
                                                                                     
          typedef struct _KSCB                      // 24 elements, 0xF8 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       GenerationCycles;                                            
/*0x008*/     UINT64       MinQuotaCycleTarget;                                         
/*0x010*/     UINT64       MaxQuotaCycleTarget;                                         
/*0x018*/     UINT64       RankCycleTarget;                                             
/*0x020*/     UINT64       LongTermCycles;                                              
/*0x028*/     UINT64       LastReportedCycles;                                          
/*0x030*/     UINT64       OverQuotaHistory;                                            
/*0x038*/     UINT64       ReadyTime;                                                   
/*0x040*/     UINT64       InsertTime;                                                  
/*0x048*/     struct _LIST_ENTRY PerProcessorList;  // 2 elements, 0x8 bytes (sizeof)   
/*0x050*/     struct _RTL_BALANCED_NODE QueueNode;  // 6 elements, 0xC bytes (sizeof)   
              struct                                // 6 elements, 0x1 bytes (sizeof)   
              {                                                                         
/*0x05C*/         UINT8        Inserted : 1;        // 0 BitPosition                    
/*0x05C*/         UINT8        MaxOverQuota : 1;    // 1 BitPosition                    
/*0x05C*/         UINT8        MinOverQuota : 1;    // 2 BitPosition                    
/*0x05C*/         UINT8        RankBias : 1;        // 3 BitPosition                    
/*0x05C*/         UINT8        SoftCap : 1;         // 4 BitPosition                    
/*0x05C*/         UINT8        Spare1 : 3;          // 5 BitPosition                    
              };                                                                        
/*0x05D*/     UINT8        Depth;                                                       
/*0x05E*/     UINT16       ReadySummary;                                                
/*0x060*/     ULONG32      Rank;                                                        
/*0x064*/     struct _LIST_ENTRY ReadyListHead[16];                                     
/*0x0E4*/     struct _RTL_RB_TREE ChildScbQueue;    // 2 elements, 0x8 bytes (sizeof)   
/*0x0EC*/     struct _KSCB* Parent;                                                     
/*0x0F0*/     struct _KSCB* Root;                                                       
/*0x0F4*/     UINT8        _PADDING0_[0x4];                                             
          }KSCB, *PKSCB;                                                                
                                                                                        
          typedef struct _KSCHEDULING_GROUP_POLICY // 8 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 3 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x000*/         ULONG32      Value;                                                
/*0x000*/         UINT16       Weight;                                               
                  struct                           // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT16       MinRate;                                          
/*0x002*/             UINT16       MaxRate;                                          
                  };                                                                 
              };                                                                     
              union                                // 2 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x004*/         ULONG32      AllFlags;                                             
                  struct                           // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x004*/             ULONG32      Type : 1;       // 0 BitPosition                  
/*0x004*/             ULONG32      Disabled : 1;   // 1 BitPosition                  
/*0x004*/             ULONG32      Spare1 : 30;    // 2 BitPosition                  
                  };                                                                 
              };                                                                     
          }KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY;                                  
                                                                                     
          typedef struct _KSCHEDULING_GROUP               // 13 elements, 0x140 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _KSCHEDULING_GROUP_POLICY Policy;    // 8 elements, 0x8 bytes (sizeof)    
/*0x008*/     ULONG32      RelativeWeight;                                                     
/*0x00C*/     ULONG32      ChildMinRate;                                                       
/*0x010*/     ULONG32      ChildMinWeight;                                                     
/*0x014*/     ULONG32      ChildTotalWeight;                                                   
/*0x018*/     UINT64       QueryHistoryTimeStamp;                                              
/*0x020*/     INT64        NotificationCycles;                                                 
              union                                       // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                
/*0x028*/         struct _LIST_ENTRY SchedulingGroupList; // 2 elements, 0x8 bytes (sizeof)    
/*0x028*/         struct _LIST_ENTRY Sibling;             // 2 elements, 0x8 bytes (sizeof)    
              };                                                                               
/*0x030*/     struct _KDPC* NotificationDpc;                                                   
/*0x034*/     struct _LIST_ENTRY ChildList;               // 2 elements, 0x8 bytes (sizeof)    
/*0x03C*/     struct _KSCHEDULING_GROUP* Parent;                                               
/*0x040*/     struct _KSCB PerProcessor[1];                                                    
/*0x138*/     UINT8        _PADDING0_[0x8];                                                    
          }KSCHEDULING_GROUP, *PKSCHEDULING_GROUP;                                             
                                                                                               
          typedef struct _KSTACK_CONTROL              // 6 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      StackBase;                                                    
              union                                   // 2 elements, 0x4 bytes (sizeof)  
              {                                                                          
/*0x004*/         ULONG32      ActualLimit;                                              
/*0x004*/         ULONG32      StackExpansion : 1;    // 0 BitPosition                   
              };                                                                         
/*0x008*/     struct _KTRAP_FRAME* PreviousTrapFrame;                                    
/*0x00C*/     VOID*        PreviousExceptionList;                                        
/*0x010*/     struct _KERNEL_STACK_SEGMENT Previous;  // 4 elements, 0x10 bytes (sizeof) 
          }KSTACK_CONTROL, *PKSTACK_CONTROL;                                             
                                                                                         
          typedef struct _KSYSTEM_TIME // 3 elements, 0xC bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      LowPart;                                      
/*0x004*/     LONG32       High1Time;                                    
/*0x008*/     LONG32       High2Time;                                    
          }KSYSTEM_TIME, *PKSYSTEM_TIME;                                  
                                                                         
          typedef struct _KTHREAD_COUNTERS               // 7 elements, 0x1A8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       WaitReasonBitMap;                                                 
/*0x008*/     struct _THREAD_PERFORMANCE_DATA* UserData;                                     
/*0x00C*/     ULONG32      Flags;                                                            
/*0x010*/     ULONG32      ContextSwitches;                                                  
/*0x014*/     UINT8        _PADDING0_[0x4];                                                  
/*0x018*/     UINT64       CycleTimeBias;                                                    
/*0x020*/     UINT64       HardwareCounters;                                                 
/*0x028*/     struct _COUNTER_READING HwCounter[16];                                         
          }KTHREAD_COUNTERS, *PKTHREAD_COUNTERS;                                             
                                                                                             
          typedef struct _KTRAP_FRAME                               // 39 elements, 0x8C bytes (sizeof) 
          {                                                                                             
/*0x000*/     ULONG32      DbgEbp;                                                                      
/*0x004*/     ULONG32      DbgEip;                                                                      
/*0x008*/     ULONG32      DbgArgMark;                                                                  
/*0x00C*/     UINT16       TempSegCs;                                                                   
/*0x00E*/     UINT8        Logging;                                                                     
/*0x00F*/     UINT8        FrameType;                                                                   
/*0x010*/     ULONG32      TempEsp;                                                                     
/*0x014*/     ULONG32      Dr0;                                                                         
/*0x018*/     ULONG32      Dr1;                                                                         
/*0x01C*/     ULONG32      Dr2;                                                                         
/*0x020*/     ULONG32      Dr3;                                                                         
/*0x024*/     ULONG32      Dr6;                                                                         
/*0x028*/     ULONG32      Dr7;                                                                         
/*0x02C*/     ULONG32      SegGs;                                                                       
/*0x030*/     ULONG32      SegEs;                                                                       
/*0x034*/     ULONG32      SegDs;                                                                       
/*0x038*/     ULONG32      Edx;                                                                         
/*0x03C*/     ULONG32      Ecx;                                                                         
/*0x040*/     ULONG32      Eax;                                                                         
/*0x044*/     UINT8        PreviousPreviousMode;                                                        
/*0x045*/     UINT8        EntropyQueueDpc;                                                             
/*0x046*/     UINT8        Reserved[2];                                                                 
/*0x048*/     ULONG32      MxCsr;                                                                       
/*0x04C*/     struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;                                     
/*0x050*/     ULONG32      SegFs;                                                                       
/*0x054*/     ULONG32      Edi;                                                                         
/*0x058*/     ULONG32      Esi;                                                                         
/*0x05C*/     ULONG32      Ebx;                                                                         
/*0x060*/     ULONG32      Ebp;                                                                         
/*0x064*/     ULONG32      ErrCode;                                                                     
/*0x068*/     ULONG32      Eip;                                                                         
/*0x06C*/     ULONG32      SegCs;                                                                       
/*0x070*/     ULONG32      EFlags;                                                                      
/*0x074*/     ULONG32      HardwareEsp;                                                                 
/*0x078*/     ULONG32      HardwareSegSs;                                                               
/*0x07C*/     ULONG32      V86Es;                                                                       
/*0x080*/     ULONG32      V86Ds;                                                                       
/*0x084*/     ULONG32      V86Fs;                                                                       
/*0x088*/     ULONG32      V86Gs;                                                                       
          }KTRAP_FRAME, *PKTRAP_FRAME;                                                                  
                                                                                                        
           typedef struct _KTSS                  // 35 elements, 0x20AC bytes (sizeof) 
           {                                                                           
/*0x000*/      UINT16       Backlink;                                                  
/*0x002*/      UINT16       Reserved0;                                                 
/*0x004*/      ULONG32      Esp0;                                                      
/*0x008*/      UINT16       Ss0;                                                       
/*0x00A*/      UINT16       Reserved1;                                                 
/*0x00C*/      ULONG32      NotUsed1[4];                                               
/*0x01C*/      ULONG32      CR3;                                                       
/*0x020*/      ULONG32      Eip;                                                       
/*0x024*/      ULONG32      EFlags;                                                    
/*0x028*/      ULONG32      Eax;                                                       
/*0x02C*/      ULONG32      Ecx;                                                       
/*0x030*/      ULONG32      Edx;                                                       
/*0x034*/      ULONG32      Ebx;                                                       
/*0x038*/      ULONG32      Esp;                                                       
/*0x03C*/      ULONG32      Ebp;                                                       
/*0x040*/      ULONG32      Esi;                                                       
/*0x044*/      ULONG32      Edi;                                                       
/*0x048*/      UINT16       Es;                                                        
/*0x04A*/      UINT16       Reserved2;                                                 
/*0x04C*/      UINT16       Cs;                                                        
/*0x04E*/      UINT16       Reserved3;                                                 
/*0x050*/      UINT16       Ss;                                                        
/*0x052*/      UINT16       Reserved4;                                                 
/*0x054*/      UINT16       Ds;                                                        
/*0x056*/      UINT16       Reserved5;                                                 
/*0x058*/      UINT16       Fs;                                                        
/*0x05A*/      UINT16       Reserved6;                                                 
/*0x05C*/      UINT16       Gs;                                                        
/*0x05E*/      UINT16       Reserved7;                                                 
/*0x060*/      UINT16       LDT;                                                       
/*0x062*/      UINT16       Reserved8;                                                 
/*0x064*/      UINT16       Flags;                                                     
/*0x066*/      UINT16       IoMapBase;                                                 
/*0x068*/      struct _KiIoAccessMap IoMaps[1];                                        
/*0x208C*/     UINT8        IntDirectionMap[32];                                       
           }KTSS, *PKTSS;                                                              
                                                                                       
          typedef struct _XSTATE_FEATURE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Offset;                                         
/*0x004*/     ULONG32      Size;                                           
          }XSTATE_FEATURE, *PXSTATE_FEATURE;                                  
                                                                           
          typedef struct _XSTATE_CONFIGURATION        // 10 elements, 0x330 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       EnabledFeatures;                                                
/*0x008*/     UINT64       EnabledVolatileFeatures;                                        
/*0x010*/     ULONG32      Size;                                                           
              struct                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                            
/*0x014*/         ULONG32      OptimizedSave : 1;     // 0 BitPosition                     
/*0x014*/         ULONG32      CompactionEnabled : 1; // 1 BitPosition                     
              };                                                                           
/*0x018*/     struct _XSTATE_FEATURE Features[64];                                         
/*0x218*/     UINT64       EnabledSupervisorFeatures;                                      
/*0x220*/     UINT64       AlignedFeatures;                                                
/*0x228*/     ULONG32      AllFeatureSize;                                                 
/*0x22C*/     ULONG32      AllFeatures[64];                                                
/*0x32C*/     UINT8        _PADDING0_[0x4];                                                
          }XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;                                     
                                                                                           
          typedef struct _KUSER_SHARED_DATA                                // 95 elements, 0x708 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     ULONG32      TickCountLowDeprecated;                                                              
/*0x004*/     ULONG32      TickCountMultiplier;                                                                 
/*0x008*/     struct _KSYSTEM_TIME InterruptTime;                          // 3 elements, 0xC bytes (sizeof)    
/*0x014*/     struct _KSYSTEM_TIME SystemTime;                             // 3 elements, 0xC bytes (sizeof)    
/*0x020*/     struct _KSYSTEM_TIME TimeZoneBias;                           // 3 elements, 0xC bytes (sizeof)    
/*0x02C*/     UINT16       ImageNumberLow;                                                                      
/*0x02E*/     UINT16       ImageNumberHigh;                                                                     
/*0x030*/     WCHAR        NtSystemRoot[260];                                                                   
/*0x238*/     ULONG32      MaxStackTraceDepth;                                                                  
/*0x23C*/     ULONG32      CryptoExponent;                                                                      
/*0x240*/     ULONG32      TimeZoneId;                                                                          
/*0x244*/     ULONG32      LargePageMinimum;                                                                    
/*0x248*/     ULONG32      AitSamplingValue;                                                                    
/*0x24C*/     ULONG32      AppCompatFlag;                                                                       
/*0x250*/     UINT64       RNGSeedVersion;                                                                      
/*0x258*/     ULONG32      GlobalValidationRunlevel;                                                            
/*0x25C*/     LONG32       TimeZoneBiasStamp;                                                                   
/*0x260*/     ULONG32      NtBuildNumber;                                                                       
/*0x264*/     enum _NT_PRODUCT_TYPE NtProductType;                                                              
/*0x268*/     UINT8        ProductTypeIsValid;                                                                  
/*0x269*/     UINT8        Reserved0[1];                                                                        
/*0x26A*/     UINT16       NativeProcessorArchitecture;                                                         
/*0x26C*/     ULONG32      NtMajorVersion;                                                                      
/*0x270*/     ULONG32      NtMinorVersion;                                                                      
/*0x274*/     UINT8        ProcessorFeatures[64];                                                               
/*0x2B4*/     ULONG32      Reserved1;                                                                           
/*0x2B8*/     ULONG32      Reserved3;                                                                           
/*0x2BC*/     ULONG32      TimeSlip;                                                                            
/*0x2C0*/     enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;                                      
/*0x2C4*/     ULONG32      BootId;                                                                              
/*0x2C8*/     union _LARGE_INTEGER SystemExpirationDate;                   // 4 elements, 0x8 bytes (sizeof)    
/*0x2D0*/     ULONG32      SuiteMask;                                                                           
/*0x2D4*/     UINT8        KdDebuggerEnabled;                                                                   
              union                                                        // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                 
/*0x2D5*/         UINT8        MitigationPolicies;                                                              
                  struct                                                   // 4 elements, 0x1 bytes (sizeof)    
                  {                                                                                             
/*0x2D5*/             UINT8        NXSupportPolicy : 2;                    // 0 BitPosition                     
/*0x2D5*/             UINT8        SEHValidationPolicy : 2;                // 2 BitPosition                     
/*0x2D5*/             UINT8        CurDirDevicesSkippedForDlls : 2;        // 4 BitPosition                     
/*0x2D5*/             UINT8        Reserved : 2;                           // 6 BitPosition                     
                  };                                                                                            
              };                                                                                                
/*0x2D6*/     UINT8        Reserved6[2];                                                                        
/*0x2D8*/     ULONG32      ActiveConsoleId;                                                                     
/*0x2DC*/     ULONG32      DismountCount;                                                                       
/*0x2E0*/     ULONG32      ComPlusPackage;                                                                      
/*0x2E4*/     ULONG32      LastSystemRITEventTickCount;                                                         
/*0x2E8*/     ULONG32      NumberOfPhysicalPages;                                                               
/*0x2EC*/     UINT8        SafeBootMode;                                                                        
/*0x2ED*/     UINT8        Reserved12[3];                                                                       
              union                                                        // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                 
/*0x2F0*/         ULONG32      SharedDataFlags;                                                                 
                  struct                                                   // 10 elements, 0x4 bytes (sizeof)   
                  {                                                                                             
/*0x2F0*/             ULONG32      DbgErrorPortPresent : 1;                // 0 BitPosition                     
/*0x2F0*/             ULONG32      DbgElevationEnabled : 1;                // 1 BitPosition                     
/*0x2F0*/             ULONG32      DbgVirtEnabled : 1;                     // 2 BitPosition                     
/*0x2F0*/             ULONG32      DbgInstallerDetectEnabled : 1;          // 3 BitPosition                     
/*0x2F0*/             ULONG32      DbgLkgEnabled : 1;                      // 4 BitPosition                     
/*0x2F0*/             ULONG32      DbgDynProcessorEnabled : 1;             // 5 BitPosition                     
/*0x2F0*/             ULONG32      DbgConsoleBrokerEnabled : 1;            // 6 BitPosition                     
/*0x2F0*/             ULONG32      DbgSecureBootEnabled : 1;               // 7 BitPosition                     
/*0x2F0*/             ULONG32      DbgMultiSessionSku : 1;                 // 8 BitPosition                     
/*0x2F0*/             ULONG32      SpareBits : 23;                         // 9 BitPosition                     
                  };                                                                                            
              };                                                                                                
/*0x2F4*/     ULONG32      DataFlagsPad[1];                                                                     
/*0x2F8*/     UINT64       TestRetInstruction;                                                                  
/*0x300*/     INT64        QpcFrequency;                                                                        
/*0x308*/     ULONG32      SystemCall;                                                                          
/*0x30C*/     ULONG32      SystemCallPad0;                                                                      
/*0x310*/     UINT64       SystemCallPad[2];                                                                    
              union                                                        // 3 elements, 0xC bytes (sizeof)    
              {                                                                                                 
/*0x320*/         struct _KSYSTEM_TIME TickCount;                          // 3 elements, 0xC bytes (sizeof)    
/*0x320*/         UINT64       TickCountQuad;                                                                   
/*0x320*/         ULONG32      ReservedTickCountOverlay[3];                                                     
              };                                                                                                
/*0x32C*/     ULONG32      TickCountPad[1];                                                                     
/*0x330*/     ULONG32      Cookie;                                                                              
/*0x334*/     ULONG32      CookiePad[1];                                                                        
/*0x338*/     INT64        ConsoleSessionForegroundProcessId;                                                   
/*0x340*/     UINT64       TimeUpdateLock;                                                                      
/*0x348*/     UINT64       BaselineSystemTimeQpc;                                                               
/*0x350*/     UINT64       BaselineInterruptTimeQpc;                                                            
/*0x358*/     UINT64       QpcSystemTimeIncrement;                                                              
/*0x360*/     UINT64       QpcInterruptTimeIncrement;                                                           
/*0x368*/     UINT8        QpcSystemTimeIncrementShift;                                                         
/*0x369*/     UINT8        QpcInterruptTimeIncrementShift;                                                      
/*0x36A*/     UINT16       UnparkedProcessorCount;                                                              
/*0x36C*/     ULONG32      EnclaveFeatureMask[4];                                                               
/*0x37C*/     ULONG32      Reserved8;                                                                           
/*0x380*/     UINT16       UserModeGlobalLogger[16];                                                            
/*0x3A0*/     ULONG32      ImageFileExecutionOptions;                                                           
/*0x3A4*/     ULONG32      LangGenerationCount;                                                                 
/*0x3A8*/     UINT64       Reserved4;                                                                           
/*0x3B0*/     UINT64       InterruptTimeBias;                                                                   
/*0x3B8*/     UINT64       QpcBias;                                                                             
/*0x3C0*/     ULONG32      ActiveProcessorCount;                                                                
/*0x3C4*/     UINT8        ActiveGroupCount;                                                                    
/*0x3C5*/     UINT8        Reserved9;                                                                           
              union                                                        // 2 elements, 0x2 bytes (sizeof)    
              {                                                                                                 
/*0x3C6*/         UINT16       QpcData;                                                                         
                  struct                                                   // 2 elements, 0x2 bytes (sizeof)    
                  {                                                                                             
/*0x3C6*/             UINT8        QpcBypassEnabled;                                                            
/*0x3C7*/             UINT8        QpcShift;                                                                    
                  };                                                                                            
              };                                                                                                
/*0x3C8*/     union _LARGE_INTEGER TimeZoneBiasEffectiveStart;             // 4 elements, 0x8 bytes (sizeof)    
/*0x3D0*/     union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;               // 4 elements, 0x8 bytes (sizeof)    
/*0x3D8*/     struct _XSTATE_CONFIGURATION XState;                         // 10 elements, 0x330 bytes (sizeof) 
          }KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;                                                              
                                                                                                                
          typedef struct _LDR_DATA_TABLE_ENTRY                         // 56 elements, 0xA0 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _LIST_ENTRY InLoadOrderLinks;                     // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     struct _LIST_ENTRY InMemoryOrderLinks;                   // 2 elements, 0x8 bytes (sizeof)   
/*0x010*/     struct _LIST_ENTRY InInitializationOrderLinks;           // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     VOID*        DllBase;                                                                        
/*0x01C*/     VOID*        EntryPoint;                                                                     
/*0x020*/     ULONG32      SizeOfImage;                                                                    
/*0x024*/     struct _UNICODE_STRING FullDllName;                      // 3 elements, 0x8 bytes (sizeof)   
/*0x02C*/     struct _UNICODE_STRING BaseDllName;                      // 3 elements, 0x8 bytes (sizeof)   
              union                                                    // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                            
/*0x034*/         UINT8        FlagGroup[4];                                                               
/*0x034*/         ULONG32      Flags;                                                                      
                  struct                                               // 27 elements, 0x4 bytes (sizeof)  
                  {                                                                                        
/*0x034*/             ULONG32      PackagedBinary : 1;                 // 0 BitPosition                    
/*0x034*/             ULONG32      MarkedForRemoval : 1;               // 1 BitPosition                    
/*0x034*/             ULONG32      ImageDll : 1;                       // 2 BitPosition                    
/*0x034*/             ULONG32      LoadNotificationsSent : 1;          // 3 BitPosition                    
/*0x034*/             ULONG32      TelemetryEntryProcessed : 1;        // 4 BitPosition                    
/*0x034*/             ULONG32      ProcessStaticImport : 1;            // 5 BitPosition                    
/*0x034*/             ULONG32      InLegacyLists : 1;                  // 6 BitPosition                    
/*0x034*/             ULONG32      InIndexes : 1;                      // 7 BitPosition                    
/*0x034*/             ULONG32      ShimDll : 1;                        // 8 BitPosition                    
/*0x034*/             ULONG32      InExceptionTable : 1;               // 9 BitPosition                    
/*0x034*/             ULONG32      ReservedFlags1 : 2;                 // 10 BitPosition                   
/*0x034*/             ULONG32      LoadInProgress : 1;                 // 12 BitPosition                   
/*0x034*/             ULONG32      LoadConfigProcessed : 1;            // 13 BitPosition                   
/*0x034*/             ULONG32      EntryProcessed : 1;                 // 14 BitPosition                   
/*0x034*/             ULONG32      ProtectDelayLoad : 1;               // 15 BitPosition                   
/*0x034*/             ULONG32      ReservedFlags3 : 2;                 // 16 BitPosition                   
/*0x034*/             ULONG32      DontCallForThreads : 1;             // 18 BitPosition                   
/*0x034*/             ULONG32      ProcessAttachCalled : 1;            // 19 BitPosition                   
/*0x034*/             ULONG32      ProcessAttachFailed : 1;            // 20 BitPosition                   
/*0x034*/             ULONG32      CorDeferredValidate : 1;            // 21 BitPosition                   
/*0x034*/             ULONG32      CorImage : 1;                       // 22 BitPosition                   
/*0x034*/             ULONG32      DontRelocate : 1;                   // 23 BitPosition                   
/*0x034*/             ULONG32      CorILOnly : 1;                      // 24 BitPosition                   
/*0x034*/             ULONG32      ReservedFlags5 : 3;                 // 25 BitPosition                   
/*0x034*/             ULONG32      Redirected : 1;                     // 28 BitPosition                   
/*0x034*/             ULONG32      ReservedFlags6 : 2;                 // 29 BitPosition                   
/*0x034*/             ULONG32      CompatDatabaseProcessed : 1;        // 31 BitPosition                   
                  };                                                                                       
              };                                                                                           
/*0x038*/     UINT16       ObsoleteLoadCount;                                                              
/*0x03A*/     UINT16       TlsIndex;                                                                       
/*0x03C*/     struct _LIST_ENTRY HashLinks;                            // 2 elements, 0x8 bytes (sizeof)   
/*0x044*/     ULONG32      TimeDateStamp;                                                                  
/*0x048*/     struct _ACTIVATION_CONTEXT* EntryPointActivationContext;                                     
/*0x04C*/     VOID*        Lock;                                                                           
/*0x050*/     struct _LDR_DDAG_NODE* DdagNode;                                                             
/*0x054*/     struct _LIST_ENTRY NodeModuleLink;                       // 2 elements, 0x8 bytes (sizeof)   
/*0x05C*/     struct _LDRP_LOAD_CONTEXT* LoadContext;                                                      
/*0x060*/     VOID*        ParentDllBase;                                                                  
/*0x064*/     VOID*        SwitchBackContext;                                                              
/*0x068*/     struct _RTL_BALANCED_NODE BaseAddressIndexNode;          // 6 elements, 0xC bytes (sizeof)   
/*0x074*/     struct _RTL_BALANCED_NODE MappingInfoIndexNode;          // 6 elements, 0xC bytes (sizeof)   
/*0x080*/     ULONG32      OriginalBase;                                                                   
/*0x084*/     UINT8        _PADDING0_[0x4];                                                                
/*0x088*/     union _LARGE_INTEGER LoadTime;                           // 4 elements, 0x8 bytes (sizeof)   
/*0x090*/     ULONG32      BaseNameHashValue;                                                              
/*0x094*/     enum _LDR_DLL_LOAD_REASON LoadReason;                                                        
/*0x098*/     ULONG32      ImplicitPathOptions;                                                            
/*0x09C*/     ULONG32      ReferenceCount;                                                                 
          }LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;                                                   
                                                                                                           
          typedef struct _LDRP_CSLIST          // 1 elements, 0x4 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _SINGLE_LIST_ENTRY* Tail;                                   
          }LDRP_CSLIST, *PLDRP_CSLIST;                                           
                                                                                 
          typedef struct _LDR_DDAG_NODE                       // 10 elements, 0x2C bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _LIST_ENTRY Modules;                     // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;                                     
/*0x00C*/     ULONG32      LoadCount;                                                             
/*0x010*/     ULONG32      LoadWhileUnloadingCount;                                               
/*0x014*/     ULONG32      LowestLink;                                                            
/*0x018*/     struct _LDRP_CSLIST Dependencies;               // 1 elements, 0x4 bytes (sizeof)   
/*0x01C*/     struct _LDRP_CSLIST IncomingDependencies;       // 1 elements, 0x4 bytes (sizeof)   
/*0x020*/     enum _LDR_DDAG_STATE State;                                                         
/*0x024*/     struct _SINGLE_LIST_ENTRY CondenseLink;         // 1 elements, 0x4 bytes (sizeof)   
/*0x028*/     ULONG32      PreorderNumber;                                                        
          }LDR_DDAG_NODE, *PLDR_DDAG_NODE;                                                        
                                                                                                  
          typedef struct _LDR_SERVICE_TAG_RECORD    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _LDR_SERVICE_TAG_RECORD* Next;                                   
/*0x004*/     ULONG32      ServiceTag;                                                
          }LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD;                                  
                                                                                      
typedef struct _LDRP_LOAD_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}LDRP_LOAD_CONTEXT, *PLDRP_LOAD_CONTEXT;                                  
                                                                    
          typedef struct _LFH_BLOCK_ZONE    // 2 elements, 0xC bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _LIST_ENTRY ListEntry; // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     LONG32       NextIndex;                                         
          }LFH_BLOCK_ZONE, *PLFH_BLOCK_ZONE;                                  
                                                                              
          typedef struct _USER_MEMORY_CACHE_ENTRY // 7 elements, 0x20 bytes (sizeof) 
          {                                                                          
/*0x000*/     union _SLIST_HEADER UserBlocks;     // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      AvailableBlocks;                                          
/*0x00C*/     ULONG32      MinimumDepth;                                             
/*0x010*/     ULONG32      CacheShiftThreshold;                                      
/*0x014*/     UINT16       Allocations;                                              
/*0x016*/     UINT16       Frees;                                                    
/*0x018*/     UINT16       CacheHits;                                                
/*0x01A*/     UINT8        _PADDING0_[0x6];                                          
          }USER_MEMORY_CACHE_ENTRY, *PUSER_MEMORY_CACHE_ENTRY;                                   
                                                                                     
          typedef struct _LFH_HEAP                                         // 19 elements, 0x7E8 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     struct _RTL_SRWLOCK Lock;                                    // 7 elements, 0x4 bytes (sizeof)    
/*0x004*/     struct _LIST_ENTRY SubSegmentZones;                          // 2 elements, 0x8 bytes (sizeof)    
/*0x00C*/     VOID*        Heap;                                                                                
/*0x010*/     VOID*        NextSegmentInfoArrayAddress;                                                         
/*0x014*/     VOID*        FirstUncommittedAddress;                                                             
/*0x018*/     VOID*        ReservedAddressLimit;                                                                
/*0x01C*/     ULONG32      SegmentCreate;                                                                       
/*0x020*/     ULONG32      SegmentDelete;                                                                       
/*0x024*/     ULONG32      MinimumCacheDepth;                                                                   
/*0x028*/     ULONG32      CacheShiftThreshold;                                                                 
/*0x02C*/     ULONG32      SizeInCache;                                                                         
/*0x030*/     union _HEAP_BUCKET_RUN_INFO RunInfo;                         // 3 elements, 0x8 bytes (sizeof)    
/*0x038*/     struct _USER_MEMORY_CACHE_ENTRY UserBlockCache[12];                                               
/*0x1B8*/     struct _HEAP_LFH_MEM_POLICIES MemoryPolicies;                // 4 elements, 0x4 bytes (sizeof)    
/*0x1BC*/     struct _HEAP_BUCKET Buckets[129];                                                                 
/*0x3C0*/     struct _HEAP_LOCAL_SEGMENT_INFO* SegmentInfoArrays[129];                                          
/*0x5C4*/     struct _HEAP_LOCAL_SEGMENT_INFO* AffinitizedInfoArrays[129];                                      
/*0x7C8*/     struct _SEGMENT_HEAP* SegmentAllocator;                                                           
/*0x7CC*/     UINT8        _PADDING0_[0x4];                                                                     
/*0x7D0*/     struct _HEAP_LOCAL_DATA LocalData[1];                                                             
          }LFH_HEAP, *PLFH_HEAP;                                                                                
                                                                                                                
          typedef union _LFH_RANDOM_DATA  // 3 elements, 0x100 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT8        Bytes[256];                                        
/*0x000*/     UINT16       Words[128];                                        
/*0x000*/     UINT64       Quadwords[32];                                     
          }LFH_RANDOM_DATA, *PLFH_RANDOM_DATA;                                    
                                                                              
          typedef struct _LIST_ENTRY32 // 2 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Flink;                                        
/*0x004*/     ULONG32      Blink;                                        
          }LIST_ENTRY32, *PLIST_ENTRY32;                                  
                                                                         
          typedef struct _LIST_ENTRY64 // 2 elements, 0x10 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT64       Flink;                                         
/*0x008*/     UINT64       Blink;                                         
          }LIST_ENTRY64, *PLIST_ENTRY64;                                   
                                                                          
          typedef struct _LOOKASIDE_LIST_EX     // 1 elements, 0x48 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _GENERAL_LOOKASIDE_POOL L; // 22 elements, 0x48 bytes (sizeof) 
          }LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX;                                    
                                                                                    
          typedef struct _M128A  // 2 elements, 0x10 bytes (sizeof) 
          {                                                         
/*0x000*/     UINT64       Low;                                     
/*0x008*/     INT64        High;                                    
          }M128A, *PM128A;                                          
                                                                    
          typedef struct _MAILSLOT_CREATE_PARAMETERS // 4 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      MailslotQuota;                                               
/*0x004*/     ULONG32      MaximumMessageSize;                                          
/*0x008*/     union _LARGE_INTEGER ReadTimeout;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT8        TimeoutSpecified;                                            
/*0x011*/     UINT8        _PADDING0_[0x7];                                             
          }MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS;                                   
                                                                                        
          typedef union _MCI_STATS                   // 2 elements, 0x8 bytes (sizeof)  
          {                                                                             
              struct                                 // 10 elements, 0x8 bytes (sizeof) 
              {                                                                         
/*0x000*/         UINT16       McaCod;                                                  
/*0x002*/         UINT16       MsCod;                                                   
                  struct                             // 8 elements, 0x4 bytes (sizeof)  
                  {                                                                     
/*0x004*/             ULONG32      OtherInfo : 25;   // 0 BitPosition                   
/*0x004*/             ULONG32      Damage : 1;       // 25 BitPosition                  
/*0x004*/             ULONG32      AddressValid : 1; // 26 BitPosition                  
/*0x004*/             ULONG32      MiscValid : 1;    // 27 BitPosition                  
/*0x004*/             ULONG32      Enabled : 1;      // 28 BitPosition                  
/*0x004*/             ULONG32      UnCorrected : 1;  // 29 BitPosition                  
/*0x004*/             ULONG32      OverFlow : 1;     // 30 BitPosition                  
/*0x004*/             ULONG32      Valid : 1;        // 31 BitPosition                  
                  };                                                                    
              }MciStats;                                                                
/*0x000*/     UINT64       QuadPart;                                                    
          }MCI_STATS, *PMCI_STATS;                                                      
                                                                                        
          typedef union _MCI_ADDR        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      Address;                                    
/*0x004*/         ULONG32      Reserved;                                   
              };                                                           
/*0x000*/     UINT64       QuadPart;                                       
          }MCI_ADDR, *PMCI_ADDR;                                           
                                                                           
          typedef struct _MCA_EXCEPTION               // 9 elements, 0x100 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      VersionNumber;                                                 
/*0x004*/     enum _MCA_EXCEPTION_TYPE ExceptionType;                                     
/*0x008*/     union _LARGE_INTEGER TimeStamp;         // 4 elements, 0x8 bytes (sizeof)   
/*0x010*/     ULONG32      ProcessorNumber;                                               
/*0x014*/     ULONG32      Reserved1;                                                     
              union                                   // 2 elements, 0x20 bytes (sizeof)  
              {                                                                           
                  struct                              // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT8        BankNumber;                                            
/*0x019*/             UINT8        Reserved2[7];                                          
/*0x020*/             union _MCI_STATS Status;        // 2 elements, 0x8 bytes (sizeof)   
/*0x028*/             union _MCI_ADDR Address;        // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/             UINT64       Misc;                                                  
                  }Mca;                                                                   
                  struct                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT64       Address;                                               
/*0x020*/             UINT64       Type;                                                  
                  }Mce;                                                                   
              }u;                                                                         
/*0x038*/     ULONG32      ExtCnt;                                                        
/*0x03C*/     ULONG32      Reserved3;                                                     
/*0x040*/     UINT64       ExtReg[24];                                                    
          }MCA_EXCEPTION, *PMCA_EXCEPTION;                                                
                                                                                          
          typedef struct _MDL              // 8 elements, 0x1C bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _MDL* Next;                                              
/*0x004*/     INT16        Size;                                              
/*0x006*/     INT16        MdlFlags;                                          
/*0x008*/     struct _EPROCESS* Process;                                      
/*0x00C*/     VOID*        MappedSystemVa;                                    
/*0x010*/     VOID*        StartVa;                                           
/*0x014*/     ULONG32      ByteCount;                                         
/*0x018*/     ULONG32      ByteOffset;                                        
          }MDL, *PMDL;                                                        
                                                                              
          typedef struct _MM_DRIVER_VERIFIER_DATA              // 34 elements, 0x8C bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Level;                                                                  
/*0x004*/     ULONG32      RaiseIrqls;                                                             
/*0x008*/     ULONG32      AcquireSpinLocks;                                                       
/*0x00C*/     ULONG32      SynchronizeExecutions;                                                  
/*0x010*/     ULONG32      AllocationsAttempted;                                                   
/*0x014*/     ULONG32      AllocationsSucceeded;                                                   
/*0x018*/     ULONG32      AllocationsSucceededSpecialPool;                                        
/*0x01C*/     ULONG32      AllocationsWithNoTag;                                                   
/*0x020*/     ULONG32      TrimRequests;                                                           
/*0x024*/     ULONG32      Trims;                                                                  
/*0x028*/     ULONG32      AllocationsFailed;                                                      
/*0x02C*/     ULONG32      AllocationsFailedDeliberately;                                          
/*0x030*/     ULONG32      Loads;                                                                  
/*0x034*/     ULONG32      Unloads;                                                                
/*0x038*/     ULONG32      UnTrackedPool;                                                          
/*0x03C*/     ULONG32      UserTrims;                                                              
/*0x040*/     ULONG32      CurrentPagedPoolAllocations;                                            
/*0x044*/     ULONG32      CurrentNonPagedPoolAllocations;                                         
/*0x048*/     ULONG32      PeakPagedPoolAllocations;                                               
/*0x04C*/     ULONG32      PeakNonPagedPoolAllocations;                                            
/*0x050*/     ULONG32      PagedBytes;                                                             
/*0x054*/     ULONG32      NonPagedBytes;                                                          
/*0x058*/     ULONG32      PeakPagedBytes;                                                         
/*0x05C*/     ULONG32      PeakNonPagedBytes;                                                      
/*0x060*/     ULONG32      BurstAllocationsFailedDeliberately;                                     
/*0x064*/     ULONG32      SessionTrims;                                                           
/*0x068*/     ULONG32      OptionChanges;                                                          
/*0x06C*/     ULONG32      VerifyMode;                                                             
/*0x070*/     struct _UNICODE_STRING PreviousBucketName;       // 3 elements, 0x8 bytes (sizeof)   
/*0x078*/     ULONG32      ExecutePoolTypes;                                                       
/*0x07C*/     ULONG32      ExecutePageProtections;                                                 
/*0x080*/     ULONG32      ExecutePageMappings;                                                    
/*0x084*/     ULONG32      ExecuteWriteSections;                                                   
/*0x088*/     ULONG32      SectionAlignmentFailures;                                               
          }MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA;                                     
                                                                                                   
          typedef union _MM_PAGE_ACCESS_INFO_FLAGS   // 2 elements, 0x4 bytes (sizeof) 
          {                                                                            
              struct                                 // 4 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Image : 1;            // 10 BitPosition                 
/*0x000*/         ULONG32      Spare0 : 1;           // 11 BitPosition                 
              }File;                                                                   
              struct                                 // 3 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Spare1 : 2;           // 10 BitPosition                 
              }Private;                                                                
          }MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS;                                  
                                                                                       
          typedef struct _MM_PAGE_ACCESS_INFO             // 6 elements, 0x8 bytes (sizeof) 
          {                                                                                 
              union                                       // 5 elements, 0x8 bytes (sizeof) 
              {                                                                             
/*0x000*/         union _MM_PAGE_ACCESS_INFO_FLAGS Flags; // 2 elements, 0x4 bytes (sizeof) 
/*0x000*/         UINT64       FileOffset;                                                  
/*0x000*/         VOID*        VirtualAddress;                                              
                  struct                                  // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                         
/*0x000*/             ULONG32      DontUse0 : 3;          // 0 BitPosition                  
/*0x000*/             ULONG32      Spare0 : 29;           // 3 BitPosition                  
                  };                                                                        
/*0x004*/         VOID*        PointerProtoPte;                                             
              };                                                                            
          }MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO;                                      
                                                                                            
          typedef struct _MM_PAGE_ACCESS_INFO_HEADER          // 14 elements, 0x38 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _SINGLE_LIST_ENTRY Link;                 // 1 elements, 0x4 bytes (sizeof)   
/*0x004*/     enum _MM_PAGE_ACCESS_TYPE Type;                                                     
              union                                           // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                   
/*0x008*/         ULONG32      EmptySequenceNumber;                                               
/*0x008*/         ULONG32      CurrentFileIndex;                                                  
              };                                                                                  
/*0x010*/     UINT64       CreateTime;                                                            
              union                                           // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                   
/*0x018*/         UINT64       EmptyTime;                                                         
/*0x018*/         struct _MM_PAGE_ACCESS_INFO* TempEntry;                                         
              };                                                                                  
              union                                           // 2 elements, 0x14 bytes (sizeof)  
              {                                                                                   
                  struct                                      // 5 elements, 0x14 bytes (sizeof)  
                  {                                                                               
/*0x020*/             struct _MM_PAGE_ACCESS_INFO* PageEntry;                                     
/*0x024*/             ULONG32*     FileEntry;                                                     
/*0x028*/             ULONG32*     FirstFileEntry;                                                
/*0x02C*/             struct _EPROCESS* Process;                                                  
/*0x030*/             ULONG32      SessionId;                                                     
                  };                                                                              
                  struct                                      // 2 elements, 0x14 bytes (sizeof)  
                  {                                                                               
/*0x020*/             ULONG32*     PageFrameEntry;                                                
/*0x024*/             ULONG32*     LastPageFrameEntry;                                            
/*0x028*/             UINT8        _PADDING0_[0xC];                                               
                  };                                                                              
              };                                                                                  
          }MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER;                                    
                                                                                                  
typedef struct _MMWSL // 0 elements, 0x0 bytes (sizeof) 
{                                                       
}MMWSL, *PMMWSL;                                        
                                                        
          typedef struct _NAMED_PIPE_CREATE_PARAMETERS // 8 elements, 0x28 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      NamedPipeType;                                                 
/*0x004*/     ULONG32      ReadMode;                                                      
/*0x008*/     ULONG32      CompletionMode;                                                
/*0x00C*/     ULONG32      MaximumInstances;                                              
/*0x010*/     ULONG32      InboundQuota;                                                  
/*0x014*/     ULONG32      OutboundQuota;                                                 
/*0x018*/     union _LARGE_INTEGER DefaultTimeout;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     UINT8        TimeoutSpecified;                                              
/*0x021*/     UINT8        _PADDING0_[0x7];                                               
          }NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS;                                   
                                                                                          
          typedef struct _NPAGED_LOOKASIDE_LIST          // 2 elements, 0xC0 bytes (sizeof)  
          {                                                                                  
/*0x000*/     struct _GENERAL_LOOKASIDE L;               // 22 elements, 0x80 bytes (sizeof) 
/*0x080*/     ULONG32      Lock__ObsoleteButDoNotDelete;                                     
/*0x084*/     UINT8        _PADDING0_[0x3C];                                                 
          }NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;                                    
                                                                                             
          typedef struct _NT_TIB32               // 8 elements, 0x1C bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      ExceptionList;                                           
/*0x004*/     ULONG32      StackBase;                                               
/*0x008*/     ULONG32      StackLimit;                                              
/*0x00C*/     ULONG32      SubSystemTib;                                            
              union                              // 2 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x010*/         ULONG32      FiberData;                                           
/*0x010*/         ULONG32      Version;                                             
              };                                                                    
/*0x014*/     ULONG32      ArbitraryUserPointer;                                    
/*0x018*/     ULONG32      Self;                                                    
          }NT_TIB32, *PNT_TIB32;                                                    
                                                                                    
          typedef struct _NT_TIB64               // 8 elements, 0x38 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       ExceptionList;                                           
/*0x008*/     UINT64       StackBase;                                               
/*0x010*/     UINT64       StackLimit;                                              
/*0x018*/     UINT64       SubSystemTib;                                            
              union                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                     
/*0x020*/         UINT64       FiberData;                                           
/*0x020*/         ULONG32      Version;                                             
              };                                                                    
/*0x028*/     UINT64       ArbitraryUserPointer;                                    
/*0x030*/     UINT64       Self;                                                    
          }NT_TIB64, *PNT_TIB64;                                                    
                                                                                    
          typedef struct _OBJECT_DUMP_CONTROL // 2 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     VOID*        Stream;                                              
/*0x004*/     ULONG32      Detail;                                              
          }OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL;                                  
                                                                                
          typedef struct _OBJECT_HANDLE_INFORMATION // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      HandleAttributes;                                          
/*0x004*/     ULONG32      GrantedAccess;                                             
          }OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;                                  
                                                                                      
          typedef struct _OBJECT_NAME_INFORMATION // 1 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _UNICODE_STRING Name;        // 3 elements, 0x8 bytes (sizeof) 
          }OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;                                  
                                                                                    
          typedef struct _OBJECT_TYPE_INITIALIZER                                                                                                     // 29 elements, 0x58 bytes (sizeof) 
          {                                                                                                                                                                               
/*0x000*/     UINT16       Length;                                                                                                                                                        
              union                                                                                                                                   // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                                                                                                           
/*0x002*/         UINT8        ObjectTypeFlags;                                                                                                                                           
                  struct                                                                                                                              // 8 elements, 0x1 bytes (sizeof)   
                  {                                                                                                                                                                       
/*0x002*/             UINT8        CaseInsensitive : 1;                                                                                               // 0 BitPosition                    
/*0x002*/             UINT8        UnnamedObjectsOnly : 1;                                                                                            // 1 BitPosition                    
/*0x002*/             UINT8        UseDefaultObject : 1;                                                                                              // 2 BitPosition                    
/*0x002*/             UINT8        SecurityRequired : 1;                                                                                              // 3 BitPosition                    
/*0x002*/             UINT8        MaintainHandleCount : 1;                                                                                           // 4 BitPosition                    
/*0x002*/             UINT8        MaintainTypeList : 1;                                                                                              // 5 BitPosition                    
/*0x002*/             UINT8        SupportsObjectCallbacks : 1;                                                                                       // 6 BitPosition                    
/*0x002*/             UINT8        CacheAligned : 1;                                                                                                  // 7 BitPosition                    
                  };                                                                                                                                                                      
              };                                                                                                                                                                          
/*0x004*/     ULONG32      ObjectTypeCode;                                                                                                                                                
/*0x008*/     ULONG32      InvalidAttributes;                                                                                                                                             
/*0x00C*/     struct _GENERIC_MAPPING GenericMapping;                                                                                                 // 4 elements, 0x10 bytes (sizeof)  
/*0x01C*/     ULONG32      ValidAccessMask;                                                                                                                                               
/*0x020*/     ULONG32      RetainAccess;                                                                                                                                                  
/*0x024*/     enum _POOL_TYPE PoolType;                                                                                                                                                   
/*0x028*/     ULONG32      DefaultPagedPoolCharge;                                                                                                                                        
/*0x02C*/     ULONG32      DefaultNonPagedPoolCharge;                                                                                                                                     
/*0x030*/     FUNCT_00C6_12EF_DumpProcedure* DumpProcedure;                                                                                                                               
/*0x034*/     FUNCT_0076_12F7_OpenProcedure* OpenProcedure;                                                                                                                               
/*0x038*/     FUNCT_00C6_1305_CloseProcedure* CloseProcedure;                                                                                                                             
/*0x03C*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* DeleteProcedure;                                     
/*0x040*/     FUNCT_0076_130B_ParseProcedure* ParseProcedure;                                                                                                                             
/*0x044*/     FUNCT_0076_1317_SecurityProcedure* SecurityProcedure;                                                                                                                       
/*0x048*/     FUNCT_0076_1328_QueryNameProcedure* QueryNameProcedure;                                                                                                                     
/*0x04C*/     FUNCT_007F_1330_OkayToCloseProcedure* OkayToCloseProcedure;                                                                                                                 
/*0x050*/     ULONG32      WaitObjectFlagMask;                                                                                                                                            
/*0x054*/     UINT16       WaitObjectFlagOffset;                                                                                                                                          
/*0x056*/     UINT16       WaitObjectPointerOffset;                                                                                                                                       
          }OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;                                                                                                                            
                                                                                                                                                                                          
          typedef struct _OBJECT_TYPE                   // 12 elements, 0x90 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY TypeList;              // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     struct _UNICODE_STRING Name;              // 3 elements, 0x8 bytes (sizeof)   
/*0x010*/     VOID*        DefaultObject;                                                   
/*0x014*/     UINT8        Index;                                                           
/*0x015*/     UINT8        _PADDING0_[0x3];                                                 
/*0x018*/     ULONG32      TotalNumberOfObjects;                                            
/*0x01C*/     ULONG32      TotalNumberOfHandles;                                            
/*0x020*/     ULONG32      HighWaterNumberOfObjects;                                        
/*0x024*/     ULONG32      HighWaterNumberOfHandles;                                        
/*0x028*/     struct _OBJECT_TYPE_INITIALIZER TypeInfo; // 29 elements, 0x58 bytes (sizeof) 
/*0x080*/     struct _EX_PUSH_LOCK TypeLock;            // 7 elements, 0x4 bytes (sizeof)   
/*0x084*/     ULONG32      Key;                                                             
/*0x088*/     struct _LIST_ENTRY CallbackList;          // 2 elements, 0x8 bytes (sizeof)   
          }OBJECT_TYPE, *POBJECT_TYPE;                                                      
                                                                                            
          typedef struct _PAGED_LOOKASIDE_LIST                 // 2 elements, 0xC0 bytes (sizeof)  
          {                                                                                        
/*0x000*/     struct _GENERAL_LOOKASIDE L;                     // 22 elements, 0x80 bytes (sizeof) 
/*0x080*/     struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete; // 5 elements, 0x20 bytes (sizeof)  
/*0x0A0*/     UINT8        _PADDING0_[0x20];                                                       
          }PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;                                           
                                                                                                   
typedef struct _PAGEFAULT_HISTORY // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}PAGEFAULT_HISTORY, *PPAGEFAULT_HISTORY;                                  
                                                                    
          typedef struct _PEB                                                                 // 98 elements, 0x460 bytes (sizeof) 
          {                                                                                                                        
/*0x000*/     UINT8        InheritedAddressSpace;                                                                                  
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                                               
/*0x002*/     UINT8        BeingDebugged;                                                                                          
              union                                                                           // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                                    
/*0x003*/         UINT8        BitField;                                                                                           
                  struct                                                                      // 8 elements, 0x1 bytes (sizeof)    
                  {                                                                                                                
/*0x003*/             UINT8        ImageUsesLargePages : 1;                                   // 0 BitPosition                     
/*0x003*/             UINT8        IsProtectedProcess : 1;                                    // 1 BitPosition                     
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;                           // 2 BitPosition                     
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1;                          // 3 BitPosition                     
/*0x003*/             UINT8        IsPackagedProcess : 1;                                     // 4 BitPosition                     
/*0x003*/             UINT8        IsAppContainer : 1;                                        // 5 BitPosition                     
/*0x003*/             UINT8        IsProtectedProcessLight : 1;                               // 6 BitPosition                     
/*0x003*/             UINT8        SpareBits : 1;                                             // 7 BitPosition                     
                  };                                                                                                               
              };                                                                                                                   
/*0x004*/     VOID*        Mutant;                                                                                                 
/*0x008*/     VOID*        ImageBaseAddress;                                                                                       
/*0x00C*/     struct _PEB_LDR_DATA* Ldr;                                                                                           
/*0x010*/     struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;                                                              
/*0x014*/     VOID*        SubSystemData;                                                                                          
/*0x018*/     VOID*        ProcessHeap;                                                                                            
/*0x01C*/     struct _RTL_CRITICAL_SECTION* FastPebLock;                                                                           
/*0x020*/     VOID*        AtlThunkSListPtr;                                                                                       
/*0x024*/     VOID*        IFEOKey;                                                                                                
              union                                                                           // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                                    
/*0x028*/         ULONG32      CrossProcessFlags;                                                                                  
                  struct                                                                      // 6 elements, 0x4 bytes (sizeof)    
                  {                                                                                                                
/*0x028*/             ULONG32      ProcessInJob : 1;                                          // 0 BitPosition                     
/*0x028*/             ULONG32      ProcessInitializing : 1;                                   // 1 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingVEH : 1;                                       // 2 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingVCH : 1;                                       // 3 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingFTH : 1;                                       // 4 BitPosition                     
/*0x028*/             ULONG32      ReservedBits0 : 27;                                        // 5 BitPosition                     
                  };                                                                                                               
              };                                                                                                                   
              union                                                                           // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                                    
/*0x02C*/         VOID*        KernelCallbackTable;                                                                                
/*0x02C*/         VOID*        UserSharedInfoPtr;                                                                                  
              };                                                                                                                   
/*0x030*/     ULONG32      SystemReserved[1];                                                                                      
/*0x034*/     ULONG32      AtlThunkSListPtr32;                                                                                     
/*0x038*/     VOID*        ApiSetMap;                                                                                              
/*0x03C*/     ULONG32      TlsExpansionCounter;                                                                                    
/*0x040*/     VOID*        TlsBitmap;                                                                                              
/*0x044*/     ULONG32      TlsBitmapBits[2];                                                                                       
/*0x04C*/     VOID*        ReadOnlySharedMemoryBase;                                                                               
/*0x050*/     VOID*        SparePvoid0;                                                                                            
/*0x054*/     VOID**       ReadOnlyStaticServerData;                                                                               
/*0x058*/     VOID*        AnsiCodePageData;                                                                                       
/*0x05C*/     VOID*        OemCodePageData;                                                                                        
/*0x060*/     VOID*        UnicodeCaseTableData;                                                                                   
/*0x064*/     ULONG32      NumberOfProcessors;                                                                                     
/*0x068*/     ULONG32      NtGlobalFlag;                                                                                           
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                                                        
/*0x070*/     union _LARGE_INTEGER CriticalSectionTimeout;                                    // 4 elements, 0x8 bytes (sizeof)    
/*0x078*/     ULONG32      HeapSegmentReserve;                                                                                     
/*0x07C*/     ULONG32      HeapSegmentCommit;                                                                                      
/*0x080*/     ULONG32      HeapDeCommitTotalFreeThreshold;                                                                         
/*0x084*/     ULONG32      HeapDeCommitFreeBlockThreshold;                                                                         
/*0x088*/     ULONG32      NumberOfHeaps;                                                                                          
/*0x08C*/     ULONG32      MaximumNumberOfHeaps;                                                                                   
/*0x090*/     VOID**       ProcessHeaps;                                                                                           
/*0x094*/     VOID*        GdiSharedHandleTable;                                                                                   
/*0x098*/     VOID*        ProcessStarterHelper;                                                                                   
/*0x09C*/     ULONG32      GdiDCAttributeList;                                                                                     
/*0x0A0*/     struct _RTL_CRITICAL_SECTION* LoaderLock;                                                                            
/*0x0A4*/     ULONG32      OSMajorVersion;                                                                                         
/*0x0A8*/     ULONG32      OSMinorVersion;                                                                                         
/*0x0AC*/     UINT16       OSBuildNumber;                                                                                          
/*0x0AE*/     UINT16       OSCSDVersion;                                                                                           
/*0x0B0*/     ULONG32      OSPlatformId;                                                                                           
/*0x0B4*/     ULONG32      ImageSubsystem;                                                                                         
/*0x0B8*/     ULONG32      ImageSubsystemMajorVersion;                                                                             
/*0x0BC*/     ULONG32      ImageSubsystemMinorVersion;                                                                             
/*0x0C0*/     ULONG32      ActiveProcessAffinityMask;                                                                              
/*0x0C4*/     ULONG32      GdiHandleBuffer[34];                                                                                    
/*0x14C*/     FUNCT_00C6_025D_PostProcessInitRoutine_DispatchAddress* PostProcessInitRoutine;                                      
/*0x150*/     VOID*        TlsExpansionBitmap;                                                                                     
/*0x154*/     ULONG32      TlsExpansionBitmapBits[32];                                                                             
/*0x1D4*/     ULONG32      SessionId;                                                                                              
/*0x1D8*/     union _ULARGE_INTEGER AppCompatFlags;                                           // 4 elements, 0x8 bytes (sizeof)    
/*0x1E0*/     union _ULARGE_INTEGER AppCompatFlagsUser;                                       // 4 elements, 0x8 bytes (sizeof)    
/*0x1E8*/     VOID*        pShimData;                                                                                              
/*0x1EC*/     VOID*        AppCompatInfo;                                                                                          
/*0x1F0*/     struct _UNICODE_STRING CSDVersion;                                              // 3 elements, 0x8 bytes (sizeof)    
/*0x1F8*/     struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;                                                              
/*0x1FC*/     struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;                                                             
/*0x200*/     struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;                                                 
/*0x204*/     struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;                                                              
/*0x208*/     ULONG32      MinimumStackCommit;                                                                                     
/*0x20C*/     struct _FLS_CALLBACK_INFO* FlsCallback;                                                                              
/*0x210*/     struct _LIST_ENTRY FlsListHead;                                                 // 2 elements, 0x8 bytes (sizeof)    
/*0x218*/     VOID*        FlsBitmap;                                                                                              
/*0x21C*/     ULONG32      FlsBitmapBits[4];                                                                                       
/*0x22C*/     ULONG32      FlsHighIndex;                                                                                           
/*0x230*/     VOID*        WerRegistrationData;                                                                                    
/*0x234*/     VOID*        WerShipAssertPtr;                                                                                       
/*0x238*/     VOID*        pUnused;                                                                                                
/*0x23C*/     VOID*        pImageHeaderHash;                                                                                       
              union                                                                           // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                                    
/*0x240*/         ULONG32      TracingFlags;                                                                                       
                  struct                                                                      // 4 elements, 0x4 bytes (sizeof)    
                  {                                                                                                                
/*0x240*/             ULONG32      HeapTracingEnabled : 1;                                    // 0 BitPosition                     
/*0x240*/             ULONG32      CritSecTracingEnabled : 1;                                 // 1 BitPosition                     
/*0x240*/             ULONG32      LibLoaderTracingEnabled : 1;                               // 2 BitPosition                     
/*0x240*/             ULONG32      SpareTracingBits : 29;                                     // 3 BitPosition                     
                  };                                                                                                               
              };                                                                                                                   
/*0x248*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                                                      
/*0x250*/     ULONG32      TppWorkerpListLock;                                                                                     
/*0x254*/     struct _LIST_ENTRY TppWorkerpList;                                              // 2 elements, 0x8 bytes (sizeof)    
/*0x25C*/     VOID*        WaitOnAddressHashTable[128];                                                                            
/*0x45C*/     UINT8        _PADDING1_[0x4];                                                                                        
          }PEB, *PPEB;                                                                                                             
                                                                                                                                   
          typedef struct _PEB_LDR_DATA                            // 9 elements, 0x30 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      Length;                                                                   
/*0x004*/     UINT8        Initialized;                                                              
/*0x005*/     UINT8        _PADDING0_[0x3];                                                          
/*0x008*/     VOID*        SsHandle;                                                                 
/*0x00C*/     struct _LIST_ENTRY InLoadOrderModuleList;           // 2 elements, 0x8 bytes (sizeof)  
/*0x014*/     struct _LIST_ENTRY InMemoryOrderModuleList;         // 2 elements, 0x8 bytes (sizeof)  
/*0x01C*/     struct _LIST_ENTRY InInitializationOrderModuleList; // 2 elements, 0x8 bytes (sizeof)  
/*0x024*/     VOID*        EntryInProgress;                                                          
/*0x028*/     UINT8        ShutdownInProgress;                                                       
/*0x029*/     UINT8        _PADDING1_[0x3];                                                          
/*0x02C*/     VOID*        ShutdownThreadId;                                                         
          }PEB_LDR_DATA, *PPEB_LDR_DATA;                                                             
                                                                                                     
          typedef struct _STRING32        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Length;                                          
/*0x002*/     UINT16       MaximumLength;                                   
/*0x004*/     ULONG32      Buffer;                                          
          }STRING32, *PSTRING32;                                            
                                                                            
          typedef struct _PEB32                                      // 98 elements, 0x460 bytes (sizeof) 
          {                                                                                               
/*0x000*/     UINT8        InheritedAddressSpace;                                                         
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                      
/*0x002*/     UINT8        BeingDebugged;                                                                 
              union                                                  // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                           
/*0x003*/         UINT8        BitField;                                                                  
                  struct                                             // 8 elements, 0x1 bytes (sizeof)    
                  {                                                                                       
/*0x003*/             UINT8        ImageUsesLargePages : 1;          // 0 BitPosition                     
/*0x003*/             UINT8        IsProtectedProcess : 1;           // 1 BitPosition                     
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;  // 2 BitPosition                     
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1; // 3 BitPosition                     
/*0x003*/             UINT8        IsPackagedProcess : 1;            // 4 BitPosition                     
/*0x003*/             UINT8        IsAppContainer : 1;               // 5 BitPosition                     
/*0x003*/             UINT8        IsProtectedProcessLight : 1;      // 6 BitPosition                     
/*0x003*/             UINT8        SpareBits : 1;                    // 7 BitPosition                     
                  };                                                                                      
              };                                                                                          
/*0x004*/     ULONG32      Mutant;                                                                        
/*0x008*/     ULONG32      ImageBaseAddress;                                                              
/*0x00C*/     ULONG32      Ldr;                                                                           
/*0x010*/     ULONG32      ProcessParameters;                                                             
/*0x014*/     ULONG32      SubSystemData;                                                                 
/*0x018*/     ULONG32      ProcessHeap;                                                                   
/*0x01C*/     ULONG32      FastPebLock;                                                                   
/*0x020*/     ULONG32      AtlThunkSListPtr;                                                              
/*0x024*/     ULONG32      IFEOKey;                                                                       
              union                                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                           
/*0x028*/         ULONG32      CrossProcessFlags;                                                         
                  struct                                             // 6 elements, 0x4 bytes (sizeof)    
                  {                                                                                       
/*0x028*/             ULONG32      ProcessInJob : 1;                 // 0 BitPosition                     
/*0x028*/             ULONG32      ProcessInitializing : 1;          // 1 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingVEH : 1;              // 2 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingVCH : 1;              // 3 BitPosition                     
/*0x028*/             ULONG32      ProcessUsingFTH : 1;              // 4 BitPosition                     
/*0x028*/             ULONG32      ReservedBits0 : 27;               // 5 BitPosition                     
                  };                                                                                      
              };                                                                                          
              union                                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                           
/*0x02C*/         ULONG32      KernelCallbackTable;                                                       
/*0x02C*/         ULONG32      UserSharedInfoPtr;                                                         
              };                                                                                          
/*0x030*/     ULONG32      SystemReserved[1];                                                             
/*0x034*/     ULONG32      AtlThunkSListPtr32;                                                            
/*0x038*/     ULONG32      ApiSetMap;                                                                     
/*0x03C*/     ULONG32      TlsExpansionCounter;                                                           
/*0x040*/     ULONG32      TlsBitmap;                                                                     
/*0x044*/     ULONG32      TlsBitmapBits[2];                                                              
/*0x04C*/     ULONG32      ReadOnlySharedMemoryBase;                                                      
/*0x050*/     ULONG32      SparePvoid0;                                                                   
/*0x054*/     ULONG32      ReadOnlyStaticServerData;                                                      
/*0x058*/     ULONG32      AnsiCodePageData;                                                              
/*0x05C*/     ULONG32      OemCodePageData;                                                               
/*0x060*/     ULONG32      UnicodeCaseTableData;                                                          
/*0x064*/     ULONG32      NumberOfProcessors;                                                            
/*0x068*/     ULONG32      NtGlobalFlag;                                                                  
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                               
/*0x070*/     union _LARGE_INTEGER CriticalSectionTimeout;           // 4 elements, 0x8 bytes (sizeof)    
/*0x078*/     ULONG32      HeapSegmentReserve;                                                            
/*0x07C*/     ULONG32      HeapSegmentCommit;                                                             
/*0x080*/     ULONG32      HeapDeCommitTotalFreeThreshold;                                                
/*0x084*/     ULONG32      HeapDeCommitFreeBlockThreshold;                                                
/*0x088*/     ULONG32      NumberOfHeaps;                                                                 
/*0x08C*/     ULONG32      MaximumNumberOfHeaps;                                                          
/*0x090*/     ULONG32      ProcessHeaps;                                                                  
/*0x094*/     ULONG32      GdiSharedHandleTable;                                                          
/*0x098*/     ULONG32      ProcessStarterHelper;                                                          
/*0x09C*/     ULONG32      GdiDCAttributeList;                                                            
/*0x0A0*/     ULONG32      LoaderLock;                                                                    
/*0x0A4*/     ULONG32      OSMajorVersion;                                                                
/*0x0A8*/     ULONG32      OSMinorVersion;                                                                
/*0x0AC*/     UINT16       OSBuildNumber;                                                                 
/*0x0AE*/     UINT16       OSCSDVersion;                                                                  
/*0x0B0*/     ULONG32      OSPlatformId;                                                                  
/*0x0B4*/     ULONG32      ImageSubsystem;                                                                
/*0x0B8*/     ULONG32      ImageSubsystemMajorVersion;                                                    
/*0x0BC*/     ULONG32      ImageSubsystemMinorVersion;                                                    
/*0x0C0*/     ULONG32      ActiveProcessAffinityMask;                                                     
/*0x0C4*/     ULONG32      GdiHandleBuffer[34];                                                           
/*0x14C*/     ULONG32      PostProcessInitRoutine;                                                        
/*0x150*/     ULONG32      TlsExpansionBitmap;                                                            
/*0x154*/     ULONG32      TlsExpansionBitmapBits[32];                                                    
/*0x1D4*/     ULONG32      SessionId;                                                                     
/*0x1D8*/     union _ULARGE_INTEGER AppCompatFlags;                  // 4 elements, 0x8 bytes (sizeof)    
/*0x1E0*/     union _ULARGE_INTEGER AppCompatFlagsUser;              // 4 elements, 0x8 bytes (sizeof)    
/*0x1E8*/     ULONG32      pShimData;                                                                     
/*0x1EC*/     ULONG32      AppCompatInfo;                                                                 
/*0x1F0*/     struct _STRING32 CSDVersion;                           // 3 elements, 0x8 bytes (sizeof)    
/*0x1F8*/     ULONG32      ActivationContextData;                                                         
/*0x1FC*/     ULONG32      ProcessAssemblyStorageMap;                                                     
/*0x200*/     ULONG32      SystemDefaultActivationContextData;                                            
/*0x204*/     ULONG32      SystemAssemblyStorageMap;                                                      
/*0x208*/     ULONG32      MinimumStackCommit;                                                            
/*0x20C*/     ULONG32      FlsCallback;                                                                   
/*0x210*/     struct _LIST_ENTRY32 FlsListHead;                      // 2 elements, 0x8 bytes (sizeof)    
/*0x218*/     ULONG32      FlsBitmap;                                                                     
/*0x21C*/     ULONG32      FlsBitmapBits[4];                                                              
/*0x22C*/     ULONG32      FlsHighIndex;                                                                  
/*0x230*/     ULONG32      WerRegistrationData;                                                           
/*0x234*/     ULONG32      WerShipAssertPtr;                                                              
/*0x238*/     ULONG32      pUnused;                                                                       
/*0x23C*/     ULONG32      pImageHeaderHash;                                                              
              union                                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                           
/*0x240*/         ULONG32      TracingFlags;                                                              
                  struct                                             // 4 elements, 0x4 bytes (sizeof)    
                  {                                                                                       
/*0x240*/             ULONG32      HeapTracingEnabled : 1;           // 0 BitPosition                     
/*0x240*/             ULONG32      CritSecTracingEnabled : 1;        // 1 BitPosition                     
/*0x240*/             ULONG32      LibLoaderTracingEnabled : 1;      // 2 BitPosition                     
/*0x240*/             ULONG32      SpareTracingBits : 29;            // 3 BitPosition                     
                  };                                                                                      
              };                                                                                          
/*0x248*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                             
/*0x250*/     ULONG32      TppWorkerpListLock;                                                            
/*0x254*/     struct _LIST_ENTRY32 TppWorkerpList;                   // 2 elements, 0x8 bytes (sizeof)    
/*0x25C*/     ULONG32      WaitOnAddressHashTable[128];                                                   
/*0x45C*/     UINT8        _PADDING1_[0x4];                                                               
          }PEB32, *PPEB32;                                                                                
                                                                                                          
          typedef struct _PEBS_DS_SAVE_AREA        // 12 elements, 0x60 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       BtsBufferBase;                                              
/*0x008*/     UINT64       BtsIndex;                                                   
/*0x010*/     UINT64       BtsAbsoluteMaximum;                                         
/*0x018*/     UINT64       BtsInterruptThreshold;                                      
/*0x020*/     UINT64       PebsBufferBase;                                             
/*0x028*/     UINT64       PebsIndex;                                                  
/*0x030*/     UINT64       PebsAbsoluteMaximum;                                        
/*0x038*/     UINT64       PebsInterruptThreshold;                                     
/*0x040*/     UINT64       PebsCounterReset0;                                          
/*0x048*/     UINT64       PebsCounterReset1;                                          
/*0x050*/     UINT64       PebsCounterReset2;                                          
/*0x058*/     UINT64       PebsCounterReset3;                                          
          }PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA;                                     
                                                                                       
          typedef struct _PERFINFO_GROUPMASK // 1 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Masks[8];                                            
          }PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK;                                   
                                                                                
          typedef struct _PERFINFO_PPM_STATE_SELECTION // 3 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      SelectedState;                                                
/*0x004*/     ULONG32      VetoedStates;                                                 
/*0x008*/     ULONG32      VetoReason[1];                                                
          }PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION;                                  
                                                                                         
          typedef struct _PF_KERNEL_GLOBALS           // 8 elements, 0x40 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       AccessBufferAgeThreshold;                                     
/*0x008*/     struct _EX_RUNDOWN_REF AccessBufferRef; // 2 elements, 0x4 bytes (sizeof)  
/*0x00C*/     struct _KEVENT AccessBufferExistsEvent; // 1 elements, 0x10 bytes (sizeof) 
/*0x01C*/     ULONG32      AccessBufferMax;                                              
/*0x020*/     union _SLIST_HEADER AccessBufferList;   // 4 elements, 0x8 bytes (sizeof)  
/*0x028*/     LONG32       StreamSequenceNumber;                                         
/*0x02C*/     ULONG32      Flags;                                                        
/*0x030*/     LONG32       ScenarioPrefetchCount;                                        
/*0x034*/     UINT8        _PADDING0_[0xC];                                              
          }PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS;                                       
                                                                                         
          typedef struct _PO_DIAG_STACK_RECORD // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      StackDepth;                                           
/*0x004*/     VOID*        Stack[1];                                             
          }PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD;                                  
                                                                                 
          typedef struct _POWER_SEQUENCE // 3 elements, 0xC bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      SequenceD1;                                     
/*0x004*/     ULONG32      SequenceD2;                                     
/*0x008*/     ULONG32      SequenceD3;                                     
          }POWER_SEQUENCE, *PPOWER_SEQUENCE;                                  
                                                                           
          typedef struct _PPM_CONCURRENCY_ACCOUNTING // 6 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      Lock;                                                        
/*0x004*/     ULONG32      Processors;                                                  
/*0x008*/     ULONG32      ActiveProcessors;                                            
/*0x00C*/     UINT8        _PADDING0_[0x4];                                             
/*0x010*/     UINT64       LastUpdateTime;                                              
/*0x018*/     UINT64       TotalTime;                                                   
/*0x020*/     UINT64       AccumulatedTime[1];                                          
          }PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING;                                   
                                                                                        
          typedef struct _PPM_COORDINATED_SELECTION // 4 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      MaximumStates;                                              
/*0x004*/     ULONG32      SelectedStates;                                             
/*0x008*/     ULONG32      DefaultSelection;                                           
/*0x00C*/     ULONG32*     Selection;                                                  
          }PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION;                                   
                                                                                       
          typedef struct _PPM_VETO_ACCOUNTING               // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                    
/*0x000*/     LONG32       VetoPresent;                                                        
/*0x004*/     struct _LIST_ENTRY VetoListHead;              // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     UINT8        CsAccountingBlocks;                                                 
/*0x00D*/     UINT8        BlocksDrips;                                                        
/*0x00E*/     UINT8        _PADDING0_[0x2];                                                    
/*0x010*/     ULONG32      PreallocatedVetoCount;                                              
/*0x014*/     struct _PPM_VETO_ENTRY* PreallocatedVetoList;                                    
          }PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING;                                         
                                                                                               
          typedef struct _PPM_IDLE_STATE                  // 15 elements, 0x90 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _KAFFINITY_EX DomainMembers;         // 4 elements, 0x58 bytes (sizeof)  
/*0x058*/     struct _UNICODE_STRING Name;                // 3 elements, 0x8 bytes (sizeof)   
/*0x060*/     ULONG32      Latency;                                                           
/*0x064*/     ULONG32      BreakEvenDuration;                                                 
/*0x068*/     ULONG32      Power;                                                             
/*0x06C*/     ULONG32      StateFlags;                                                        
/*0x070*/     struct _PPM_VETO_ACCOUNTING VetoAccounting; // 6 elements, 0x18 bytes (sizeof)  
/*0x088*/     UINT8        StateType;                                                         
/*0x089*/     UINT8        InterruptsEnabled;                                                 
/*0x08A*/     UINT8        Interruptible;                                                     
/*0x08B*/     UINT8        ContextRetained;                                                   
/*0x08C*/     UINT8        CacheCoherent;                                                     
/*0x08D*/     UINT8        WakesSpuriously;                                                   
/*0x08E*/     UINT8        PlatformOnly;                                                      
/*0x08F*/     UINT8        NoCState;                                                          
          }PPM_IDLE_STATE, *PPPM_IDLE_STATE;                                                  
                                                                                              
          typedef struct _PROCESSOR_IDLE_CONSTRAINTS // 12 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       TotalTime;                                                    
/*0x008*/     UINT64       IdleTime;                                                     
/*0x010*/     UINT64       ExpectedIdleDuration;                                         
/*0x018*/     UINT64       MaxIdleDuration;                                              
/*0x020*/     ULONG32      OverrideState;                                                
/*0x024*/     ULONG32      TimeCheck;                                                    
/*0x028*/     UINT8        PromotePercent;                                               
/*0x029*/     UINT8        DemotePercent;                                                
/*0x02A*/     UINT8        Parked;                                                       
/*0x02B*/     UINT8        Interruptible;                                                
/*0x02C*/     UINT8        PlatformIdle;                                                 
/*0x02D*/     UINT8        ExpectedWakeReason;                                           
/*0x02E*/     UINT8        _PADDING0_[0x2];                                              
          }PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS;                                    
                                                                                         
          typedef struct _PROCESSOR_IDLE_PREPARE_INFO             // 8 elements, 0x50 bytes (sizeof)  
          {                                                                                           
/*0x000*/     VOID*        Context;                                                                   
/*0x004*/     UINT8        _PADDING0_[0x4];                                                           
/*0x008*/     struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;     // 12 elements, 0x30 bytes (sizeof) 
/*0x038*/     ULONG32      DependencyCount;                                                           
/*0x03C*/     ULONG32      DependencyUsed;                                                            
/*0x040*/     struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;                                     
/*0x044*/     ULONG32      PlatformIdleStateIndex;                                                    
/*0x048*/     ULONG32      ProcessorIdleStateIndex;                                                   
/*0x04C*/     ULONG32      IdleSelectFailureMask;                                                     
          }PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO;                                    
                                                                                                      
          typedef struct _PPM_SELECTION_MENU             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Count;                                                          
/*0x004*/     struct _PPM_SELECTION_MENU_ENTRY* Entries;                                   
          }PPM_SELECTION_MENU, *PPPM_SELECTION_MENU;                                       
                                                                                           
          typedef struct _PPM_IDLE_STATES                                      // 38 elements, 0x270 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     UINT8        InterfaceVersion;                                                                        
/*0x001*/     UINT8        ForceIdle;                                                                               
/*0x002*/     UINT8        EstimateIdleDuration;                                                                    
/*0x003*/     UINT8        ExitLatencyTraceEnabled;                                                                 
/*0x004*/     UINT8        NonInterruptibleTransition;                                                              
/*0x005*/     UINT8        UnaccountedTransition;                                                                   
/*0x006*/     UINT8        IdleDurationLimited;                                                                     
/*0x007*/     UINT8        _PADDING0_[0x1];                                                                         
/*0x008*/     ULONG32      ExitLatencyCountdown;                                                                    
/*0x00C*/     ULONG32      TargetState;                                                                             
/*0x010*/     ULONG32      ActualState;                                                                             
/*0x014*/     ULONG32      OldState;                                                                                
/*0x018*/     ULONG32      OverrideIndex;                                                                           
/*0x01C*/     ULONG32      ProcessorIdleCount;                                                                      
/*0x020*/     ULONG32      Type;                                                                                    
/*0x024*/     UINT16       ReasonFlags;                                                                             
/*0x026*/     UINT8        _PADDING1_[0x2];                                                                         
/*0x028*/     UINT64       InitiateWakeStamp;                                                                       
/*0x030*/     LONG32       PreviousStatus;                                                                          
/*0x034*/     ULONG32      PreviousCancelReason;                                                                    
/*0x038*/     struct _KAFFINITY_EX PrimaryProcessorMask;                       // 4 elements, 0x58 bytes (sizeof)   
/*0x090*/     struct _KAFFINITY_EX SecondaryProcessorMask;                     // 4 elements, 0x58 bytes (sizeof)   
/*0x0E8*/     FUNCT_00C6_07D2_IdlePrepare* IdlePrepare;                                                             
/*0x0EC*/     FUNCT_0076_07F2_IdlePreExecute_IdleExecute* IdlePreExecute;                                           
/*0x0F0*/     FUNCT_0076_07F2_IdlePreExecute_IdleExecute* IdleExecute;                                              
/*0x0F4*/     FUNCT_0009_07FA_IdlePreselect* IdlePreselect;                                                         
/*0x0F8*/     FUNCT_0009_07FF_IdleTest* IdleTest;                                                                   
/*0x0FC*/     FUNCT_0009_0804_IdleAvailabilityCheck* IdleAvailabilityCheck;                                         
/*0x100*/     FUNCT_00C6_0808_IdleComplete* IdleComplete;                                                           
/*0x104*/     FUNCT_00C6_080A_IdleCancel* IdleCancel;                                                               
/*0x108*/     FUNCT_007F_080C_IdleIsHalted_IdleInitiateWake* IdleIsHalted;                                          
/*0x10C*/     FUNCT_007F_080C_IdleIsHalted_IdleInitiateWake* IdleInitiateWake;                                      
/*0x110*/     struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;                 // 8 elements, 0x50 bytes (sizeof)   
/*0x160*/     struct _KAFFINITY_EX DeepIdleSnapshot;                           // 4 elements, 0x58 bytes (sizeof)   
/*0x1B8*/     struct _PERFINFO_PPM_STATE_SELECTION* Tracing;                                                        
/*0x1BC*/     struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;                                             
/*0x1C0*/     struct _PPM_SELECTION_MENU ProcessorMenu;                        // 2 elements, 0x8 bytes (sizeof)    
/*0x1C8*/     struct _PPM_SELECTION_MENU CoordinatedMenu;                      // 2 elements, 0x8 bytes (sizeof)    
/*0x1D0*/     struct _PPM_COORDINATED_SELECTION CoordinatedSelection;          // 4 elements, 0x10 bytes (sizeof)   
/*0x1E0*/     struct _PPM_IDLE_STATE State[1];                                                                      
          }PPM_IDLE_STATES, *PPPM_IDLE_STATES;                                                                      
                                                                                                                    
          typedef struct _PPM_SELECTION_DEPENDENCY // 2 elements, 0xC bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Processor;                                                
/*0x004*/     struct _PPM_SELECTION_MENU Menu;     // 2 elements, 0x8 bytes (sizeof) 
          }PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY;                                  
                                                                                     
          typedef struct _PPM_SELECTION_MENU_ENTRY              // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        StrictDependency;                                                       
/*0x001*/     UINT8        InitiatingState;                                                        
/*0x002*/     UINT8        DependentState;                                                         
/*0x003*/     UINT8        _PADDING0_[0x1];                                                        
/*0x004*/     ULONG32      StateIndex;                                                             
/*0x008*/     ULONG32      Dependencies;                                                           
/*0x00C*/     struct _PPM_SELECTION_DEPENDENCY* DependencyList;                                    
          }PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY;                                   
                                                                                                   
          typedef struct _PPM_SELECTION_STATISTICS            // 15 elements, 0x78 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       SelectedCount;                                                         
/*0x008*/     UINT64       VetoCount;                                                             
/*0x010*/     UINT64       PreVetoCount;                                                          
/*0x018*/     UINT64       WrongProcessorCount;                                                   
/*0x020*/     UINT64       LatencyCount;                                                          
/*0x028*/     UINT64       IdleDurationCount;                                                     
/*0x030*/     UINT64       DeviceDependencyCount;                                                 
/*0x038*/     UINT64       ProcessorDependencyCount;                                              
/*0x040*/     UINT64       PlatformOnlyCount;                                                     
/*0x048*/     UINT64       InterruptibleCount;                                                    
/*0x050*/     UINT64       LegacyOverrideCount;                                                   
/*0x058*/     UINT64       CstateCheckCount;                                                      
/*0x060*/     UINT64       NoCStateCount;                                                         
/*0x068*/     UINT64       CoordinatedDependencyCount;                                            
/*0x070*/     struct _PPM_VETO_ACCOUNTING* PreVetoAccounting;                                     
/*0x074*/     UINT8        _PADDING0_[0x4];                                                       
          }PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS;                                    
                                                                                                  
          typedef struct _PPM_VETO_ENTRY       // 8 elements, 0x38 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY Link;         // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      VetoReason;                                            
/*0x00C*/     ULONG32      ReferenceCount;                                        
/*0x010*/     UINT64       HitCount;                                              
/*0x018*/     UINT64       LastActivationTime;                                    
/*0x020*/     UINT64       TotalActiveTime;                                       
/*0x028*/     UINT64       CsActivationTime;                                      
/*0x030*/     UINT64       CsActiveTime;                                          
          }PPM_VETO_ENTRY, *PPPM_VETO_ENTRY;                                      
                                                                                  
          typedef struct _PROC_FEEDBACK_COUNTER                         // 9 elements, 0x28 bytes (sizeof) 
          {                                                                                                
              union                                                     // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                            
/*0x000*/         FUNCT_00C6_08A2_InstantaneousRead* InstantaneousRead;                                    
/*0x000*/         FUNCT_00C6_08A6_DifferentialRead* DifferentialRead;                                      
              };                                                                                           
/*0x008*/     UINT64       LastActualCount;                                                                
/*0x010*/     UINT64       LastReferenceCount;                                                             
/*0x018*/     ULONG32      CachedValue;                                                                    
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x020*/     UINT8        Affinitized;                                                                    
/*0x021*/     UINT8        Differential;                                                                   
/*0x022*/     UINT8        Scaling;                                                                        
/*0x023*/     UINT8        _PADDING1_[0x1];                                                                
/*0x024*/     ULONG32      Context;                                                                        
          }PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER;                                                 
                                                                                                           
          typedef struct _PROC_IDLE_STATE_BUCKET // 4 elements, 0x20 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       TotalTime;                                               
/*0x008*/     UINT64       MinTime;                                                 
/*0x010*/     UINT64       MaxTime;                                                 
/*0x018*/     ULONG32      Count;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                         
          }PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET;                                   
                                                                                    
          typedef struct _PROC_IDLE_STATE_ACCOUNTING                // 9 elements, 0x3E0 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT64       TotalTime;                                                                   
/*0x008*/     ULONG32      CancelCount;                                                                 
/*0x00C*/     ULONG32      FailureCount;                                                                
/*0x010*/     ULONG32      SuccessCount;                                                                
/*0x014*/     ULONG32      InvalidBucketIndex;                                                          
/*0x018*/     UINT64       MinTime;                                                                     
/*0x020*/     UINT64       MaxTime;                                                                     
/*0x028*/     struct _PPM_SELECTION_STATISTICS SelectionStatistics; // 15 elements, 0x78 bytes (sizeof) 
/*0x0A0*/     struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                                       
          }PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING;                                    
                                                                                                        
          typedef struct _PROC_IDLE_ACCOUNTING             // 8 elements, 0x408 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      StateCount;                                                         
/*0x004*/     ULONG32      TotalTransitions;                                                   
/*0x008*/     ULONG32      ResetCount;                                                         
/*0x00C*/     ULONG32      AbortCount;                                                         
/*0x010*/     UINT64       StartTime;                                                          
/*0x018*/     UINT64       PriorIdleTime;                                                      
/*0x020*/     enum _PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                    
/*0x028*/     struct _PROC_IDLE_STATE_ACCOUNTING State[1];                                     
          }PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING;                                       
                                                                                               
          typedef struct _PROC_PERF_CHECK_SNAP            // 9 elements, 0x50 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       Time;                                                             
/*0x008*/     UINT64       Active;                                                           
/*0x010*/     UINT64       Stall;                                                            
/*0x018*/     UINT64       FrequencyScaledActive;                                            
/*0x020*/     UINT64       PerformanceScaledActive;                                          
/*0x028*/     UINT64       PerformanceScaledKernelActive;                                    
/*0x030*/     UINT64       CyclesActive;                                                     
/*0x038*/     UINT64       CyclesAffinitized;                                                
/*0x040*/     UINT64       TaggedThreadCycles[2];                                            
          }PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP;                                     
                                                                                             
          typedef struct _PROC_PERF_CHECK            // 6 elements, 0xC0 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       LastActive;                                                  
/*0x008*/     UINT64       LastTime;                                                    
/*0x010*/     UINT64       LastStall;                                                   
/*0x018*/     struct _PROC_PERF_CHECK_SNAP Snap;     // 9 elements, 0x50 bytes (sizeof) 
/*0x068*/     struct _PROC_PERF_CHECK_SNAP TempSnap; // 9 elements, 0x50 bytes (sizeof) 
/*0x0B8*/     UINT8        TaggedThreadPercent[2];                                      
/*0x0BA*/     UINT8        _PADDING0_[0x6];                                             
          }PROC_PERF_CHECK, *PPROC_PERF_CHECK;                                          
                                                                                        
          typedef struct _PROC_PERF_CONSTRAINT     // 16 elements, 0x50 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _KPRCB* Prcb;                                                     
/*0x004*/     ULONG32      PerfContext;                                                
/*0x008*/     ULONG32      ProcCap;                                                    
/*0x00C*/     ULONG32      ProcFloor;                                                  
/*0x010*/     ULONG32      PlatformCap;                                                
/*0x014*/     ULONG32      ThermalCap;                                                 
/*0x018*/     ULONG32      LimitReasons;                                               
/*0x01C*/     UINT8        _PADDING0_[0x4];                                            
/*0x020*/     UINT64       PlatformCapStartTime;                                       
/*0x028*/     ULONG32      TargetPercent;                                              
/*0x02C*/     ULONG32      SelectedPercent;                                            
/*0x030*/     ULONG32      SelectedFrequency;                                          
/*0x034*/     ULONG32      PreviousFrequency;                                          
/*0x038*/     ULONG32      PreviousPercent;                                            
/*0x03C*/     ULONG32      LatestFrequencyPercent;                                     
/*0x040*/     UINT64       SelectedState;                                              
/*0x048*/     UINT8        Force;                                                      
/*0x049*/     UINT8        _PADDING1_[0x7];                                            
          }PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT;                                    
                                                                                       
          typedef struct _PROC_PERF_DOMAIN                                                                                                                                                              // 43 elements, 0x108 bytes (sizeof) 
          {                                                                                                                                                                                                                                  
/*0x000*/     struct _LIST_ENTRY Link;                                                                                                                                                                  // 2 elements, 0x8 bytes (sizeof)    
/*0x008*/     struct _KPRCB* Master;                                                                                                                                                                                                         
/*0x00C*/     struct _KAFFINITY_EX Members;                                                                                                                                                             // 4 elements, 0x58 bytes (sizeof)   
/*0x064*/     ULONG32      ProcessorCount;                                                                                                                                                                                                   
/*0x068*/     UINT8        Class;                                                                                                                                                                                                            
/*0x069*/     UINT8        Spare[3];                                                                                                                                                                                                         
/*0x06C*/     struct _PROC_PERF_CONSTRAINT* Processors;                                                                                                                                                                                      
/*0x070*/     FUNCT_00C6_090D_GetFFHThrottleState* GetFFHThrottleState;                                                                                                                                                                      
/*0x074*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* TimeWindowHandler;                                                    
/*0x078*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* BoostPolicyHandler;                                                   
/*0x07C*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* BoostModeHandler;                                                     
/*0x080*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* EnergyPerfPreferenceHandler;                                          
/*0x084*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* AutonomousActivityWindowHandler;                                      
/*0x088*/     FUNCT_00C6_0910_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_EnergyPerfPreferenceHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* AutonomousModeHandler;                                                
/*0x08C*/     FUNCT_00C6_0914_ReinitializeHandler* ReinitializeHandler;                                                                                                                                                                      
/*0x090*/     FUNCT_0009_0917_PerfSelectionHandler* PerfSelectionHandler;                                                                                                                                                                    
/*0x094*/     FUNCT_00C6_0920_PerfControlHandler* PerfControlHandler;                                                                                                                                                                        
/*0x098*/     ULONG32      MaxFrequency;                                                                                                                                                                                                     
/*0x09C*/     ULONG32      NominalFrequency;                                                                                                                                                                                                 
/*0x0A0*/     ULONG32      MaxPercent;                                                                                                                                                                                                       
/*0x0A4*/     ULONG32      MinPerfPercent;                                                                                                                                                                                                   
/*0x0A8*/     ULONG32      MinThrottlePercent;                                                                                                                                                                                               
/*0x0AC*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                  
/*0x0B0*/     UINT64       MinimumRelativePerformance;                                                                                                                                                                                       
/*0x0B8*/     UINT64       NominalRelativePerformance;                                                                                                                                                                                       
/*0x0C0*/     UINT8        Coordination;                                                                                                                                                                                                     
/*0x0C1*/     UINT8        HardPlatformCap;                                                                                                                                                                                                  
/*0x0C2*/     UINT8        AffinitizeControl;                                                                                                                                                                                                
/*0x0C3*/     UINT8        EfficientThrottle;                                                                                                                                                                                                
/*0x0C4*/     UINT8        AutonomousMode;                                                                                                                                                                                                   
/*0x0C5*/     UINT8        _PADDING1_[0x3];                                                                                                                                                                                                  
/*0x0C8*/     ULONG32      SelectedPercent;                                                                                                                                                                                                  
/*0x0CC*/     ULONG32      SelectedFrequency;                                                                                                                                                                                                
/*0x0D0*/     ULONG32      DesiredPercent;                                                                                                                                                                                                   
/*0x0D4*/     ULONG32      MaxPolicyPercent;                                                                                                                                                                                                 
/*0x0D8*/     ULONG32      MinPolicyPercent;                                                                                                                                                                                                 
/*0x0DC*/     ULONG32      ConstrainedMaxPercent;                                                                                                                                                                                            
/*0x0E0*/     ULONG32      ConstrainedMinPercent;                                                                                                                                                                                            
/*0x0E4*/     ULONG32      GuaranteedPercent;                                                                                                                                                                                                
/*0x0E8*/     ULONG32      TolerancePercent;                                                                                                                                                                                                 
/*0x0EC*/     UINT8        _PADDING2_[0x4];                                                                                                                                                                                                  
/*0x0F0*/     UINT64       SelectedState;                                                                                                                                                                                                    
/*0x0F8*/     UINT64       PerfChangeTime;                                                                                                                                                                                                   
/*0x100*/     ULONG32      PerfChangeIntervalCount;                                                                                                                                                                                          
/*0x104*/     UINT8        Force;                                                                                                                                                                                                            
/*0x105*/     UINT8        ProvideGuidance;                                                                                                                                                                                                  
/*0x106*/     UINT8        _PADDING3_[0x2];                                                                                                                                                                                                  
          }PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN;                                                                                                                                                                                             
                                                                                                                                                                                                                                             
          typedef struct _PROC_PERF_HISTORY_ENTRY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Utility;                                                 
/*0x002*/     UINT16       AffinitizedUtility;                                      
/*0x004*/     UINT8        Frequency;                                               
/*0x005*/     UINT8        TaggedPercent[2];                                        
/*0x007*/     UINT8        _PADDING0_[0x1];                                         
          }PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY;                                  
                                                                                    
          typedef struct _PROC_PERF_HISTORY                   // 7 elements, 0x24 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Count;                                                                
/*0x004*/     ULONG32      Slot;                                                                 
/*0x008*/     ULONG32      UtilityTotal;                                                         
/*0x00C*/     ULONG32      AffinitizedUtilityTotal;                                              
/*0x010*/     ULONG32      FrequencyTotal;                                                       
/*0x014*/     ULONG32      TaggedPercentTotal[2];                                                
/*0x01C*/     struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];                                    
          }PROC_PERF_HISTORY, *PPROC_PERF_HISTORY;                                               
                                                                                                 
          typedef struct _PROC_PERF_LOAD        // 2 elements, 0x2 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        BusyPercentage;                                        
/*0x001*/     UINT8        FrequencyPercentage;                                   
          }PROC_PERF_LOAD, *PPROC_PERF_LOAD;                                      
                                                                                  
          typedef struct _PROCESS_ENERGY_VALUES       // 13 elements, 0x90 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       Cycles[2][4];                                                  
/*0x040*/     UINT64       DiskEnergy;                                                    
/*0x048*/     UINT64       NetworkTailEnergy;                                             
/*0x050*/     UINT64       MBBTailEnergy;                                                 
/*0x058*/     UINT64       NetworkTxRxBytes;                                              
/*0x060*/     UINT64       MBBTxRxBytes;                                                  
              union                                   // 2 elements, 0x4 bytes (sizeof)   
              {                                                                           
/*0x068*/         ULONG32      Foreground : 1;        // 0 BitPosition                    
/*0x068*/         ULONG32      WindowInformation;                                         
              };                                                                          
/*0x06C*/     ULONG32      PixelArea;                                                     
/*0x070*/     INT64        PixelReportTimestamp;                                          
/*0x078*/     UINT64       PixelTime;                                                     
/*0x080*/     INT64        ForegroundReportTimestamp;                                     
/*0x088*/     UINT64       ForegroundTime;                                                
          }PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES;                                    
                                                                                          
          typedef struct _PROCESSOR_IDLE_DEPENDENCY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      ProcessorIndex;                                            
/*0x004*/     UINT8        ExpectedState;                                             
/*0x005*/     UINT8        AllowDeeperStates;                                         
/*0x006*/     UINT8        LooseDependency;                                           
/*0x007*/     UINT8        _PADDING0_[0x1];                                           
          }PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY;                                  
                                                                                      
          typedef struct _PROCESSOR_NUMBER // 3 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT16       Group;                                            
/*0x002*/     UINT8        Number;                                           
/*0x003*/     UINT8        Reserved;                                         
          }PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;                                  
                                                                             
          typedef struct _PROCESSOR_PROFILE_CONTROL_AREA // 1 elements, 0x60 bytes (sizeof)  
          {                                                                                  
/*0x000*/     struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;  // 12 elements, 0x60 bytes (sizeof) 
          }PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA;                                    
                                                                                             
          typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS // 6 elements, 0x1 bytes (sizeof) 
          {                                                                                   
              struct                                        // 5 elements, 0x1 bytes (sizeof) 
              {                                                                               
/*0x000*/         UINT8        Trustlet : 1;                // 0 BitPosition                  
/*0x000*/         UINT8        Ntos : 1;                    // 1 BitPosition                  
/*0x000*/         UINT8        WriteHandle : 1;             // 2 BitPosition                  
/*0x000*/         UINT8        ReadHandle : 1;              // 3 BitPosition                  
/*0x000*/         UINT8        Reserved : 4;                // 4 BitPosition                  
              };                                                                              
/*0x000*/     UINT8        AccessRights;                                                      
          }PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, *PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;                                  
                                                                                              
          typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE                          // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                                     
              union                                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                                 
                  struct                                                      // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                                             
/*0x000*/             UINT8        Version;                                                                     
/*0x001*/             UINT8        DataCount;                                                                   
/*0x002*/             UINT8        SemanticType;                                                                
/*0x003*/             union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights; // 6 elements, 0x1 bytes (sizeof) 
                  };                                                                                            
/*0x000*/         ULONG32      AttributeType;                                                                   
              };                                                                                                
          }PS_TRUSTLET_ATTRIBUTE_TYPE, *PPS_TRUSTLET_ATTRIBUTE_TYPE;                                            
                                                                                                                
          typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER          // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType; // 5 elements, 0x4 bytes (sizeof) 
              struct                                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                   
/*0x004*/         ULONG32      InstanceNumber : 8;              // 0 BitPosition                  
/*0x004*/         ULONG32      Reserved : 24;                   // 8 BitPosition                  
              };                                                                                  
          }PS_TRUSTLET_ATTRIBUTE_HEADER, *PPS_TRUSTLET_ATTRIBUTE_HEADER;                                  
                                                                                                  
          typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header; // 3 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       Data[1];                                                           
          }PS_TRUSTLET_ATTRIBUTE_DATA, *PPS_TRUSTLET_ATTRIBUTE_DATA;                                   
                                                                                              
          typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES         // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       TrustletIdentity;                                                       
/*0x008*/     struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];                                    
          }PS_TRUSTLET_CREATE_ATTRIBUTES, *PPS_TRUSTLET_CREATE_ATTRIBUTES;                                   
                                                                                                   
          typedef struct _PS_TRUSTLET_TKSESSION_ID // 1 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       SessionId[4];                                              
          }PS_TRUSTLET_TKSESSION_ID, *PPS_TRUSTLET_TKSESSION_ID;                                   
                                                                                      
          typedef struct _QUAD                     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 2 elements, 0x8 bytes (sizeof) 
              {                                                                      
/*0x000*/         INT64        UseThisFieldToCopy;                                   
/*0x000*/         FLOAT64      DoNotUseThisField;                                    
              };                                                                     
          }QUAD, *PQUAD;                                                             
                                                                                     
          typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME        // 3 elements, 0xC bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;                                   
/*0x004*/     struct _ACTIVATION_CONTEXT* ActivationContext;                                          
/*0x008*/     ULONG32      Flags;                                                                     
          }RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME;                                  
                                                                                                      
          typedef struct _RTL_CRITICAL_SECTION_DEBUG         // 9 elements, 0x20 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Type;                                                                
/*0x002*/     UINT16       CreatorBackTraceIndex;                                               
/*0x004*/     struct _RTL_CRITICAL_SECTION* CriticalSection;                                    
/*0x008*/     struct _LIST_ENTRY ProcessLocksList;           // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      EntryCount;                                                          
/*0x014*/     ULONG32      ContentionCount;                                                     
/*0x018*/     ULONG32      Flags;                                                               
/*0x01C*/     UINT16       CreatorBackTraceIndexHigh;                                           
/*0x01E*/     UINT16       SpareUSHORT;                                                         
          }RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;                                   
                                                                                                
          typedef struct _STRING          // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Length;                                          
/*0x002*/     UINT16       MaximumLength;                                   
/*0x004*/     CHAR*        Buffer;                                          
          }STRING, *PSTRING;                                                
                                                                            
          typedef struct _RTL_DRIVE_LETTER_CURDIR // 4 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT16       Flags;                                                    
/*0x002*/     UINT16       Length;                                                   
/*0x004*/     ULONG32      TimeStamp;                                                
/*0x008*/     struct _STRING DosPath;             // 3 elements, 0x8 bytes (sizeof)  
          }RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;                                   
                                                                                     
          typedef struct _RTL_DYNAMIC_HASH_TABLE // 9 elements, 0x24 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Flags;                                                   
/*0x004*/     ULONG32      Shift;                                                   
/*0x008*/     ULONG32      TableSize;                                               
/*0x00C*/     ULONG32      Pivot;                                                   
/*0x010*/     ULONG32      DivisorMask;                                             
/*0x014*/     ULONG32      NumEntries;                                              
/*0x018*/     ULONG32      NonEmptyBuckets;                                         
/*0x01C*/     ULONG32      NumEnumerators;                                          
/*0x020*/     VOID*        Directory;                                               
          }RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE;                                   
                                                                                    
          typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT // 3 elements, 0xC bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _LIST_ENTRY* ChainHead;                                               
/*0x004*/     struct _LIST_ENTRY* PrevLinkage;                                             
/*0x008*/     ULONG32      Signature;                                                      
          }RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;                                  
                                                                                           
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY // 2 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _LIST_ENTRY Linkage;              // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Signature;                                                    
          }RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY;                                  
                                                                                         
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR       // 4 elements, 0x14 bytes (sizeof) 
          {                                                                                          
              union                                               // 2 elements, 0xC bytes (sizeof)  
              {                                                                                      
/*0x000*/         struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // 2 elements, 0xC bytes (sizeof)  
/*0x000*/         struct _LIST_ENTRY* CurEntry;                                                      
              };                                                                                     
/*0x00C*/     struct _LIST_ENTRY* ChainHead;                                                         
/*0x010*/     ULONG32      BucketIndex;                                                              
          }RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;                                   
                                                                                                     
          typedef struct _RTL_HEAP_WALK_ENTRY               // 7 elements, 0x1C bytes (sizeof) 
          {                                                                                    
/*0x000*/     VOID*        DataAddress;                                                        
/*0x004*/     ULONG32      DataSize;                                                           
/*0x008*/     UINT8        OverheadBytes;                                                      
/*0x009*/     UINT8        SegmentIndex;                                                       
/*0x00A*/     UINT16       Flags;                                                              
              union                                         // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                
                  struct                                    // 4 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x00C*/             ULONG32      Settable;                                                   
/*0x010*/             UINT16       TagIndex;                                                   
/*0x012*/             UINT16       AllocatorBackTraceIndex;                                    
/*0x014*/             ULONG32      Reserved[2];                                                
                  }Block;                                                                      
                  struct                                    // 4 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x00C*/             ULONG32      CommittedSize;                                              
/*0x010*/             ULONG32      UnCommittedSize;                                            
/*0x014*/             VOID*        FirstEntry;                                                 
/*0x018*/             VOID*        LastEntry;                                                  
                  }Segment;                                                                    
              };                                                                               
          }RTL_HEAP_WALK_ENTRY, *PRTL_HEAP_WALK_ENTRY;                                         
                                                                                               
          typedef struct _RTL_SPARSE_BITMAP_CTX                                                                                                   // 15 elements, 0x34 bytes (sizeof) 
          {                                                                                                                                                                           
/*0x000*/     ULONG32      Lock;                                                                                                                                                      
/*0x004*/     struct _RTL_SPARSE_BITMAP_RANGE** BitmapRanges;                                                                                                                         
/*0x008*/     struct _RTL_BITMAP RangeArrayCommitStatus;                                                                                          // 2 elements, 0x8 bytes (sizeof)   
/*0x010*/     FUNCT_00C9_1704_AllocateRoutine* AllocateRoutine;                                                                                                                       
/*0x014*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* FreeRoutine;                                     
/*0x018*/     ULONG32      RangeCount;                                                                                                                                                
/*0x01C*/     ULONG32      RangeIndexLimit;                                                                                                                                           
/*0x020*/     ULONG32      BitsPerRange;                                                                                                                                              
/*0x024*/     ULONG32      RangeCountMax;                                                                                                                                             
/*0x028*/     ULONG32      RangeMetadataOffset;                                                                                                                                       
/*0x02C*/     ULONG32      MetadataSizePerBit;                                                                                                                                        
              struct                                                                                                                              // 4 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                       
/*0x030*/         ULONG32      DefaultBitsSet : 1;                                                                                                // 0 BitPosition                    
/*0x030*/         ULONG32      SparseRangeArray : 1;                                                                                              // 1 BitPosition                    
/*0x030*/         ULONG32      NoInternalLocking : 1;                                                                                             // 2 BitPosition                    
/*0x030*/         ULONG32      SpareFlags : 29;                                                                                                   // 3 BitPosition                    
              };                                                                                                                                                                      
          }RTL_SPARSE_BITMAP_CTX, *PRTL_SPARSE_BITMAP_CTX;                                                                                                                            
                                                                                                                                                                                      
          typedef struct _RTL_SPARSE_BITMAP_RANGE     // 3 elements, 0xC bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0xC bytes (sizeof) 
              {                                                                         
                  struct                              // 2 elements, 0xC bytes (sizeof) 
                  {                                                                     
/*0x000*/             ULONG32      Lock;                                                
/*0x004*/             struct _RTL_BITMAP RangeBitmap; // 2 elements, 0x8 bytes (sizeof) 
                  };                                                                    
/*0x000*/         struct _SINGLE_LIST_ENTRY Next;     // 1 elements, 0x4 bytes (sizeof) 
              };                                                                        
          }RTL_SPARSE_BITMAP_RANGE, *PRTL_SPARSE_BITMAP_RANGE;                                  
                                                                                        
          typedef struct _RTL_SPLAY_LINKS          // 3 elements, 0xC bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _RTL_SPLAY_LINKS* Parent;                                       
/*0x004*/     struct _RTL_SPLAY_LINKS* LeftChild;                                    
/*0x008*/     struct _RTL_SPLAY_LINKS* RightChild;                                   
          }RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS;                                       
                                                                                     
          typedef struct _RTL_STACK_DATABASE_LOCK // 1 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _RTL_SRWLOCK Lock;           // 7 elements, 0x4 bytes (sizeof) 
          }RTL_STACK_DATABASE_LOCK, *PRTL_STACK_DATABASE_LOCK;                                  
                                                                                    
          typedef struct _RTL_STD_LIST_ENTRY    // 1 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _RTL_STD_LIST_ENTRY* Next;                                   
          }RTL_STD_LIST_ENTRY, *PRTL_STD_LIST_ENTRY;                                  
                                                                                  
          typedef struct _RTL_STACK_TRACE_ENTRY        // 8 elements, 0x8C bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _RTL_STD_LIST_ENTRY HashChain;    // 1 elements, 0x4 bytes (sizeof)  
              struct                                   // 2 elements, 0x2 bytes (sizeof)  
              {                                                                           
/*0x004*/         UINT16       TraceCount : 11;        // 0 BitPosition                   
/*0x004*/         UINT16       BlockDepth : 5;         // 11 BitPosition                  
              };                                                                          
/*0x006*/     UINT16       IndexHigh;                                                     
/*0x008*/     UINT16       Index;                                                         
/*0x00A*/     UINT16       Depth;                                                         
              union                                    // 2 elements, 0x80 bytes (sizeof) 
              {                                                                           
/*0x00C*/         VOID*        BackTrace[32];                                             
/*0x00C*/         struct _SINGLE_LIST_ENTRY FreeChain; // 1 elements, 0x4 bytes (sizeof)  
              };                                                                          
          }RTL_STACK_TRACE_ENTRY, *PRTL_STACK_TRACE_ENTRY;                                   
                                                                                          
          typedef struct _RTL_STD_LIST_HEAD         // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _RTL_STD_LIST_ENTRY* Next;                                       
/*0x004*/     struct _RTL_STACK_DATABASE_LOCK Lock; // 1 elements, 0x4 bytes (sizeof) 
          }RTL_STD_LIST_HEAD, *PRTL_STD_LIST_HEAD;                                    
                                                                                      
          typedef struct _RTL_TRACE_BLOCK    // 8 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Magic;                                               
/*0x004*/     ULONG32      Count;                                               
/*0x008*/     ULONG32      Size;                                                
/*0x00C*/     ULONG32      UserCount;                                           
/*0x010*/     ULONG32      UserSize;                                            
/*0x014*/     VOID*        UserContext;                                         
/*0x018*/     struct _RTL_TRACE_BLOCK* Next;                                    
/*0x01C*/     VOID**       Trace;                                               
          }RTL_TRACE_BLOCK, *PRTL_TRACE_BLOCK;                                   
                                                                                
          typedef struct _RTL_TRACE_DATABASE              // 14 elements, 0x88 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Magic;                                                             
/*0x004*/     ULONG32      Flags;                                                             
/*0x008*/     ULONG32      Tag;                                                               
/*0x00C*/     struct _RTL_TRACE_SEGMENT* SegmentList;                                         
/*0x010*/     ULONG32      MaximumSize;                                                       
/*0x014*/     ULONG32      CurrentSize;                                                       
/*0x018*/     VOID*        Owner;                                                             
/*0x01C*/     struct _RTL_CRITICAL_SECTION Lock;          // 6 elements, 0x18 bytes (sizeof)  
/*0x034*/     ULONG32      NoOfBuckets;                                                       
/*0x038*/     struct _RTL_TRACE_BLOCK** Buckets;                                              
/*0x03C*/     FUNCT_0009_1B1A_HashFunction* HashFunction;                                     
/*0x040*/     ULONG32      NoOfTraces;                                                        
/*0x044*/     ULONG32      NoOfHits;                                                          
/*0x048*/     ULONG32      HashCounter[16];                                                   
          }RTL_TRACE_DATABASE, *PRTL_TRACE_DATABASE;                                          
                                                                                              
          typedef struct _RTL_TRACE_SEGMENT           // 7 elements, 0x1C bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      Magic;                                                        
/*0x004*/     struct _RTL_TRACE_DATABASE* Database;                                      
/*0x008*/     struct _RTL_TRACE_SEGMENT* NextSegment;                                    
/*0x00C*/     ULONG32      TotalSize;                                                    
/*0x010*/     CHAR*        SegmentStart;                                                 
/*0x014*/     CHAR*        SegmentEnd;                                                   
/*0x018*/     CHAR*        SegmentFree;                                                  
          }RTL_TRACE_SEGMENT, *PRTL_TRACE_SEGMENT;                                       
                                                                                         
          typedef struct _RTL_USER_PROCESS_PARAMETERS                // 33 elements, 0x2A4 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      MaximumLength;                                                                 
/*0x004*/     ULONG32      Length;                                                                        
/*0x008*/     ULONG32      Flags;                                                                         
/*0x00C*/     ULONG32      DebugFlags;                                                                    
/*0x010*/     VOID*        ConsoleHandle;                                                                 
/*0x014*/     ULONG32      ConsoleFlags;                                                                  
/*0x018*/     VOID*        StandardInput;                                                                 
/*0x01C*/     VOID*        StandardOutput;                                                                
/*0x020*/     VOID*        StandardError;                                                                 
/*0x024*/     struct _CURDIR CurrentDirectory;                       // 2 elements, 0xC bytes (sizeof)    
/*0x030*/     struct _UNICODE_STRING DllPath;                        // 3 elements, 0x8 bytes (sizeof)    
/*0x038*/     struct _UNICODE_STRING ImagePathName;                  // 3 elements, 0x8 bytes (sizeof)    
/*0x040*/     struct _UNICODE_STRING CommandLine;                    // 3 elements, 0x8 bytes (sizeof)    
/*0x048*/     VOID*        Environment;                                                                   
/*0x04C*/     ULONG32      StartingX;                                                                     
/*0x050*/     ULONG32      StartingY;                                                                     
/*0x054*/     ULONG32      CountX;                                                                        
/*0x058*/     ULONG32      CountY;                                                                        
/*0x05C*/     ULONG32      CountCharsX;                                                                   
/*0x060*/     ULONG32      CountCharsY;                                                                   
/*0x064*/     ULONG32      FillAttribute;                                                                 
/*0x068*/     ULONG32      WindowFlags;                                                                   
/*0x06C*/     ULONG32      ShowWindowFlags;                                                               
/*0x070*/     struct _UNICODE_STRING WindowTitle;                    // 3 elements, 0x8 bytes (sizeof)    
/*0x078*/     struct _UNICODE_STRING DesktopInfo;                    // 3 elements, 0x8 bytes (sizeof)    
/*0x080*/     struct _UNICODE_STRING ShellInfo;                      // 3 elements, 0x8 bytes (sizeof)    
/*0x088*/     struct _UNICODE_STRING RuntimeData;                    // 3 elements, 0x8 bytes (sizeof)    
/*0x090*/     struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];                                      
/*0x290*/     ULONG32      EnvironmentSize;                                                               
/*0x294*/     ULONG32      EnvironmentVersion;                                                            
/*0x298*/     VOID*        PackageDependencyData;                                                         
/*0x29C*/     ULONG32      ProcessGroupId;                                                                
/*0x2A0*/     ULONG32      LoaderThreads;                                                                 
          }RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;                                     
                                                                                                          
typedef struct _SCSI_REQUEST_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}SCSI_REQUEST_BLOCK, *PSCSI_REQUEST_BLOCK;                                  
                                                                     
          typedef struct _SECTION_OBJECT_POINTERS // 3 elements, 0xC bytes (sizeof) 
          {                                                                         
/*0x000*/     VOID*        DataSectionObject;                                       
/*0x004*/     VOID*        SharedCacheMap;                                          
/*0x008*/     VOID*        ImageSectionObject;                                      
          }SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS;                                  
                                                                                    
          typedef struct _SECURITY_DESCRIPTOR // 7 elements, 0x14 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Revision;                                             
/*0x001*/     UINT8        Sbz1;                                                 
/*0x002*/     UINT16       Control;                                              
/*0x004*/     VOID*        Owner;                                                
/*0x008*/     VOID*        Group;                                                
/*0x00C*/     struct _ACL* Sacl;                                                 
/*0x010*/     struct _ACL* Dacl;                                                 
          }SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR;                                   
                                                                                 
          typedef struct _SECURITY_QUALITY_OF_SERVICE                // 4 elements, 0xC bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Length;                                                                     
/*0x004*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                   
/*0x008*/     UINT8        ContextTrackingMode;                                                        
/*0x009*/     UINT8        EffectiveOnly;                                                              
/*0x00A*/     UINT8        _PADDING0_[0x2];                                                            
          }SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;                                  
                                                                                                       
          typedef struct _SEGMENT_HEAP                  // 23 elements, 0x2F8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      TotalReservedPages;                                               
/*0x004*/     ULONG32      TotalCommittedPages;                                              
/*0x008*/     ULONG32      Signature;                                                        
/*0x00C*/     ULONG32      GlobalFlags;                                                      
/*0x010*/     ULONG32      FreeCommittedPages;                                               
/*0x014*/     ULONG32      Interceptor;                                                      
/*0x018*/     UINT16       ProcessHeapListIndex;                                             
/*0x01A*/     UINT16       GlobalLockCount;                                                  
/*0x01C*/     ULONG32      GlobalLockOwner;                                                  
/*0x020*/     struct _RTL_SRWLOCK LargeMetadataLock;    // 7 elements, 0x4 bytes (sizeof)    
/*0x024*/     struct _RTL_RB_TREE LargeAllocMetadata;   // 2 elements, 0x8 bytes (sizeof)    
/*0x02C*/     ULONG32      LargeReservedPages;                                               
/*0x030*/     ULONG32      LargeCommittedPages;                                              
/*0x034*/     struct _RTL_SRWLOCK SegmentAllocatorLock; // 7 elements, 0x4 bytes (sizeof)    
/*0x038*/     struct _LIST_ENTRY SegmentListHead;       // 2 elements, 0x8 bytes (sizeof)    
/*0x040*/     ULONG32      SegmentCount;                                                     
/*0x044*/     struct _RTL_RB_TREE FreePageRanges;       // 2 elements, 0x8 bytes (sizeof)    
/*0x04C*/     struct _RTL_SRWLOCK ContextExtendLock;    // 7 elements, 0x4 bytes (sizeof)    
/*0x050*/     UINT8*       AllocatedBase;                                                    
/*0x054*/     UINT8*       UncommittedBase;                                                  
/*0x058*/     UINT8*       ReservedLimit;                                                    
/*0x05C*/     struct _HEAP_VS_CONTEXT VsContext;        // 7 elements, 0x34 bytes (sizeof)   
/*0x090*/     struct _HEAP_LFH_CONTEXT LfhContext;      // 7 elements, 0x268 bytes (sizeof)  
          }SEGMENT_HEAP, *PSEGMENT_HEAP;                                                     
                                                                                             
          typedef struct _SEGMENT_HEAP_EXTRA         // 5 elements, 0x8 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT16       AllocationTag;                                              
              struct                                 // 2 elements, 0x1 bytes (sizeof) 
              {                                                                        
/*0x002*/         UINT8        InterceptorIndex : 4; // 0 BitPosition                  
/*0x002*/         UINT8        UserFlags : 4;        // 4 BitPosition                  
              };                                                                       
/*0x003*/     UINT8        ExtraSizeInUnits;                                           
/*0x004*/     VOID*        Settable;                                                   
          }SEGMENT_HEAP_EXTRA, *PSEGMENT_HEAP_EXTRA;                                   
                                                                                       
typedef struct _SILO_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                              
}SILO_CONTEXT, *PSILO_CONTEXT;                                  
                                                               
          typedef struct _STACK_TRACE_DATABASE                 // 21 elements, 0x188 bytes (sizeof) 
          {                                                                                         
              union                                            // 2 elements, 0x38 bytes (sizeof)   
              {                                                                                     
/*0x000*/         CHAR         Reserved[56];                                                        
/*0x000*/         struct _RTL_STACK_DATABASE_LOCK Lock;        // 1 elements, 0x4 bytes (sizeof)    
              };                                                                                    
/*0x038*/     VOID*        Reserved2;                                                               
/*0x03C*/     ULONG32      PeakHashCollisionListLength;                                             
/*0x040*/     VOID*        LowerMemoryStart;                                                        
/*0x044*/     UINT8        PreCommitted;                                                            
/*0x045*/     UINT8        DumpInProgress;                                                          
/*0x046*/     UINT8        _PADDING0_[0x2];                                                         
/*0x048*/     VOID*        CommitBase;                                                              
/*0x04C*/     VOID*        CurrentLowerCommitLimit;                                                 
/*0x050*/     VOID*        CurrentUpperCommitLimit;                                                 
/*0x054*/     CHAR*        NextFreeLowerMemory;                                                     
/*0x058*/     CHAR*        NextFreeUpperMemory;                                                     
/*0x05C*/     ULONG32      NumberOfEntriesLookedUp;                                                 
/*0x060*/     ULONG32      NumberOfEntriesAdded;                                                    
/*0x064*/     struct _RTL_STACK_TRACE_ENTRY** EntryIndexArray;                                      
/*0x068*/     ULONG32      NumberOfEntriesAllocated;                                                
/*0x06C*/     ULONG32      NumberOfEntriesAvailable;                                                
/*0x070*/     ULONG32      NumberOfAllocationFailures;                                              
/*0x074*/     UINT8        _PADDING1_[0x4];                                                         
/*0x078*/     union _SLIST_HEADER FreeLists[32];                                                    
/*0x178*/     ULONG32      NumberOfBuckets;                                                         
/*0x17C*/     struct _RTL_STD_LIST_HEAD Buckets[1];                                                 
/*0x184*/     UINT8        _PADDING2_[0x4];                                                         
          }STACK_TRACE_DATABASE, *PSTACK_TRACE_DATABASE;                                            
                                                                                                    
          typedef struct _STRING64          // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;                                             
          }STRING64, *PSTRING64;                                               
                                                                               
          typedef struct _SYSTEM_POWER_CAPABILITIES            // 33 elements, 0x4C bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        PowerButtonPresent;                                                     
/*0x001*/     UINT8        SleepButtonPresent;                                                     
/*0x002*/     UINT8        LidPresent;                                                             
/*0x003*/     UINT8        SystemS1;                                                               
/*0x004*/     UINT8        SystemS2;                                                               
/*0x005*/     UINT8        SystemS3;                                                               
/*0x006*/     UINT8        SystemS4;                                                               
/*0x007*/     UINT8        SystemS5;                                                               
/*0x008*/     UINT8        HiberFilePresent;                                                       
/*0x009*/     UINT8        FullWake;                                                               
/*0x00A*/     UINT8        VideoDimPresent;                                                        
/*0x00B*/     UINT8        ApmPresent;                                                             
/*0x00C*/     UINT8        UpsPresent;                                                             
/*0x00D*/     UINT8        ThermalControl;                                                         
/*0x00E*/     UINT8        ProcessorThrottle;                                                      
/*0x00F*/     UINT8        ProcessorMinThrottle;                                                   
/*0x010*/     UINT8        ProcessorMaxThrottle;                                                   
/*0x011*/     UINT8        FastSystemS4;                                                           
/*0x012*/     UINT8        Hiberboot;                                                              
/*0x013*/     UINT8        WakeAlarmPresent;                                                       
/*0x014*/     UINT8        AoAc;                                                                   
/*0x015*/     UINT8        DiskSpinDown;                                                           
/*0x016*/     UINT8        HiberFileType;                                                          
/*0x017*/     UINT8        AoAcConnectivitySupported;                                              
/*0x018*/     UINT8        spare3[6];                                                              
/*0x01E*/     UINT8        SystemBatteriesPresent;                                                 
/*0x01F*/     UINT8        BatteriesAreShortTerm;                                                  
/*0x020*/     struct _BATTERY_REPORTING_SCALE BatteryScale[3];                                     
/*0x038*/     enum _SYSTEM_POWER_STATE AcOnLineWake;                                               
/*0x03C*/     enum _SYSTEM_POWER_STATE SoftLidWake;                                                
/*0x040*/     enum _SYSTEM_POWER_STATE RtcWake;                                                    
/*0x044*/     enum _SYSTEM_POWER_STATE MinDeviceWakeState;                                         
/*0x048*/     enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;                                      
          }SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;                                    
                                                                                                   
          typedef struct _TEB                                                  // 111 elements, 0x1000 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     struct _NT_TIB NtTib;                                            // 8 elements, 0x1C bytes (sizeof)     
/*0x01C*/     VOID*        EnvironmentPointer;                                                                        
/*0x020*/     struct _CLIENT_ID ClientId;                                      // 2 elements, 0x8 bytes (sizeof)      
/*0x028*/     VOID*        ActiveRpcHandle;                                                                           
/*0x02C*/     VOID*        ThreadLocalStoragePointer;                                                                 
/*0x030*/     struct _PEB* ProcessEnvironmentBlock;                                                                   
/*0x034*/     ULONG32      LastErrorValue;                                                                            
/*0x038*/     ULONG32      CountOfOwnedCriticalSections;                                                              
/*0x03C*/     VOID*        CsrClientThread;                                                                           
/*0x040*/     VOID*        Win32ThreadInfo;                                                                           
/*0x044*/     ULONG32      User32Reserved[26];                                                                        
/*0x0AC*/     ULONG32      UserReserved[5];                                                                           
/*0x0C0*/     VOID*        WOW32Reserved;                                                                             
/*0x0C4*/     ULONG32      CurrentLocale;                                                                             
/*0x0C8*/     ULONG32      FpSoftwareStatusRegister;                                                                  
/*0x0CC*/     VOID*        ReservedForDebuggerInstrumentation[16];                                                    
/*0x10C*/     VOID*        SystemReserved1[38];                                                                       
/*0x1A4*/     LONG32       ExceptionCode;                                                                             
/*0x1A8*/     struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;                                        
/*0x1AC*/     ULONG32      InstrumentationCallbackSp;                                                                 
/*0x1B0*/     ULONG32      InstrumentationCallbackPreviousPc;                                                         
/*0x1B4*/     ULONG32      InstrumentationCallbackPreviousSp;                                                         
/*0x1B8*/     UINT8        InstrumentationCallbackDisabled;                                                           
/*0x1B9*/     UINT8        SpareBytes[23];                                                                            
/*0x1D0*/     ULONG32      TxFsContext;                                                                               
/*0x1D4*/     struct _GDI_TEB_BATCH GdiTebBatch;                               // 4 elements, 0x4E0 bytes (sizeof)    
/*0x6B4*/     struct _CLIENT_ID RealClientId;                                  // 2 elements, 0x8 bytes (sizeof)      
/*0x6BC*/     VOID*        GdiCachedProcessHandle;                                                                    
/*0x6C0*/     ULONG32      GdiClientPID;                                                                              
/*0x6C4*/     ULONG32      GdiClientTID;                                                                              
/*0x6C8*/     VOID*        GdiThreadLocalInfo;                                                                        
/*0x6CC*/     ULONG32      Win32ClientInfo[62];                                                                       
/*0x7C4*/     VOID*        glDispatchTable[233];                                                                      
/*0xB68*/     ULONG32      glReserved1[29];                                                                           
/*0xBDC*/     VOID*        glReserved2;                                                                               
/*0xBE0*/     VOID*        glSectionInfo;                                                                             
/*0xBE4*/     VOID*        glSection;                                                                                 
/*0xBE8*/     VOID*        glTable;                                                                                   
/*0xBEC*/     VOID*        glCurrentRC;                                                                               
/*0xBF0*/     VOID*        glContext;                                                                                 
/*0xBF4*/     ULONG32      LastStatusValue;                                                                           
/*0xBF8*/     struct _UNICODE_STRING StaticUnicodeString;                      // 3 elements, 0x8 bytes (sizeof)      
/*0xC00*/     WCHAR        StaticUnicodeBuffer[261];                                                                  
/*0xE0A*/     UINT8        _PADDING0_[0x2];                                                                           
/*0xE0C*/     VOID*        DeallocationStack;                                                                         
/*0xE10*/     VOID*        TlsSlots[64];                                                                              
/*0xF10*/     struct _LIST_ENTRY TlsLinks;                                     // 2 elements, 0x8 bytes (sizeof)      
/*0xF18*/     VOID*        Vdm;                                                                                       
/*0xF1C*/     VOID*        ReservedForNtRpc;                                                                          
/*0xF20*/     VOID*        DbgSsReserved[2];                                                                          
/*0xF28*/     ULONG32      HardErrorMode;                                                                             
/*0xF2C*/     VOID*        Instrumentation[9];                                                                        
/*0xF50*/     struct _GUID ActivityId;                                         // 4 elements, 0x10 bytes (sizeof)     
/*0xF60*/     VOID*        SubProcessTag;                                                                             
/*0xF64*/     VOID*        PerflibData;                                                                               
/*0xF68*/     VOID*        EtwTraceData;                                                                              
/*0xF6C*/     VOID*        WinSockData;                                                                               
/*0xF70*/     ULONG32      GdiBatchCount;                                                                             
              union                                                            // 3 elements, 0x4 bytes (sizeof)      
              {                                                                                                       
/*0xF74*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;              // 3 elements, 0x4 bytes (sizeof)      
/*0xF74*/         ULONG32      IdealProcessorValue;                                                                   
                  struct                                                       // 4 elements, 0x4 bytes (sizeof)      
                  {                                                                                                   
/*0xF74*/             UINT8        ReservedPad0;                                                                      
/*0xF75*/             UINT8        ReservedPad1;                                                                      
/*0xF76*/             UINT8        ReservedPad2;                                                                      
/*0xF77*/             UINT8        IdealProcessor;                                                                    
                  };                                                                                                  
              };                                                                                                      
/*0xF78*/     ULONG32      GuaranteedStackBytes;                                                                      
/*0xF7C*/     VOID*        ReservedForPerf;                                                                           
/*0xF80*/     VOID*        ReservedForOle;                                                                            
/*0xF84*/     ULONG32      WaitingOnLoaderLock;                                                                       
/*0xF88*/     VOID*        SavedPriorityState;                                                                        
/*0xF8C*/     ULONG32      ReservedForCodeCoverage;                                                                   
/*0xF90*/     VOID*        ThreadPoolData;                                                                            
/*0xF94*/     VOID**       TlsExpansionSlots;                                                                         
/*0xF98*/     ULONG32      MuiGeneration;                                                                             
/*0xF9C*/     ULONG32      IsImpersonating;                                                                           
/*0xFA0*/     VOID*        NlsCache;                                                                                  
/*0xFA4*/     VOID*        pShimData;                                                                                 
/*0xFA8*/     UINT16       HeapVirtualAffinity;                                                                       
/*0xFAA*/     UINT16       LowFragHeapDataSlot;                                                                       
/*0xFAC*/     VOID*        CurrentTransactionHandle;                                                                  
/*0xFB0*/     struct _TEB_ACTIVE_FRAME* ActiveFrame;                                                                  
/*0xFB4*/     VOID*        FlsData;                                                                                   
/*0xFB8*/     VOID*        PreferredLanguages;                                                                        
/*0xFBC*/     VOID*        UserPrefLanguages;                                                                         
/*0xFC0*/     VOID*        MergedPrefLanguages;                                                                       
/*0xFC4*/     ULONG32      MuiImpersonation;                                                                          
              union                                                            // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                                       
/*0xFC8*/         UINT16       CrossTebFlags;                                                                         
/*0xFC8*/         UINT16       SpareCrossTebBits : 16;                         // 0 BitPosition                       
              };                                                                                                      
              union                                                            // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                                       
/*0xFCA*/         UINT16       SameTebFlags;                                                                          
                  struct                                                       // 15 elements, 0x2 bytes (sizeof)     
                  {                                                                                                   
/*0xFCA*/             UINT16       SafeThunkCall : 1;                          // 0 BitPosition                       
/*0xFCA*/             UINT16       InDebugPrint : 1;                           // 1 BitPosition                       
/*0xFCA*/             UINT16       HasFiberData : 1;                           // 2 BitPosition                       
/*0xFCA*/             UINT16       SkipThreadAttach : 1;                       // 3 BitPosition                       
/*0xFCA*/             UINT16       WerInShipAssertCode : 1;                    // 4 BitPosition                       
/*0xFCA*/             UINT16       RanProcessInit : 1;                         // 5 BitPosition                       
/*0xFCA*/             UINT16       ClonedThread : 1;                           // 6 BitPosition                       
/*0xFCA*/             UINT16       SuppressDebugMsg : 1;                       // 7 BitPosition                       
/*0xFCA*/             UINT16       DisableUserStackWalk : 1;                   // 8 BitPosition                       
/*0xFCA*/             UINT16       RtlExceptionAttached : 1;                   // 9 BitPosition                       
/*0xFCA*/             UINT16       InitialThread : 1;                          // 10 BitPosition                      
/*0xFCA*/             UINT16       SessionAware : 1;                           // 11 BitPosition                      
/*0xFCA*/             UINT16       LoadOwner : 1;                              // 12 BitPosition                      
/*0xFCA*/             UINT16       LoaderWorker : 1;                           // 13 BitPosition                      
/*0xFCA*/             UINT16       SpareSameTebBits : 2;                       // 14 BitPosition                      
                  };                                                                                                  
              };                                                                                                      
/*0xFCC*/     VOID*        TxnScopeEnterCallback;                                                                     
/*0xFD0*/     VOID*        TxnScopeExitCallback;                                                                      
/*0xFD4*/     VOID*        TxnScopeContext;                                                                           
/*0xFD8*/     ULONG32      LockCount;                                                                                 
/*0xFDC*/     LONG32       WowTebOffset;                                                                              
/*0xFE0*/     VOID*        ResourceRetValue;                                                                          
/*0xFE4*/     VOID*        ReservedForWdf;                                                                            
/*0xFE8*/     UINT64       ReservedForCrt;                                                                            
/*0xFF0*/     struct _GUID EffectiveContainerId;                               // 4 elements, 0x10 bytes (sizeof)     
          }TEB, *PTEB;                                                                                                
                                                                                                                      
          typedef struct _TEB_ACTIVE_FRAME               // 3 elements, 0xC bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Flags;                                                          
/*0x004*/     struct _TEB_ACTIVE_FRAME* Previous;                                          
/*0x008*/     struct _TEB_ACTIVE_FRAME_CONTEXT* Context;                                   
          }TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME;                                           
                                                                                           
          typedef struct _TEB_ACTIVE_FRAME_CONTEXT // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Flags;                                                    
/*0x004*/     CHAR*        FrameName;                                                
          }TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT;                                  
                                                                                     
          typedef struct _TEB32                                    // 111 elements, 0x1000 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _NT_TIB32 NtTib;                              // 8 elements, 0x1C bytes (sizeof)     
/*0x01C*/     ULONG32      EnvironmentPointer;                                                            
/*0x020*/     struct _CLIENT_ID32 ClientId;                        // 2 elements, 0x8 bytes (sizeof)      
/*0x028*/     ULONG32      ActiveRpcHandle;                                                               
/*0x02C*/     ULONG32      ThreadLocalStoragePointer;                                                     
/*0x030*/     ULONG32      ProcessEnvironmentBlock;                                                       
/*0x034*/     ULONG32      LastErrorValue;                                                                
/*0x038*/     ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x03C*/     ULONG32      CsrClientThread;                                                               
/*0x040*/     ULONG32      Win32ThreadInfo;                                                               
/*0x044*/     ULONG32      User32Reserved[26];                                                            
/*0x0AC*/     ULONG32      UserReserved[5];                                                               
/*0x0C0*/     ULONG32      WOW32Reserved;                                                                 
/*0x0C4*/     ULONG32      CurrentLocale;                                                                 
/*0x0C8*/     ULONG32      FpSoftwareStatusRegister;                                                      
/*0x0CC*/     ULONG32      ReservedForDebuggerInstrumentation[16];                                        
/*0x10C*/     ULONG32      SystemReserved1[38];                                                           
/*0x1A4*/     LONG32       ExceptionCode;                                                                 
/*0x1A8*/     ULONG32      ActivationContextStackPointer;                                                 
/*0x1AC*/     ULONG32      InstrumentationCallbackSp;                                                     
/*0x1B0*/     ULONG32      InstrumentationCallbackPreviousPc;                                             
/*0x1B4*/     ULONG32      InstrumentationCallbackPreviousSp;                                             
/*0x1B8*/     UINT8        InstrumentationCallbackDisabled;                                               
/*0x1B9*/     UINT8        SpareBytes[23];                                                                
/*0x1D0*/     ULONG32      TxFsContext;                                                                   
/*0x1D4*/     struct _GDI_TEB_BATCH32 GdiTebBatch;                 // 4 elements, 0x4E0 bytes (sizeof)    
/*0x6B4*/     struct _CLIENT_ID32 RealClientId;                    // 2 elements, 0x8 bytes (sizeof)      
/*0x6BC*/     ULONG32      GdiCachedProcessHandle;                                                        
/*0x6C0*/     ULONG32      GdiClientPID;                                                                  
/*0x6C4*/     ULONG32      GdiClientTID;                                                                  
/*0x6C8*/     ULONG32      GdiThreadLocalInfo;                                                            
/*0x6CC*/     ULONG32      Win32ClientInfo[62];                                                           
/*0x7C4*/     ULONG32      glDispatchTable[233];                                                          
/*0xB68*/     ULONG32      glReserved1[29];                                                               
/*0xBDC*/     ULONG32      glReserved2;                                                                   
/*0xBE0*/     ULONG32      glSectionInfo;                                                                 
/*0xBE4*/     ULONG32      glSection;                                                                     
/*0xBE8*/     ULONG32      glTable;                                                                       
/*0xBEC*/     ULONG32      glCurrentRC;                                                                   
/*0xBF0*/     ULONG32      glContext;                                                                     
/*0xBF4*/     ULONG32      LastStatusValue;                                                               
/*0xBF8*/     struct _STRING32 StaticUnicodeString;                // 3 elements, 0x8 bytes (sizeof)      
/*0xC00*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0xE0A*/     UINT8        _PADDING0_[0x2];                                                               
/*0xE0C*/     ULONG32      DeallocationStack;                                                             
/*0xE10*/     ULONG32      TlsSlots[64];                                                                  
/*0xF10*/     struct _LIST_ENTRY32 TlsLinks;                       // 2 elements, 0x8 bytes (sizeof)      
/*0xF18*/     ULONG32      Vdm;                                                                           
/*0xF1C*/     ULONG32      ReservedForNtRpc;                                                              
/*0xF20*/     ULONG32      DbgSsReserved[2];                                                              
/*0xF28*/     ULONG32      HardErrorMode;                                                                 
/*0xF2C*/     ULONG32      Instrumentation[9];                                                            
/*0xF50*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0xF60*/     ULONG32      SubProcessTag;                                                                 
/*0xF64*/     ULONG32      PerflibData;                                                                   
/*0xF68*/     ULONG32      EtwTraceData;                                                                  
/*0xF6C*/     ULONG32      WinSockData;                                                                   
/*0xF70*/     ULONG32      GdiBatchCount;                                                                 
              union                                                // 3 elements, 0x4 bytes (sizeof)      
              {                                                                                           
/*0xF74*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0xF74*/         ULONG32      IdealProcessorValue;                                                       
                  struct                                           // 4 elements, 0x4 bytes (sizeof)      
                  {                                                                                       
/*0xF74*/             UINT8        ReservedPad0;                                                          
/*0xF75*/             UINT8        ReservedPad1;                                                          
/*0xF76*/             UINT8        ReservedPad2;                                                          
/*0xF77*/             UINT8        IdealProcessor;                                                        
                  };                                                                                      
              };                                                                                          
/*0xF78*/     ULONG32      GuaranteedStackBytes;                                                          
/*0xF7C*/     ULONG32      ReservedForPerf;                                                               
/*0xF80*/     ULONG32      ReservedForOle;                                                                
/*0xF84*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0xF88*/     ULONG32      SavedPriorityState;                                                            
/*0xF8C*/     ULONG32      ReservedForCodeCoverage;                                                       
/*0xF90*/     ULONG32      ThreadPoolData;                                                                
/*0xF94*/     ULONG32      TlsExpansionSlots;                                                             
/*0xF98*/     ULONG32      MuiGeneration;                                                                 
/*0xF9C*/     ULONG32      IsImpersonating;                                                               
/*0xFA0*/     ULONG32      NlsCache;                                                                      
/*0xFA4*/     ULONG32      pShimData;                                                                     
/*0xFA8*/     UINT16       HeapVirtualAffinity;                                                           
/*0xFAA*/     UINT16       LowFragHeapDataSlot;                                                           
/*0xFAC*/     ULONG32      CurrentTransactionHandle;                                                      
/*0xFB0*/     ULONG32      ActiveFrame;                                                                   
/*0xFB4*/     ULONG32      FlsData;                                                                       
/*0xFB8*/     ULONG32      PreferredLanguages;                                                            
/*0xFBC*/     ULONG32      UserPrefLanguages;                                                             
/*0xFC0*/     ULONG32      MergedPrefLanguages;                                                           
/*0xFC4*/     ULONG32      MuiImpersonation;                                                              
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFC8*/         UINT16       CrossTebFlags;                                                             
/*0xFC8*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
              };                                                                                          
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFCA*/         UINT16       SameTebFlags;                                                              
                  struct                                           // 15 elements, 0x2 bytes (sizeof)     
                  {                                                                                       
/*0xFCA*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0xFCA*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0xFCA*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0xFCA*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0xFCA*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0xFCA*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0xFCA*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0xFCA*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0xFCA*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0xFCA*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0xFCA*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0xFCA*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0xFCA*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0xFCA*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0xFCA*/             UINT16       SpareSameTebBits : 2;           // 14 BitPosition                      
                  };                                                                                      
              };                                                                                          
/*0xFCC*/     ULONG32      TxnScopeEnterCallback;                                                         
/*0xFD0*/     ULONG32      TxnScopeExitCallback;                                                          
/*0xFD4*/     ULONG32      TxnScopeContext;                                                               
/*0xFD8*/     ULONG32      LockCount;                                                                     
/*0xFDC*/     LONG32       WowTebOffset;                                                                  
/*0xFE0*/     ULONG32      ResourceRetValue;                                                              
/*0xFE4*/     ULONG32      ReservedForWdf;                                                                
/*0xFE8*/     UINT64       ReservedForCrt;                                                                
/*0xFF0*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
          }TEB32, *PTEB32;                                                                                
                                                                                                          
           typedef struct _TEB64                                    // 120 elements, 0x1838 bytes (sizeof) 
           {                                                                                               
/*0x000*/      struct _NT_TIB64 NtTib;                              // 8 elements, 0x38 bytes (sizeof)     
/*0x038*/      UINT64       EnvironmentPointer;                                                            
/*0x040*/      struct _CLIENT_ID64 ClientId;                        // 2 elements, 0x10 bytes (sizeof)     
/*0x050*/      UINT64       ActiveRpcHandle;                                                               
/*0x058*/      UINT64       ThreadLocalStoragePointer;                                                     
/*0x060*/      UINT64       ProcessEnvironmentBlock;                                                       
/*0x068*/      ULONG32      LastErrorValue;                                                                
/*0x06C*/      ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x070*/      UINT64       CsrClientThread;                                                               
/*0x078*/      UINT64       Win32ThreadInfo;                                                               
/*0x080*/      ULONG32      User32Reserved[26];                                                            
/*0x0E8*/      ULONG32      UserReserved[5];                                                               
/*0x0FC*/      UINT8        _PADDING0_[0x4];                                                               
/*0x100*/      UINT64       WOW32Reserved;                                                                 
/*0x108*/      ULONG32      CurrentLocale;                                                                 
/*0x10C*/      ULONG32      FpSoftwareStatusRegister;                                                      
/*0x110*/      UINT64       ReservedForDebuggerInstrumentation[16];                                        
/*0x190*/      UINT64       SystemReserved1[38];                                                           
/*0x2C0*/      LONG32       ExceptionCode;                                                                 
/*0x2C4*/      UINT8        Padding0[4];                                                                   
/*0x2C8*/      UINT64       ActivationContextStackPointer;                                                 
/*0x2D0*/      UINT64       InstrumentationCallbackSp;                                                     
/*0x2D8*/      UINT64       InstrumentationCallbackPreviousPc;                                             
/*0x2E0*/      UINT64       InstrumentationCallbackPreviousSp;                                             
/*0x2E8*/      ULONG32      TxFsContext;                                                                   
/*0x2EC*/      UINT8        InstrumentationCallbackDisabled;                                               
/*0x2ED*/      UINT8        Padding1[3];                                                                   
/*0x2F0*/      struct _GDI_TEB_BATCH64 GdiTebBatch;                 // 4 elements, 0x4E8 bytes (sizeof)    
/*0x7D8*/      struct _CLIENT_ID64 RealClientId;                    // 2 elements, 0x10 bytes (sizeof)     
/*0x7E8*/      UINT64       GdiCachedProcessHandle;                                                        
/*0x7F0*/      ULONG32      GdiClientPID;                                                                  
/*0x7F4*/      ULONG32      GdiClientTID;                                                                  
/*0x7F8*/      UINT64       GdiThreadLocalInfo;                                                            
/*0x800*/      UINT64       Win32ClientInfo[62];                                                           
/*0x9F0*/      UINT64       glDispatchTable[233];                                                          
/*0x1138*/     UINT64       glReserved1[29];                                                               
/*0x1220*/     UINT64       glReserved2;                                                                   
/*0x1228*/     UINT64       glSectionInfo;                                                                 
/*0x1230*/     UINT64       glSection;                                                                     
/*0x1238*/     UINT64       glTable;                                                                       
/*0x1240*/     UINT64       glCurrentRC;                                                                   
/*0x1248*/     UINT64       glContext;                                                                     
/*0x1250*/     ULONG32      LastStatusValue;                                                               
/*0x1254*/     UINT8        Padding2[4];                                                                   
/*0x1258*/     struct _STRING64 StaticUnicodeString;                // 3 elements, 0x10 bytes (sizeof)     
/*0x1268*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0x1472*/     UINT8        Padding3[6];                                                                   
/*0x1478*/     UINT64       DeallocationStack;                                                             
/*0x1480*/     UINT64       TlsSlots[64];                                                                  
/*0x1680*/     struct _LIST_ENTRY64 TlsLinks;                       // 2 elements, 0x10 bytes (sizeof)     
/*0x1690*/     UINT64       Vdm;                                                                           
/*0x1698*/     UINT64       ReservedForNtRpc;                                                              
/*0x16A0*/     UINT64       DbgSsReserved[2];                                                              
/*0x16B0*/     ULONG32      HardErrorMode;                                                                 
/*0x16B4*/     UINT8        Padding4[4];                                                                   
/*0x16B8*/     UINT64       Instrumentation[11];                                                           
/*0x1710*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0x1720*/     UINT64       SubProcessTag;                                                                 
/*0x1728*/     UINT64       PerflibData;                                                                   
/*0x1730*/     UINT64       EtwTraceData;                                                                  
/*0x1738*/     UINT64       WinSockData;                                                                   
/*0x1740*/     ULONG32      GdiBatchCount;                                                                 
               union                                                // 3 elements, 0x4 bytes (sizeof)      
               {                                                                                           
/*0x1744*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0x1744*/         ULONG32      IdealProcessorValue;                                                       
                   struct                                           // 4 elements, 0x4 bytes (sizeof)      
                   {                                                                                       
/*0x1744*/             UINT8        ReservedPad0;                                                          
/*0x1745*/             UINT8        ReservedPad1;                                                          
/*0x1746*/             UINT8        ReservedPad2;                                                          
/*0x1747*/             UINT8        IdealProcessor;                                                        
                   };                                                                                      
               };                                                                                          
/*0x1748*/     ULONG32      GuaranteedStackBytes;                                                          
/*0x174C*/     UINT8        Padding5[4];                                                                   
/*0x1750*/     UINT64       ReservedForPerf;                                                               
/*0x1758*/     UINT64       ReservedForOle;                                                                
/*0x1760*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0x1764*/     UINT8        Padding6[4];                                                                   
/*0x1768*/     UINT64       SavedPriorityState;                                                            
/*0x1770*/     UINT64       ReservedForCodeCoverage;                                                       
/*0x1778*/     UINT64       ThreadPoolData;                                                                
/*0x1780*/     UINT64       TlsExpansionSlots;                                                             
/*0x1788*/     UINT64       DeallocationBStore;                                                            
/*0x1790*/     UINT64       BStoreLimit;                                                                   
/*0x1798*/     ULONG32      MuiGeneration;                                                                 
/*0x179C*/     ULONG32      IsImpersonating;                                                               
/*0x17A0*/     UINT64       NlsCache;                                                                      
/*0x17A8*/     UINT64       pShimData;                                                                     
/*0x17B0*/     UINT16       HeapVirtualAffinity;                                                           
/*0x17B2*/     UINT16       LowFragHeapDataSlot;                                                           
/*0x17B4*/     UINT8        Padding7[4];                                                                   
/*0x17B8*/     UINT64       CurrentTransactionHandle;                                                      
/*0x17C0*/     UINT64       ActiveFrame;                                                                   
/*0x17C8*/     UINT64       FlsData;                                                                       
/*0x17D0*/     UINT64       PreferredLanguages;                                                            
/*0x17D8*/     UINT64       UserPrefLanguages;                                                             
/*0x17E0*/     UINT64       MergedPrefLanguages;                                                           
/*0x17E8*/     ULONG32      MuiImpersonation;                                                              
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EC*/         UINT16       CrossTebFlags;                                                             
/*0x17EC*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
               };                                                                                          
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EE*/         UINT16       SameTebFlags;                                                              
                   struct                                           // 15 elements, 0x2 bytes (sizeof)     
                   {                                                                                       
/*0x17EE*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0x17EE*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0x17EE*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0x17EE*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0x17EE*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0x17EE*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0x17EE*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0x17EE*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0x17EE*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0x17EE*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0x17EE*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0x17EE*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0x17EE*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0x17EE*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0x17EE*/             UINT16       SpareSameTebBits : 2;           // 14 BitPosition                      
                   };                                                                                      
               };                                                                                          
/*0x17F0*/     UINT64       TxnScopeEnterCallback;                                                         
/*0x17F8*/     UINT64       TxnScopeExitCallback;                                                          
/*0x1800*/     UINT64       TxnScopeContext;                                                               
/*0x1808*/     ULONG32      LockCount;                                                                     
/*0x180C*/     LONG32       WowTebOffset;                                                                  
/*0x1810*/     UINT64       ResourceRetValue;                                                              
/*0x1818*/     UINT64       ReservedForWdf;                                                                
/*0x1820*/     UINT64       ReservedForCrt;                                                                
/*0x1828*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
           }TEB64, *PTEB64;                                                                                
                                                                                                           
          typedef struct _TERMINATION_PORT    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _TERMINATION_PORT* Next;                                   
/*0x004*/     VOID*        Port;                                                
          }TERMINATION_PORT, *PTERMINATION_PORT;                                  
                                                                                
          typedef struct _THREAD_ENERGY_VALUES // 1 elements, 0x40 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       Cycles[2][4];                                          
          }THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES;                                   
                                                                                  
          typedef struct _THREAD_PERFORMANCE_DATA       // 10 elements, 0x1C0 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Size;                                                             
/*0x002*/     UINT16       Version;                                                          
/*0x004*/     struct _PROCESSOR_NUMBER ProcessorNumber; // 3 elements, 0x4 bytes (sizeof)    
/*0x008*/     ULONG32      ContextSwitches;                                                  
/*0x00C*/     ULONG32      HwCountersCount;                                                  
/*0x010*/     UINT64       UpdateCount;                                                      
/*0x018*/     UINT64       WaitReasonBitMap;                                                 
/*0x020*/     UINT64       HardwareCounters;                                                 
/*0x028*/     struct _COUNTER_READING CycleTime;        // 4 elements, 0x18 bytes (sizeof)   
/*0x040*/     struct _COUNTER_READING HwCounters[16];                                        
          }THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA;                                     
                                                                                             
          typedef struct _TP_CALLBACK_ENVIRON_V3                                                              // 10 elements, 0x28 bytes (sizeof) 
          {                                                                                                                                       
/*0x000*/     ULONG32      Version;                                                                                                               
/*0x004*/     struct _TP_POOL* Pool;                                                                                                              
/*0x008*/     struct _TP_CLEANUP_GROUP* CleanupGroup;                                                                                             
/*0x00C*/     FUNCT_00C6_00C5_CleanupGroupCancelCallback_DeRefSecurityDescriptor* CleanupGroupCancelCallback;                                     
/*0x010*/     VOID*        RaceDll;                                                                                                               
/*0x014*/     struct _ACTIVATION_CONTEXT* ActivationContext;                                                                                      
/*0x018*/     FUNCT_00C6_00CD_FinalizationCallback* FinalizationCallback;                                                                         
              union                                                                                           // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                   
/*0x01C*/         ULONG32      Flags;                                                                                                             
                  struct                                                                                      // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                               
/*0x01C*/             ULONG32      LongFunction : 1;                                                          // 0 BitPosition                    
/*0x01C*/             ULONG32      Persistent : 1;                                                            // 1 BitPosition                    
/*0x01C*/             ULONG32      Private : 30;                                                              // 2 BitPosition                    
                  }s;                                                                                                                             
              }u;                                                                                                                                 
/*0x020*/     enum _TP_CALLBACK_PRIORITY CallbackPriority;                                                                                        
/*0x024*/     ULONG32      Size;                                                                                                                  
          }TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3;                                                                                      
                                                                                                                                                  
typedef struct _TP_CALLBACK_INSTANCE // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;                                  
                                                                       
typedef struct _TP_CLEANUP_GROUP // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;                                  
                                                                   
typedef struct _TP_POOL // 0 elements, 0x0 bytes (sizeof) 
{                                                         
}TP_POOL, *PTP_POOL;                                      
                                                          
          typedef struct _TRUSTLET_COLLABORATION_ID // 1 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Value[2];                                                   
          }TRUSTLET_COLLABORATION_ID, *PTRUSTLET_COLLABORATION_ID;                                   
                                                                                       
          typedef struct _TRUSTLET_MAILBOX_KEY // 1 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       SecretValue[2];                                        
          }TRUSTLET_MAILBOX_KEY, *PTRUSTLET_MAILBOX_KEY;                                   
                                                                                  
          typedef struct _TXN_PARAMETER_BLOCK // 3 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT16       Length;                                              
/*0x002*/     UINT16       TxFsContext;                                         
/*0x004*/     VOID*        TransactionObject;                                   
          }TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;                                  
                                                                                
          typedef struct _VPB                      // 9 elements, 0x58 bytes (sizeof) 
          {                                                                           
/*0x000*/     INT16        Type;                                                      
/*0x002*/     INT16        Size;                                                      
/*0x004*/     UINT16       Flags;                                                     
/*0x006*/     UINT16       VolumeLabelLength;                                         
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                    
/*0x00C*/     struct _DEVICE_OBJECT* RealDevice;                                      
/*0x010*/     ULONG32      SerialNumber;                                              
/*0x014*/     ULONG32      ReferenceCount;                                            
/*0x018*/     WCHAR        VolumeLabel[32];                                           
          }VPB, *PVPB;                                                                
                                                                                      
          typedef union _WHEA_ERROR_PACKET_FLAGS            // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 7 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PreviousError : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved1 : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      HypervisorError : 1;         // 2 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      PlatformPfaControl : 1;      // 4 BitPosition                  
/*0x000*/         ULONG32      PlatformDirectedOffline : 1; // 5 BitPosition                  
/*0x000*/         ULONG32      Reserved2 : 26;              // 6 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS;                                  
                                                                                              
          typedef struct _WHEA_ERROR_PACKET_V2                // 16 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Signature;                                                             
/*0x004*/     ULONG32      Version;                                                               
/*0x008*/     ULONG32      Length;                                                                
/*0x00C*/     union _WHEA_ERROR_PACKET_FLAGS Flags;           // 8 elements, 0x4 bytes (sizeof)   
/*0x010*/     enum _WHEA_ERROR_TYPE ErrorType;                                                    
/*0x014*/     enum _WHEA_ERROR_SEVERITY ErrorSeverity;                                            
/*0x018*/     ULONG32      ErrorSourceId;                                                         
/*0x01C*/     enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;                                       
/*0x020*/     struct _GUID NotifyType;                        // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       Context;                                                               
/*0x038*/     enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;                                     
/*0x03C*/     ULONG32      Reserved1;                                                             
/*0x040*/     ULONG32      DataOffset;                                                            
/*0x044*/     ULONG32      DataLength;                                                            
/*0x048*/     ULONG32      PshedDataOffset;                                                       
/*0x04C*/     ULONG32      PshedDataLength;                                                       
          }WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2;                                          
                                                                                                  
          typedef union _WHEA_REVISION        // 3 elements, 0x2 bytes (sizeof) 
          {                                                                     
              struct                          // 2 elements, 0x2 bytes (sizeof) 
              {                                                                 
/*0x000*/         UINT8        MinorRevision;                                   
/*0x001*/         UINT8        MajorRevision;                                   
              };                                                                
/*0x000*/     UINT16       AsUSHORT;                                            
          }WHEA_REVISION, *PWHEA_REVISION;                                      
                                                                                
          typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 4 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PlatformId : 1;              // 0 BitPosition                  
/*0x000*/         ULONG32      Timestamp : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      PartitionId : 1;             // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;               // 3 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS;                                  
                                                                                              
          typedef union _WHEA_TIMESTAMP             // 10 elements, 0x8 bytes (sizeof) 
          {                                                                            
              struct                                // 9 elements, 0x8 bytes (sizeof)  
              {                                                                        
/*0x000*/         UINT64       Seconds : 8;         // 0 BitPosition                   
/*0x000*/         UINT64       Minutes : 8;         // 8 BitPosition                   
/*0x000*/         UINT64       Hours : 8;           // 16 BitPosition                  
/*0x000*/         UINT64       Precise : 1;         // 24 BitPosition                  
/*0x000*/         UINT64       Reserved : 7;        // 25 BitPosition                  
/*0x000*/         UINT64       Day : 8;             // 32 BitPosition                  
/*0x000*/         UINT64       Month : 8;           // 40 BitPosition                  
/*0x000*/         UINT64       Year : 8;            // 48 BitPosition                  
/*0x000*/         UINT64       Century : 8;         // 56 BitPosition                  
              };                                                                       
/*0x000*/     union _LARGE_INTEGER AsLARGE_INTEGER; // 4 elements, 0x8 bytes (sizeof)  
          }WHEA_TIMESTAMP, *PWHEA_TIMESTAMP;                                           
                                                                                       
          typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 4 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      Recovered : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      PreviousError : 1;       // 1 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;           // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;           // 3 BitPosition                  
              };                                                                          
/*0x000*/     ULONG32      AsULONG;                                                       
          }WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS;                                  
                                                                                          
          typedef union _WHEA_PERSISTENCE_INFO  // 7 elements, 0x8 bytes (sizeof) 
          {                                                                       
              struct                            // 6 elements, 0x8 bytes (sizeof) 
              {                                                                   
/*0x000*/         UINT64       Signature : 16;  // 0 BitPosition                  
/*0x000*/         UINT64       Length : 24;     // 16 BitPosition                 
/*0x000*/         UINT64       Identifier : 16; // 40 BitPosition                 
/*0x000*/         UINT64       Attributes : 2;  // 56 BitPosition                 
/*0x000*/         UINT64       DoNotLog : 1;    // 58 BitPosition                 
/*0x000*/         UINT64       Reserved : 5;    // 59 BitPosition                 
              };                                                                  
/*0x000*/     UINT64       AsULONGLONG;                                           
          }WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO;                                  
                                                                                  
          typedef struct _WHEA_ERROR_RECORD_HEADER                 // 16 elements, 0x80 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Signature;                                                                  
/*0x004*/     union _WHEA_REVISION Revision;                       // 3 elements, 0x2 bytes (sizeof)   
/*0x006*/     ULONG32      SignatureEnd;                                                               
/*0x00A*/     UINT16       SectionCount;                                                               
/*0x00C*/     enum _WHEA_ERROR_SEVERITY Severity;                                                      
/*0x010*/     union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits; // 5 elements, 0x4 bytes (sizeof)   
/*0x014*/     ULONG32      Length;                                                                     
/*0x018*/     union _WHEA_TIMESTAMP Timestamp;                     // 10 elements, 0x8 bytes (sizeof)  
/*0x020*/     struct _GUID PlatformId;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _GUID PartitionId;                            // 4 elements, 0x10 bytes (sizeof)  
/*0x040*/     struct _GUID CreatorId;                              // 4 elements, 0x10 bytes (sizeof)  
/*0x050*/     struct _GUID NotifyType;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x060*/     UINT64       RecordId;                                                                   
/*0x068*/     union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;         // 5 elements, 0x4 bytes (sizeof)   
/*0x06C*/     union _WHEA_PERSISTENCE_INFO PersistenceInfo;        // 7 elements, 0x8 bytes (sizeof)   
/*0x074*/     UINT8        Reserved[12];                                                               
          }WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER;                                       
                                                                                                       
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS // 4 elements, 0x1 bytes (sizeof) 
          {                                                                                               
              struct                                                    // 3 elements, 0x1 bytes (sizeof) 
              {                                                                                           
/*0x000*/         UINT8        FRUId : 1;                               // 0 BitPosition                  
/*0x000*/         UINT8        FRUText : 1;                             // 1 BitPosition                  
/*0x000*/         UINT8        Reserved : 6;                            // 2 BitPosition                  
              };                                                                                          
/*0x000*/     UINT8        AsUCHAR;                                                                       
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;                                  
                                                                                                          
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                           
              struct                                                // 7 elements, 0x4 bytes (sizeof) 
              {                                                                                       
/*0x000*/         ULONG32      Primary : 1;                         // 0 BitPosition                  
/*0x000*/         ULONG32      ContainmentWarning : 1;              // 1 BitPosition                  
/*0x000*/         ULONG32      Reset : 1;                           // 2 BitPosition                  
/*0x000*/         ULONG32      ThresholdExceeded : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      ResourceNotAvailable : 1;            // 4 BitPosition                  
/*0x000*/         ULONG32      LatentError : 1;                     // 5 BitPosition                  
/*0x000*/         ULONG32      Reserved : 26;                       // 6 BitPosition                  
              };                                                                                      
/*0x000*/     ULONG32      AsULONG;                                                                   
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;                                  
                                                                                                      
          typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR                 // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     ULONG32      SectionOffset;                                                                          
/*0x004*/     ULONG32      SectionLength;                                                                          
/*0x008*/     union _WHEA_REVISION Revision;                                   // 3 elements, 0x2 bytes (sizeof)   
/*0x00A*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits; // 4 elements, 0x1 bytes (sizeof)   
/*0x00B*/     UINT8        Reserved;                                                                               
/*0x00C*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;         // 8 elements, 0x4 bytes (sizeof)   
/*0x010*/     struct _GUID SectionType;                                        // 4 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _GUID FRUId;                                              // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     enum _WHEA_ERROR_SEVERITY SectionSeverity;                                                           
/*0x034*/     CHAR         FRUText[20];                                                                            
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;                                    
                                                                                                                   
          typedef struct _WHEA_ERROR_RECORD                                      // 2 elements, 0xC8 bytes (sizeof)  
          {                                                                                                          
/*0x000*/     struct _WHEA_ERROR_RECORD_HEADER Header;                           // 16 elements, 0x80 bytes (sizeof) 
/*0x080*/     struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];                                     
          }WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD;                                                                   
                                                                                                                     
          typedef struct _WORK_QUEUE_ITEM                                                                                                           // 3 elements, 0x10 bytes (sizeof) 
          {                                                                                                                                                                            
/*0x000*/     struct _LIST_ENTRY List;                                                                                                              // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     FUNCT_00C6_075A_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_FreeRoutine* WorkerRoutine;                                    
/*0x00C*/     VOID*        Parameter;                                                                                                                                                  
          }WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;                                                                                                                                         
                                                                                                                                                                                       
          typedef struct _XSAVE_FORMAT         // 16 elements, 0x200 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       ControlWord;                                             
/*0x002*/     UINT16       StatusWord;                                              
/*0x004*/     UINT8        TagWord;                                                 
/*0x005*/     UINT8        Reserved1;                                               
/*0x006*/     UINT16       ErrorOpcode;                                             
/*0x008*/     ULONG32      ErrorOffset;                                             
/*0x00C*/     UINT16       ErrorSelector;                                           
/*0x00E*/     UINT16       Reserved2;                                               
/*0x010*/     ULONG32      DataOffset;                                              
/*0x014*/     UINT16       DataSelector;                                            
/*0x016*/     UINT16       Reserved3;                                               
/*0x018*/     ULONG32      MxCsr;                                                   
/*0x01C*/     ULONG32      MxCsr_Mask;                                              
/*0x020*/     struct _M128A FloatRegisters[8];                                      
/*0x0A0*/     struct _M128A XmmRegisters[8];                                        
/*0x120*/     UINT8        Reserved4[224];                                          
          }XSAVE_FORMAT, *PXSAVE_FORMAT;                                            
                                                                                    
          typedef struct _XSAVE_AREA_HEADER // 3 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Mask;                                               
/*0x008*/     UINT64       CompactionMask;                                     
/*0x010*/     UINT64       Reserved2[6];                                       
          }XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;                                   
                                                                               
          typedef struct _XSAVE_AREA            // 2 elements, 0x240 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _XSAVE_FORMAT LegacyState; // 16 elements, 0x200 bytes (sizeof) 
/*0x200*/     struct _XSAVE_AREA_HEADER Header; // 3 elements, 0x40 bytes (sizeof)   
          }XSAVE_AREA, *PXSAVE_AREA;                                                 
                                                                                     
          typedef struct _XSTATE_CONTEXT // 7 elements, 0x20 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Mask;                                            
/*0x008*/     ULONG32      Length;                                          
/*0x00C*/     ULONG32      Reserved1;                                       
/*0x010*/     struct _XSAVE_AREA* Area;                                     
/*0x014*/     ULONG32      Reserved2;                                       
/*0x018*/     VOID*        Buffer;                                          
/*0x01C*/     ULONG32      Reserved3;                                       
          }XSTATE_CONTEXT, *PXSTATE_CONTEXT;                                   
                                                                            
          typedef struct _XSTATE_SAVE                   // 8 elements, 0x20 bytes (sizeof) 
          {                                                                                
              union                                     // 2 elements, 0x20 bytes (sizeof) 
              {                                                                            
                  struct                                // 7 elements, 0x20 bytes (sizeof) 
                  {                                                                        
/*0x000*/             INT64        Reserved1;                                              
/*0x008*/             ULONG32      Reserved2;                                              
/*0x00C*/             struct _XSTATE_SAVE* Prev;                                           
/*0x010*/             struct _XSAVE_AREA* Reserved3;                                       
/*0x014*/             struct _KTHREAD* Thread;                                             
/*0x018*/             VOID*        Reserved4;                                              
/*0x01C*/             UINT8        Level;                                                  
/*0x01D*/             UINT8        _PADDING0_[0x3];                                        
                  };                                                                       
/*0x000*/         struct _XSTATE_CONTEXT XStateContext; // 7 elements, 0x20 bytes (sizeof) 
              };                                                                           
          }XSTATE_SAVE, *PXSTATE_SAVE;                                                     
                                                                                           

#ifdef __cplusplus
}
#endif

